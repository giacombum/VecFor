var tipuesearch = {"pages":[{"text":"VecFor VecFor VecFor, Vector algebra class for Fortran poor people A KISS pure Fortran OOD class for computing Vectorial (3D) algebra VecFor is a pure Fortran (KISS) library for building easily nice Command Line Interfaces (CLI) for modern Fortran projects; VecFor is Fortran 2003+ standard compliant; VecFor is OOP designed; VecFor is a Free, Open Source Project. Table of Contents What is VecFor? Main features Copyrights Documentation A Taste of VecFor Issues Compiler Support What is VecFor? VecFor is a user-friendly and Object-Oriented designed API for handling vectors in a (3D) three dimensional frame of reference. It exposes (among others) the object Vector that posses a far complete set of overloaded operators for performing vectorial calculus algebra. VecFor adheres to the KISS concept: it is a pure Fortran (2003+) library coded into a single module file, vecfor.F90 . Go to Top Main features Pure Fortran implementation; KISS and user-friendly: simple API (one main object plus few other helpers ); easy building and porting on heterogeneous architectures: the vector components are defined as real with parametrized kind; the default kind parameter is set to be 64-bit-like finite precision (defined by means of the portable select_real_kind intrinsic function), but it can be easily changed at compile time; comprehensive (almost complete set of operators for vectorial calculus algebra); all operators accept mixed type/kind arguments: vectors can be mixed with integers and reals of any kinds by means of generic interfaces with dynamic dispatch resolved at compile time; efficient and non intrusive (all object methods and operators are pure or elemental ): threads/processes safe; Tests-Driven Developed ( TDD ); well documented: complete API reference; comprehensive wiki : collaborative developed on GitHub ; FOSS licensed ; Any feature request is welcome. Go to Top Copyrights VecFor is an open source project, it is distributed under a multi-licensing system: for FOSS projects: GPL v3 ; for closed source/commercial projects: BSD 2-Clause ; BSD 3-Clause ; MIT . Anyone is interest to use, to develop or to contribute to VecFor is welcome, feel free to select the license that best matches your soul! More details can be found on wiki . Go to Top Documentation Besides this README file the VecFor documentation is contained into its own wiki . Detailed documentation of the API is contained into the GitHub Pages that can also be created locally by means of ford tool . A Taste of VecFor VecFor allows a very simple, high-level implementation of vectorial calculus algebra: use vecfor ! load vector type and all helpers use , intrinsic :: ISO_FORTRAN_ENV , only : stdout => OUTPUT_UNIT type ( vector ) :: point1 type ( vector ) :: point2 type ( vector ) :: distance point1 = 1 * ex ! ex is the versor along x direction exposed by VecFor point2 = 1 * ex + 2 * ey ! ey is the versor along y direction exposed by VecFor distance = point2 - ponint1 print \"(A)\" , \" Vectorial distance\" call distance % print ( unit = stdout ) print \"(A)\" , \" Distance module\" print * , distance % normL2 () ! expected output !   Vectorial distance !   Component x  0.000000000000000E+000 !   Component y +0.200000000000000E+001 !   Component z  0.000000000000000E+000 !   Distance module !   +0.200000000000000E+001 As you can see from the above example, defining and using a vector become very close to the mathematical formulation. Note that, using the dynamic dispatching resolved at compile time, there is no performance penalty on using a type(vector) variable instead of an hard coded real, dimension(3) array variable (or even more verbose and less clear real :: x, y, z variables for each vectorâ€¦). Go to Top Developer Info Stefano Zaghi","tags":"","loc":"index.html","title":" VecFor "},{"text":"Module definition of class Vector. Source Code !< Module definition of class Vector. module VecFor !< Module definition of class Vector. !< !< This derived type is useful for manipulating vectors in 3D space. The components of the vectors are reals with !< parametrized kind as defined by the library module. The components are defined in a three-dimensional cartesian frame of !< reference. !< All the vectorial math procedures (cross, dot products, parallel...) assume a three-dimensional cartesian frame of reference. !< The operators of assignment (=), multiplication (*), division (/), sum (+) and subtraction (-) have been overloaded. !< Furthermore the *dot* and *cross* products have been defined. !< Therefore this module provides a far-complete algebra based on Vector derived type. !----------------------------------------------------------------------------------------------------------------------------------- !----------------------------------------------------------------------------------------------------------------------------------- !----------------------------------------------------------------------------------------------------------------------------------- implicit none private public :: ex , ey , ez public :: sq_norm public :: normL2 public :: normalize public :: face_normal3 , face_normal4 !----------------------------------------------------------------------------------------------------------------------------------- !----------------------------------------------------------------------------------------------------------------------------------- #ifdef r16p integer , parameter :: R16P = selected_real_kind ( 33 , 4931 ) !< 33  digits, range [10&#94;{-4931}, 10&#94;{+4931} - 1]; 128 bits. #else integer , parameter :: R16P = selected_real_kind ( 15 , 307 ) !< Defined as R8P; 64 bits. #endif integer , parameter :: R8P = selected_real_kind ( 15 , 307 ) !< 15  digits, range [10&#94;{-307} , 10&#94;{+307}  - 1]; 64 bits. integer , parameter :: R4P = selected_real_kind ( 6 , 37 ) !< 6   digits, range [10&#94;{-37}  , 10&#94;{+37}   - 1]; 32 bits. integer , parameter :: I8P = selected_int_kind ( 18 ) !< Range [-2&#94;{63},+2&#94;{63} - 1], 19 digits plus sign; 64 bits. integer , parameter :: I4P = selected_int_kind ( 9 ) !< Range [-2&#94;{31},+2&#94;{31} - 1], 10 digits plus sign; 32 bits. integer , parameter :: I2P = selected_int_kind ( 4 ) !< Range [-2&#94;{15},+2&#94;{15} - 1], 5  digits plus sign; 16 bits. integer , parameter :: I1P = selected_int_kind ( 2 ) !< Range [-2&#94;{7} ,+2&#94;{7}  - 1], 3  digits plus sign; 8  bits. real ( R8P ), parameter :: smallR8P = tiny ( 1._R8P ) !< Smallest (module) representable value of kind=R8P variable. integer , parameter :: DR8P = 23 !< Number of digits of output format FR8P. character ( 10 ), parameter :: FR8P = '(E23.15E3)' !< Output format for kind=R8P variable. type , public :: Vector !< Vector class. real ( R8P ) :: x = 0._R8P !< Cartesian component in x direction. real ( R8P ) :: y = 0._R8P !< Cartesian component in y direction. real ( R8P ) :: z = 0._R8P !< Cartesian component in z direction. contains procedure :: init => init_vector_self ! Procedure for initializing vector components. procedure :: set => set_vector_self ! Procedure for setting vector components. procedure :: iolen => iolen_vector_self ! Procedure for computing IO length. procedure :: load => load_vector_self ! Procedure for loading Vector data. procedure :: save => save_vector_self ! Procedure for saving Vector data. procedure :: print => print_vector_self ! Procedure for printing vector components with a \"pretty\" format. procedure :: sq_norm => sq_norm_self ! Procedure for computing the square of the norm of a vector. procedure :: normL2 => normL2_self ! Procedure for computing the norm L2 of a vector. procedure :: normalize => normalize_self ! Procedure for normalizing a vector. procedure :: normalized => normalized_self ! Procedure for obtaining a normalized copy of a vector. procedure :: face_normal4 => face_normal4_self ! Procedure for calculating the normal of the face defined by 4 points vector. procedure :: face_normal3 => face_normal3_self ! Procedure for calculating the normal of the face defined by 3 points vector. generic :: operator (. cross .) => crossproduct ! Procedure for computing the cross product of 2 vectors. generic :: operator (. dot .) => dotproduct ! Procedure for computing the scalar (dot) product of 2 vectors. generic :: operator (. paral .) => parallel ! Procedure for computing the component of vec1 parallel to vec2. generic :: operator (. ortho .) => orthogonal ! Procedure for computign the component of vec1 orthogonal to vec2. procedure , pass ( vec1 ), private :: crossproduct procedure , pass ( vec1 ), private :: dotproduct procedure , pass ( vec1 ), private :: parallel procedure , pass ( vec1 ), private :: orthogonal ! operators overloading generic :: assignment ( = ) => assign_self , & #ifdef r16p assign_ScalR16P ,& #endif assign_ScalR8P , assign_ScalR4P , assign_ScalI8P , assign_ScalI4P , assign_ScalI2P , assign_ScalI1P #ifdef r16p procedure , pass ( self ), private :: assign_ScalR16P #endif procedure , pass ( self1 ), private :: assign_self procedure , pass ( self ), private :: assign_ScalR8P procedure , pass ( self ), private :: assign_ScalR4P procedure , pass ( self ), private :: assign_ScalI8P procedure , pass ( self ), private :: assign_ScalI4P procedure , pass ( self ), private :: assign_ScalI2P procedure , pass ( self ), private :: assign_ScalI1P generic :: operator ( * ) => self_mul_self , & #ifdef r16p ScalR16P_mul_self , self_mul_ScalR16P , & #endif ScalR8P_mul_self , self_mul_ScalR8P , ScalR4P_mul_self , self_mul_ScalR4P , ScalI8P_mul_self , self_mul_ScalI8P ,& ScalI4P_mul_self , self_mul_ScalI4P , ScalI2P_mul_self , self_mul_ScalI2P , ScalI1P_mul_self , self_mul_ScalI1P #ifdef r16p procedure , pass ( self ), private :: ScalR16P_mul_self procedure , pass ( self ), private :: self_mul_ScalR16P #endif procedure , pass ( self1 ), private :: self_mul_self procedure , pass ( self ), private :: ScalR8P_mul_self procedure , pass ( self ), private :: ScalR4P_mul_self procedure , pass ( self ), private :: ScalI8P_mul_self procedure , pass ( self ), private :: ScalI4P_mul_self procedure , pass ( self ), private :: ScalI2P_mul_self procedure , pass ( self ), private :: ScalI1P_mul_self procedure , pass ( self ), private :: self_mul_ScalR8P procedure , pass ( self ), private :: self_mul_ScalR4P procedure , pass ( self ), private :: self_mul_ScalI8P procedure , pass ( self ), private :: self_mul_ScalI4P procedure , pass ( self ), private :: self_mul_ScalI2P procedure , pass ( self ), private :: self_mul_ScalI1P generic :: operator ( / ) => self_div_self , & #ifdef r16p self_div_ScalR16P ,& #endif self_div_ScalR8P , self_div_ScalR4P , self_div_ScalI8P , self_div_ScalI4P , self_div_ScalI2P , self_div_ScalI1P #ifdef r16p procedure , pass ( self ), private :: self_div_ScalR16P #endif procedure , pass ( self1 ), private :: self_div_self procedure , pass ( self ), private :: self_div_ScalR8P procedure , pass ( self ), private :: self_div_ScalR4P procedure , pass ( self ), private :: self_div_ScalI8P procedure , pass ( self ), private :: self_div_ScalI4P procedure , pass ( self ), private :: self_div_ScalI2P procedure , pass ( self ), private :: self_div_ScalI1P generic :: operator ( + ) => positive_self , self_sum_self , & #ifdef r16p ScalR16P_sum_self , self_sum_ScalR16P , & #endif ScalR8P_sum_self , self_sum_ScalR8P , ScalR4P_sum_self , self_sum_ScalR4P , ScalI8P_sum_self , self_sum_ScalI8P ,& ScalI4P_sum_self , self_sum_ScalI4P , ScalI2P_sum_self , self_sum_ScalI2P , ScalI1P_sum_self , self_sum_ScalI1P #ifdef r16p procedure , pass ( self ), private :: ScalR16P_sum_self procedure , pass ( self ), private :: self_sum_ScalR16P #endif procedure , pass ( self ), private :: positive_self procedure , pass ( self1 ), private :: self_sum_self procedure , pass ( self ), private :: ScalR8P_sum_self procedure , pass ( self ), private :: ScalR4P_sum_self procedure , pass ( self ), private :: ScalI8P_sum_self procedure , pass ( self ), private :: ScalI4P_sum_self procedure , pass ( self ), private :: ScalI2P_sum_self procedure , pass ( self ), private :: ScalI1P_sum_self procedure , pass ( self ), private :: self_sum_ScalR8P procedure , pass ( self ), private :: self_sum_ScalR4P procedure , pass ( self ), private :: self_sum_ScalI8P procedure , pass ( self ), private :: self_sum_ScalI4P procedure , pass ( self ), private :: self_sum_ScalI2P procedure , pass ( self ), private :: self_sum_ScalI1P generic :: operator ( - ) => negative_self , self_sub_self , & #ifdef r16p ScalR16P_sub_self , self_sub_ScalR16P , & #endif ScalR8P_sub_self , self_sub_ScalR8P , ScalR4P_sub_self , self_sub_ScalR4P , ScalI8P_sub_self , self_sub_ScalI8P ,& ScalI4P_sub_self , self_sub_ScalI4P , ScalI2P_sub_self , self_sub_ScalI2P , ScalI1P_sub_self , self_sub_ScalI1P #ifdef r16p procedure , pass ( self ), private :: ScalR16P_sub_self procedure , pass ( self ), private :: self_sub_ScalR16P #endif procedure , pass ( self ), private :: negative_self procedure , pass ( self1 ), private :: self_sub_self procedure , pass ( self ), private :: ScalR8P_sub_self procedure , pass ( self ), private :: ScalR4P_sub_self procedure , pass ( self ), private :: ScalI8P_sub_self procedure , pass ( self ), private :: ScalI4P_sub_self procedure , pass ( self ), private :: ScalI2P_sub_self procedure , pass ( self ), private :: ScalI1P_sub_self procedure , pass ( self ), private :: self_sub_ScalR8P procedure , pass ( self ), private :: self_sub_ScalR4P procedure , pass ( self ), private :: self_sub_ScalI8P procedure , pass ( self ), private :: self_sub_ScalI4P procedure , pass ( self ), private :: self_sub_ScalI2P procedure , pass ( self ), private :: self_sub_ScalI1P generic :: operator ( /= ) => self_not_eq_self , & #ifdef r16p R16P_not_eq_self , self_not_eq_R16P , & #endif R8P_not_eq_self , self_not_eq_R8P , R4P_not_eq_self , self_not_eq_R4P , I8P_not_eq_self , self_not_eq_I8P ,& I4P_not_eq_self , self_not_eq_I4P , I2P_not_eq_self , self_not_eq_I2P , I1P_not_eq_self , self_not_eq_I1P generic :: operator ( < ) => self_low_self , & #ifdef r16p R16P_low_self , self_low_R16P , & #endif R8P_low_self , self_low_R8P , R4P_low_self , self_low_R4P , I8P_low_self , self_low_I8P ,& I4P_low_self , self_low_I4P , I2P_low_self , self_low_I2P , I1P_low_self , self_low_I1P generic :: operator ( <= ) => self_low_eq_self , & #ifdef r16p R16P_low_eq_self , self_low_eq_R16P , & #endif R8P_low_eq_self , self_low_eq_R8P , R4P_low_eq_self , self_low_eq_R4P , I8P_low_eq_self , self_low_eq_I8P ,& I4P_low_eq_self , self_low_eq_I4P , I2P_low_eq_self , self_low_eq_I2P , I1P_low_eq_self , self_low_eq_I1P generic :: operator ( == ) => self_eq_self , & #ifdef r16p R16P_eq_self , self_eq_R16P , & #endif R8P_eq_self , self_eq_R8P , R4P_eq_self , self_eq_R4P , I8P_eq_self , self_eq_I8P ,& I4P_eq_self , self_eq_I4P , I2P_eq_self , self_eq_I2P , I1P_eq_self , self_eq_I1P generic :: operator ( >= ) => self_great_eq_self , & #ifdef r16p R16P_great_eq_self , self_great_eq_R16P , & #endif R8P_great_eq_self , self_great_eq_R8P , R4P_great_eq_self , self_great_eq_R4P , I8P_great_eq_self ,& self_great_eq_I8P , I4P_great_eq_self , self_great_eq_I4P , I2P_great_eq_self , self_great_eq_I2P ,& I1P_great_eq_self , self_great_eq_I1P generic :: operator ( > ) => self_great_self , & #ifdef r16p R16P_great_self , self_great_R16P , & #endif R8P_great_self , self_great_R8P , R4P_great_self , self_great_R4P , I8P_great_self , self_great_I8P ,& I4P_great_self , self_great_I4P , I2P_great_self , self_great_I2P , I1P_great_self , self_great_I1P #ifdef r16p procedure , pass ( self ), private :: R16P_not_eq_self procedure , pass ( self ), private :: self_not_eq_R16P procedure , pass ( self ), private :: R16P_low_self procedure , pass ( self ), private :: self_low_R16P procedure , pass ( self ), private :: R16P_low_eq_self procedure , pass ( self ), private :: self_low_eq_R16P procedure , pass ( self ), private :: R16P_eq_self procedure , pass ( self ), private :: self_eq_R16P procedure , pass ( self ), private :: R16P_great_eq_self procedure , pass ( self ), private :: self_great_eq_R16P procedure , pass ( self ), private :: R16P_great_self procedure , pass ( self ), private :: self_great_R16P #endif procedure , pass ( self1 ), private :: self_not_eq_self procedure , pass ( self ), private :: R8P_not_eq_self procedure , pass ( self ), private :: R4P_not_eq_self procedure , pass ( self ), private :: I8P_not_eq_self procedure , pass ( self ), private :: I4P_not_eq_self procedure , pass ( self ), private :: I2P_not_eq_self procedure , pass ( self ), private :: I1P_not_eq_self procedure , pass ( self ), private :: self_not_eq_R8P procedure , pass ( self ), private :: self_not_eq_R4P procedure , pass ( self ), private :: self_not_eq_I8P procedure , pass ( self ), private :: self_not_eq_I4P procedure , pass ( self ), private :: self_not_eq_I2P procedure , pass ( self ), private :: self_not_eq_I1P procedure , pass ( self1 ), private :: self_low_self procedure , pass ( self ), private :: R8P_low_self procedure , pass ( self ), private :: R4P_low_self procedure , pass ( self ), private :: I8P_low_self procedure , pass ( self ), private :: I4P_low_self procedure , pass ( self ), private :: I2P_low_self procedure , pass ( self ), private :: I1P_low_self procedure , pass ( self ), private :: self_low_R8P procedure , pass ( self ), private :: self_low_R4P procedure , pass ( self ), private :: self_low_I8P procedure , pass ( self ), private :: self_low_I4P procedure , pass ( self ), private :: self_low_I2P procedure , pass ( self ), private :: self_low_I1P procedure , pass ( self1 ), private :: self_low_eq_self procedure , pass ( self ), private :: R8P_low_eq_self procedure , pass ( self ), private :: R4P_low_eq_self procedure , pass ( self ), private :: I8P_low_eq_self procedure , pass ( self ), private :: I4P_low_eq_self procedure , pass ( self ), private :: I2P_low_eq_self procedure , pass ( self ), private :: I1P_low_eq_self procedure , pass ( self ), private :: self_low_eq_R8P procedure , pass ( self ), private :: self_low_eq_R4P procedure , pass ( self ), private :: self_low_eq_I8P procedure , pass ( self ), private :: self_low_eq_I4P procedure , pass ( self ), private :: self_low_eq_I2P procedure , pass ( self ), private :: self_low_eq_I1P procedure , pass ( self1 ), private :: self_eq_self procedure , pass ( self ), private :: R8P_eq_self procedure , pass ( self ), private :: R4P_eq_self procedure , pass ( self ), private :: I8P_eq_self procedure , pass ( self ), private :: I4P_eq_self procedure , pass ( self ), private :: I2P_eq_self procedure , pass ( self ), private :: I1P_eq_self procedure , pass ( self ), private :: self_eq_R8P procedure , pass ( self ), private :: self_eq_R4P procedure , pass ( self ), private :: self_eq_I8P procedure , pass ( self ), private :: self_eq_I4P procedure , pass ( self ), private :: self_eq_I2P procedure , pass ( self ), private :: self_eq_I1P procedure , pass ( self1 ), private :: self_great_eq_self procedure , pass ( self ), private :: R8P_great_eq_self procedure , pass ( self ), private :: R4P_great_eq_self procedure , pass ( self ), private :: I8P_great_eq_self procedure , pass ( self ), private :: I4P_great_eq_self procedure , pass ( self ), private :: I2P_great_eq_self procedure , pass ( self ), private :: I1P_great_eq_self procedure , pass ( self ), private :: self_great_eq_R8P procedure , pass ( self ), private :: self_great_eq_R4P procedure , pass ( self ), private :: self_great_eq_I8P procedure , pass ( self ), private :: self_great_eq_I4P procedure , pass ( self ), private :: self_great_eq_I2P procedure , pass ( self ), private :: self_great_eq_I1P procedure , pass ( self1 ), private :: self_great_self procedure , pass ( self ), private :: R8P_great_self procedure , pass ( self ), private :: R4P_great_self procedure , pass ( self ), private :: I8P_great_self procedure , pass ( self ), private :: I4P_great_self procedure , pass ( self ), private :: I2P_great_self procedure , pass ( self ), private :: I1P_great_self procedure , pass ( self ), private :: self_great_R8P procedure , pass ( self ), private :: self_great_R4P procedure , pass ( self ), private :: self_great_I8P procedure , pass ( self ), private :: self_great_I4P procedure , pass ( self ), private :: self_great_I2P procedure , pass ( self ), private :: self_great_I1P endtype Vector type , public :: Vector_Ptr !< Pointer of Vector for creating array of pointers of Vector. type ( Vector ), pointer :: p => null () endtype Vector_Ptr type ( Vector ), parameter :: ex = Vector ( 1._R8P , 0._R8P , 0._R8P ) !< X direction versor. type ( Vector ), parameter :: ey = Vector ( 0._R8P , 1._R8P , 0._R8P ) !< Y direction versor. type ( Vector ), parameter :: ez = Vector ( 0._R8P , 0._R8P , 1._R8P ) !< Z direction versor. !----------------------------------------------------------------------------------------------------------------------------------- contains elemental function sq_norm ( vec ) result ( sq ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the square of the norm of a vector. !< !< The square norm if defined as  N = x&#94;2  + y&#94;2  + z&#94;2 . !--------------------------------------------------------------------------------------------------------------------------------- type ( Vector ), intent ( IN ) :: vec !< Vector. real ( R8P ) :: sq !< Square of the Norm. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sq = ( vec % x * vec % x ) + ( vec % y * vec % y ) + ( vec % z * vec % z ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction sq_norm elemental function normL2 ( vec ) result ( norm ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the norm L2 of a vector. !< !< The norm L2 if defined as  N = \\sqrt {x&#94;2  + y&#94;2  + z&#94;2 } . !--------------------------------------------------------------------------------------------------------------------------------- type ( Vector ), intent ( IN ) :: vec !< Vector. real ( R8P ) :: norm !< Norm L2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- norm = sqrt (( vec % x * vec % x ) + ( vec % y * vec % y ) + ( vec % z * vec % z )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction normL2 elemental function normalize ( vec ) result ( norm ) !--------------------------------------------------------------------------------------------------------------------------------- !< Normalize a vector. !< !< The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the !< normalization value is set to normL2(vec)+smallR8P. !--------------------------------------------------------------------------------------------------------------------------------- type ( Vector ), intent ( IN ) :: vec !< Vector to be normalized. type ( Vector ) :: norm !< Vector normalized. real ( R8P ) :: nm !< Norm L2 of vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- nm = normL2 ( vec ) if ( nm < smallR8P ) then nm = nm + smallR8P endif norm % x = vec % x / nm norm % y = vec % y / nm norm % z = vec % z / nm return !--------------------------------------------------------------------------------------------------------------------------------- endfunction normalize elemental function face_normal4 ( norm , pt1 , pt2 , pt3 , pt4 ) result ( fnormal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. !< !< The convention for the points numeration is the following: !<``` !< 1.----------.2 !<  |          | !<  |          | !<  |          | !<  |          | !< 4.----------.3 !<``` !< The normal is calculated by the cross product of the diagonal d13 for the diagonal d24: d13 x d24. !< The normal is normalized if the variable *norm* is passed (with any value). !--------------------------------------------------------------------------------------------------------------------------------- character ( 1 ), intent ( IN ), optional :: norm !< If 'norm' is passed as argument the normal is normalized. type ( Vector ), intent ( IN ) :: pt1 !< First face point. type ( Vector ), intent ( IN ) :: pt2 !< Second face point. type ( Vector ), intent ( IN ) :: pt3 !< Third face point. type ( Vector ), intent ( IN ) :: pt4 !< Fourth face point. type ( Vector ) :: fnormal !< Face normal. type ( Vector ) :: d13 !< Face 1-3 diagonal. type ( Vector ) :: d24 !< Face 2-4 diagonal. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- d13 = pt3 - pt1 d24 = pt4 - pt2 if ( present ( norm )) then fnormal = normalize ( d13 . cross . d24 ) else fnormal = 0.5_R8P * ( d13 . cross . d24 ) endif return !--------------------------------------------------------------------------------------------------------------------------------- endfunction face_normal4 elemental function face_normal3 ( norm , pt1 , pt2 , pt3 ) result ( fnormal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. !< !< The convention for the points numeration is the following: !<``` !< 1.----.2 !<   \\   | !<    \\  | !<     \\ | !<      \\| !<       .3 !<``` !< The normal is calculated by the cross product of the side s12 for the side s13: s12 x s13. !< The normal is normalized if the variable 'norm' is passed (with any value). !--------------------------------------------------------------------------------------------------------------------------------- character ( 1 ), intent ( IN ), optional :: norm !< If 'norm' is passed as argument the normal is normalized. type ( Vector ), intent ( IN ) :: pt1 !< First face point. type ( Vector ), intent ( IN ) :: pt2 !< Second face point. type ( Vector ), intent ( IN ) :: pt3 !< Third face point. type ( Vector ) :: fnormal !< Face normal. type ( Vector ) :: s12 !< Face 1-2 diagonals. type ( Vector ) :: s13 !< Face 1-3 diagonals. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- s12 = pt2 - pt1 s13 = pt3 - pt1 if ( present ( norm )) then fnormal = normalize ( s12 . cross . s13 ) else fnormal = 0.5_R8P * ( s12 . cross . s13 ) endif return !--------------------------------------------------------------------------------------------------------------------------------- endfunction face_normal3 elemental subroutine init_vector_self ( vec ) !--------------------------------------------------------------------------------------------------------------------------------- !< Initialize components of Vector variable. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: vec !< Vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- vec % x = 0._R8P vec % y = 0._R8P vec % z = 0._R8P return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine init_vector_self elemental subroutine set_vector_self ( vec , x , y , z ) !--------------------------------------------------------------------------------------------------------------------------------- !< Set components of Vector variable. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: vec !< Vector. real ( R8P ), intent ( IN ), optional :: x !< Cartesian component in x direction. real ( R8P ), intent ( IN ), optional :: y !< Cartesian component in y direction. real ( R8P ), intent ( IN ), optional :: z !< Cartesian component in z direction. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- if ( present ( x )) vec % x = x if ( present ( y )) vec % y = y if ( present ( z )) vec % z = z return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine set_vector_self function iolen_vector_self ( vec ) result ( iolen ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute IO length. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector. integer ( I4P ) :: iolen !< IO length. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- inquire ( iolength = iolen ) vec % x , vec % y , vec % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction iolen_vector_self subroutine load_vector_self ( vec , pos , iostat , iomsg , unit ) !--------------------------------------------------------------------------------------------------------------------------------- !< Load Vector data. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: vec !< Vector data. integer ( I8P ), optional , intent ( IN ) :: pos !< Position specifier. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. integer ( I4P ), intent ( IN ) :: unit !< Logic unit. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- if ( present ( pos )) then read ( unit = unit , pos = pos , iostat = iostatd , iomsg = iomsgd ) vec % x , vec % y , vec % z else read ( unit = unit , iostat = iostatd , iomsg = iomsgd ) vec % x , vec % y , vec % z endif if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = trim ( adjustl ( iomsgd )) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine load_vector_self subroutine save_vector_self ( vec , pos , iostat , iomsg , unit ) !--------------------------------------------------------------------------------------------------------------------------------- !< Save Vector data. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector data. integer ( I8P ), optional , intent ( IN ) :: pos !< Position specifier. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. integer ( I4P ), intent ( IN ) :: unit !< Logic unit. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- if ( present ( pos )) then write ( unit = unit , pos = pos , iostat = iostatd , iomsg = iomsgd ) vec % x , vec % y , vec % z else write ( unit = unit , iostat = iostatd , iomsg = iomsgd ) vec % x , vec % y , vec % z endif if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = trim ( adjustl ( iomsgd )) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine save_vector_self subroutine print_vector_self ( vec , pref , iostat , iomsg , unit ) !--------------------------------------------------------------------------------------------------------------------------------- !< Print in a pretty ascii format the components of type Vector. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector. character ( * ), optional , intent ( IN ) :: pref !< Prefixing string for outputs. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- prefd = '' ; if ( present ( pref )) prefd = pref write ( unit , '(A)' , iostat = iostatd , iomsg = iomsgd ) pref // ' Component x ' // str ( n = vec % x ) write ( unit , '(A)' , iostat = iostatd , iomsg = iomsgd ) pref // ' Component y ' // str ( n = vec % y ) write ( unit , '(A)' , iostat = iostatd , iomsg = iomsgd ) pref // ' Component z ' // str ( n = vec % z ) if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = trim ( adjustl ( iomsgd )) return !--------------------------------------------------------------------------------------------------------------------------------- contains elemental function str ( n ) result ( str_ ) !------------------------------------------------------------------------------------------------------------------------------- !< Procedure for converting real to string. This function achieves casting of real to string. !------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: n !< Real to be converted. character ( DR8P ) :: str_ !< Returned string containing input number. !------------------------------------------------------------------------------------------------------------------------------- !------------------------------------------------------------------------------------------------------------------------------- write ( str_ , FR8P ) n ! Casting of n to string. if ( n > 0._R8P ) str_ ( 1 : 1 ) = '+' ! Prefixing plus if n>0. return !------------------------------------------------------------------------------------------------------------------------------- endfunction str endsubroutine print_vector_self elemental subroutine normalize_self ( vec ) !--------------------------------------------------------------------------------------------------------------------------------- !< Normalize a vector. !< !< The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the !< normalization value is set to normL2(vec)+smallR8P. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: vec !< Vector to be normalized. real ( R8P ) :: nm !< Norm L2 of vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- nm = normL2 ( vec ) if ( nm < smallR8P ) then nm = nm + smallR8P endif vec % x = vec % x / nm vec % y = vec % y / nm vec % z = vec % z / nm return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine normalize_self elemental function normalized_self ( vec ) result ( norm ) !--------------------------------------------------------------------------------------------------------------------------------- !< Get a normalized copy of a vector. !< !< The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the !< normalization value is set to normL2(vec)+smallR8P. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector to be normalized. type ( Vector ) :: norm !< Normalized copy. real ( R8P ) :: nm !< Norm L2 of vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- nm = normL2 ( vec ) if ( nm < smallR8P ) then nm = nm + smallR8P endif norm % x = vec % x / nm norm % y = vec % y / nm norm % z = vec % z / nm return !--------------------------------------------------------------------------------------------------------------------------------- endfunction normalized_self elemental function sq_norm_self ( vec ) result ( sq ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the square of the norm of a vector. !< !< The square norm if defined as  N = x&#94;2  + y&#94;2  + z&#94;2 . !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector. real ( R8P ) :: sq !< Square of the Norm. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sq = ( vec % x * vec % x ) + ( vec % y * vec % y ) + ( vec % z * vec % z ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction sq_norm_self elemental function normL2_self ( vec ) result ( norm ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the norm L2 of a vector. !< !< The norm L2 if defined as  N = \\sqrt {x&#94;2  + y&#94;2  + z&#94;2 } . !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector. real ( R8P ) :: norm !< Norm L2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- norm = sqrt (( vec % x * vec % x ) + ( vec % y * vec % y ) + ( vec % z * vec % z )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction normL2_self elemental subroutine face_normal4_self ( fnormal , norm , pt1 , pt2 , pt3 , pt4 ) !< Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. !< !< The convention for the points numeration is the following: !<``` !< 1.----------.2 !<  |          | !<  |          | !<  |          | !<  |          | !< 4.----------.3 !<``` !< The normal is calculated by the cross product of the diagonal d13 for the diagonal d24: d13 x d24. !< The normal is normalized if the variable *norm* is passed (with any value). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: fnormal !< Face normal. character ( 1 ), optional , intent ( IN ) :: norm !< If 'norm' is passed as argument the normal is normalized. type ( Vector ), intent ( IN ) :: pt1 !< First face point. type ( Vector ), intent ( IN ) :: pt2 !< Second face point. type ( Vector ), intent ( IN ) :: pt3 !< Third face point. type ( Vector ), intent ( IN ) :: pt4 !< Fourth face point. type ( Vector ) :: d13 !< Face 1-3 diagonals. type ( Vector ) :: d24 !< Face 2-4 diagonals. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- d13 = pt3 - pt1 d24 = pt4 - pt2 if ( present ( norm )) then fnormal = normalize ( d13 . cross . d24 ) else fnormal = 0.5_R8P * ( d13 . cross . d24 ) endif return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine face_normal4_self elemental subroutine face_normal3_self ( fnormal , norm , pt1 , pt2 , pt3 ) !--------------------------------------------------------------------------------------------------------------------------------- !< Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. !< !< The convention for the points numeration is the following: !<``` !< 1.----.2 !<   \\   | !<    \\  | !<     \\ | !<      \\| !<       .3 !<``` !< The normal is calculated by the cross product of the side s12 for the side s13: s12 x s13. !< The normal is normalized if the variable *norm* is passed (with any value). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: fnormal !< Face normal. character ( 1 ), optional , intent ( IN ) :: norm !< If 'norm' is passed as argument the normal is normalized. type ( Vector ), intent ( IN ) :: pt1 !< First face point. type ( Vector ), intent ( IN ) :: pt2 !< Second face point. type ( Vector ), intent ( IN ) :: pt3 !< Third face point. type ( Vector ) :: s12 !< Face 1-2 diagonals. type ( Vector ) :: s13 !< Face 1-3 diagonals. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- s12 = pt2 - pt1 s13 = pt3 - pt1 if ( present ( norm )) then fnormal = normalize ( s12 . cross . s13 ) else fnormal = 0.5_R8P * ( s12 . cross . s13 ) endif return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine face_normal3_self elemental function crossproduct ( vec1 , vec2 ) result ( cross ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the cross product of 2 vectors. !< !<  \\vec V=\\left({y_1 z_2 - z_1 y_2}\\right)\\vec i + !<           \\left({z_1 x_2 - x_1 z_2}\\right)\\vec j + !<           \\left({x_1 y_2 - y_1 x_2}\\right)\\vec k  !< where  x_i ,  y_i  and  z_i   i=1,2  are the components of the vectors. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec1 !< First vector. type ( Vector ), intent ( IN ) :: vec2 !< Second vector. type ( Vector ) :: cross !< Cross product vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- cross % x = ( vec1 % y * vec2 % z ) - ( vec1 % z * vec2 % y ) cross % y = ( vec1 % z * vec2 % x ) - ( vec1 % x * vec2 % z ) cross % z = ( vec1 % x * vec2 % y ) - ( vec1 % y * vec2 % x ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction crossproduct elemental function dotproduct ( vec1 , vec2 ) result ( dot ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the scalar (dot) product of 2 vectors. !< !<  {\\rm D}= x_1 \\cdot x_2 + y_1 \\cdot y_2 + z_1 \\cdot z_2  !< where  x_i ,  y_i  and  z_i   i=1,2  are the components of the vectors. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec1 !< First vector. type ( Vector ), intent ( IN ) :: vec2 !< Second vector. real ( R8P ) :: dot !< Dot product. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- dot = ( vec1 % x * vec2 % x ) + ( vec1 % y * vec2 % y ) + ( vec1 % z * vec2 % z ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction dotproduct elemental function parallel ( vec1 , vec2 ) result ( paral ) !--------------------------------------------------------------------------------------------------------------------------------- !> Compute the component of vec1 parallel to vec2. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec1 !< First vector. type ( Vector ), intent ( IN ) :: vec2 !< Second vector. type ( Vector ) :: paral !< Component of of vec1 parallel to vec2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- paral = ( vec1 . dot . vec2 ) * normalize ( vec2 ) / normL2 ( vec2 ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction parallel elemental function orthogonal ( vec1 , vec2 ) result ( ortho ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the component of vec1 orthogonal to vec2. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec1 !< First vector. type ( Vector ), intent ( IN ) :: vec2 !< Second vector. type ( Vector ) :: ortho !< Component of of vec1 orthogonal to vec2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- ortho = vec1 - ( vec1 . paral . vec2 ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction orthogonal ! Operators overloading. ! Operator (=) pure subroutine assign_self ( self1 , self2 ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between two selfs. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self1 class ( Vector ), intent ( IN ) :: self2 !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self1 % x = self2 % x self1 % y = self2 % y self1 % z = self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_self elemental subroutine assign_ScalR16P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (real R16P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self real ( R16P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalR16P elemental subroutine assign_ScalR8P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (real R8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- implicit none class ( Vector ), intent ( INOUT ) :: self real ( R8P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalR8P elemental subroutine assign_ScalR4P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (real R4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self real ( R4P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalR4P elemental subroutine assign_ScalI8P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (integer I8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self integer ( I8P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalI8P elemental subroutine assign_ScalI4P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (integer I4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self integer ( I4P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalI4P elemental subroutine assign_ScalI2P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !> Assignment between a scalar (integer I2P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self integer ( I2P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalI2P elemental subroutine assign_ScalI1P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (integer I1P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self integer ( I1P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalI1P ! Operator (*) elemental function self_mul_self ( self1 , self2 ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply (by components) two selfs. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = self1 % x * self2 % x mul % y = self1 % y * self2 % y mul % z = self1 % z * self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_self elemental function ScalR16P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (real R16P) for self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR16P_mul_self elemental function self_mul_ScalR16P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (real R16P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalR16P elemental function ScalR8P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (real R8P) for self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR8P_mul_self elemental function self_mul_ScalR8P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (real R8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalR8P elemental function ScalR4P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (real R4P) for self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR4P_mul_self elemental function self_mul_ScalR4P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (real R4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalR4P elemental function ScalI8P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (integer I8P) for self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI8P_mul_self elemental function self_mul_ScalI8P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (integer I8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalI8P elemental function ScalI4P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (integer I4P) for self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI4P_mul_self elemental function self_mul_ScalI4P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (integer I4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalI4P elemental function ScalI2P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (integer I2P) for self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI2P_mul_self elemental function self_mul_ScalI2P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (integer I2P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalI2P elemental function ScalI1P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (integer I1P) for self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI1P_mul_self elemental function self_mul_ScalI1P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (integer I1P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalI1P ! Operator (/) elemental function self_div_self ( self1 , self2 ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self1 % x / self2 % x div % y = self1 % y / self2 % y div % z = self1 % z / self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_self elemental function self_div_ScalR16P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (real R16P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalR16P elemental function self_div_ScalR8P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (real R8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalR8P elemental function self_div_ScalR4P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (real R4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalR4P elemental function self_div_ScalI8P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (integer I8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalI8P elemental function self_div_ScalI4P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (integer I4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalI4P elemental function self_div_ScalI2P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (integer I2P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalI2P elemental function self_div_ScalI1P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (integer I1P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalI1P ! Operator (+) elemental function positive_self ( self ) result ( pos ) !--------------------------------------------------------------------------------------------------------------------------------- !< Applay unary + to a self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self type ( Vector ) :: pos !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- pos % x = + self % x pos % y = + self % y pos % z = + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction positive_self elemental function self_sum_self ( self1 , self2 ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = self1 % x + self2 % x summ % y = self1 % y + self2 % y summ % z = self1 % z + self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_self elemental function ScalR16P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (real R16P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR16P_sum_self elemental function self_sum_ScalR16P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (real R16P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalR16P elemental function ScalR8P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (real R8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR8P_sum_self elemental function self_sum_ScalR8P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (real R8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalR8P elemental function ScalR4P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (real R4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR4P_sum_self elemental function self_sum_ScalR4P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (real R4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalR4P elemental function ScalI8P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (integer I8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI8P_sum_self elemental function self_sum_ScalI8P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (integer I8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalI8P elemental function ScalI4P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (integer I4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI4P_sum_self elemental function self_sum_ScalI4P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (integer I4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalI4P elemental function ScalI2P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (integer I2P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI2P_sum_self elemental function self_sum_ScalI2P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (integer I2P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalI2P elemental function ScalI1P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (integer I1P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI1P_sum_self elemental function self_sum_ScalI1P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (integer I1P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalI1P ! Operator (-) elemental function negative_self ( self ) result ( neg ) !--------------------------------------------------------------------------------------------------------------------------------- !< Applay unary - to a self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self type ( Vector ) :: neg !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- neg % x = - self % x neg % y = - self % y neg % z = - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction negative_self elemental function self_sub_self ( self1 , self2 ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self1 % x - self2 % x sub % y = self1 % y - self2 % y sub % z = self1 % z - self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_self elemental function ScalR16P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (real R16P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR16P_sub_self elemental function self_sub_ScalR16P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (real R16P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalR16P elemental function ScalR8P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (real R8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR8P_sub_self elemental function self_sub_ScalR8P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (real R8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalR8P elemental function ScalR4P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (real R4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR4P_sub_self elemental function self_sub_ScalR4P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (real R4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalR4P elemental function ScalI8P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (integer I8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI8P_sub_self elemental function self_sub_ScalI8P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (integer I8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalI8P elemental function ScalI4P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (integer I4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI4P_sub_self elemental function self_sub_ScalI4P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (integer I4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalI4P elemental function ScalI2P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (integer I2P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI2P_sub_self elemental function self_sub_ScalI2P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (integer I2P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalI2P elemental function ScalI1P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (integer I1P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI1P_sub_self elemental function self_sub_ScalI1P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (integer I1P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalI1P ! Conditional operators ! Oprator /= elemental function self_not_eq_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is /= with respect the normL2 of self2 or if the directions of self1 !< and self2 are different, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 !< First selftor. type ( Vector ), intent ( IN ) :: self2 !< Second selftor. logical :: compare !< The result of the comparison. type ( Vector ) :: n1 !< Normalizations of self1. type ( Vector ) :: n2 !< Normalizations of self2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) /= normL2 ( self2 )) if (. not . compare ) then ! the normL2 are the same, checking the directions n1 = normalize ( self1 ) n2 = normalize ( self2 ) compare = (( n1 % x /= n2 % x ). OR .( n1 % y /= n2 % y ). OR .( n1 % z /= n2 % z )) endif return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_self elemental function R16P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_not_eq_self elemental function self_not_eq_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_R16P elemental function R8P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_not_eq_self elemental function self_not_eq_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_R8P elemental function R4P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_not_eq_self elemental function self_not_eq_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_R4P elemental function I8P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_not_eq_self elemental function self_not_eq_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_I8P elemental function I4P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_not_eq_self elemental function self_not_eq_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_I4P elemental function I2P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_not_eq_self elemental function self_not_eq_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_I2P elemental function I1P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_not_eq_self elemental function self_not_eq_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_I1P ! Oprator < elemental function self_low_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the normL2 of self2, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) < normL2 ( self2 )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_self elemental function R16P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_low_self elemental function self_low_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_R16P elemental function R8P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_low_self elemental function self_low_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_R8P elemental function R4P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_low_self elemental function self_low_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_R4P elemental function I8P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_low_self elemental function self_low_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_I8P elemental function I4P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_low_self elemental function self_low_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_I4P elemental function I2P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_low_self elemental function self_low_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_I2P elemental function I1P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_low_self elemental function self_low_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_I1P ! Oprator <= elemental function self_low_eq_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the normL2 of self2, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 ! First selftor. type ( Vector ), intent ( IN ) :: self2 ! Second selftor. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) <= normL2 ( self2 )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_self elemental function R16P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_low_eq_self elemental function self_low_eq_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R16P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_R16P elemental function R8P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_low_eq_self elemental function self_low_eq_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_R8P elemental function R4P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_low_eq_self elemental function self_low_eq_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_R4P elemental function I8P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_low_eq_self elemental function self_low_eq_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_I8P elemental function I4P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_low_eq_self elemental function self_low_eq_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_I4P elemental function I2P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_low_eq_self elemental function self_low_eq_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I2P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_I2P elemental function I1P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_low_eq_self elemental function self_low_eq_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I1P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_I1P ! Oprator == elemental function self_eq_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !> Return .true. if the normL2 of the self1 is = with respect the normL2 of self2 and the directions of !> self1 and self2 are the same, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 ! First selftor. type ( Vector ), intent ( IN ) :: self2 ! Second selftor. logical :: compare ! The result of the comparison. type ( Vector ) :: n1 ! Normalizations of self1. type ( Vector ) :: n2 ! Normalizations of self2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) == normL2 ( self2 )) if ( compare ) then ! the normL2 are the same, checking the directions n1 = normalize ( self1 ) n2 = normalize ( self2 ) compare = (( n1 % x == n2 % x ). AND .( n1 % y == n2 % y ). AND .( n1 % z == n2 % z )) endif return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_self elemental function R16P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_eq_self elemental function self_eq_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R16P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_R16P elemental function R8P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_eq_self elemental function self_eq_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_R8P elemental function R4P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_eq_self elemental function self_eq_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_R4P elemental function I8P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_eq_self elemental function self_eq_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_I8P elemental function I4P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< @brief Procedure returns .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_eq_self elemental function self_eq_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_I4P elemental function I2P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_eq_self elemental function self_eq_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I2P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_I2P elemental function I1P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_eq_self elemental function self_eq_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I1P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_I1P ! Oprator >= elemental function self_great_eq_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the normL2 of self2, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 ! First selftor. type ( Vector ), intent ( IN ) :: self2 ! Second selftor. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) >= normL2 ( self2 )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_self elemental function R16P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_great_eq_self elemental function self_great_eq_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R16P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_R16P elemental function R8P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_great_eq_self elemental function self_great_eq_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_R8P elemental function R4P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_great_eq_self elemental function self_great_eq_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_R4P elemental function I8P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_great_eq_self elemental function self_great_eq_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_I8P elemental function I4P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_great_eq_self elemental function self_great_eq_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_I4P elemental function I2P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_great_eq_self elemental function self_great_eq_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I2P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_I2P elemental function I1P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_great_eq_self elemental function self_great_eq_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I1P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_I1P ! Oprator > elemental function self_great_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the normL2 of self2, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 ! First selftor. type ( Vector ), intent ( IN ) :: self2 ! Second selftor. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) > normL2 ( self2 )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_self elemental function R16P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_great_self elemental function self_great_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R16P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_R16P elemental function R8P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_great_self elemental function self_great_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_R8P elemental function R4P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_great_self elemental function self_great_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_R4P elemental function I8P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_great_self elemental function self_great_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_I8P elemental function I4P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_great_self elemental function self_great_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_I4P elemental function I2P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_great_self elemental function self_great_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I2P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_I2P elemental function I1P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_great_self elemental function self_great_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I1P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_I1P endmodule VecFor","tags":"","loc":"sourcefile/vecfor.f90.html","title":"vecfor.F90 â€“ VecFor"},{"text":"Kinds regression test for VecFor library. Source Code !< Kinds regression test for VecFor library. program kinds !< Kinds regression test for VecFor library. !< !< Try to test the algebra of mixed vector/numbers for all supported kinds. use vecfor use , intrinsic :: ISO_FORTRAN_ENV , only : stdout => OUTPUT_UNIT implicit none #ifdef r16p integer , parameter :: R16P = selected_real_kind ( 33 , 4931 ) !< 33  digits, range [10&#94;{-4931}, 10&#94;{+4931} - 1]; 128 bits. #else integer , parameter :: R16P = selected_real_kind ( 15 , 307 ) !< Defined as R8P; 64 bits. #endif integer , parameter :: R8P = selected_real_kind ( 15 , 307 ) !< 15  digits, range [10&#94;{-307} , 10&#94;{+307}  - 1]; 64 bits. integer , parameter :: R4P = selected_real_kind ( 6 , 37 ) !< 6   digits, range [10&#94;{-37}  , 10&#94;{+37}   - 1]; 32 bits. integer , parameter :: I8P = selected_int_kind ( 18 ) !< Range [-2&#94;{63},+2&#94;{63} - 1], 19 digits plus sign; 64 bits. integer , parameter :: I4P = selected_int_kind ( 9 ) !< Range [-2&#94;{31},+2&#94;{31} - 1], 10 digits plus sign; 32 bits. integer , parameter :: I2P = selected_int_kind ( 4 ) !< Range [-2&#94;{15},+2&#94;{15} - 1], 5  digits plus sign; 16 bits. integer , parameter :: I1P = selected_int_kind ( 2 ) !< Range [-2&#94;{7} ,+2&#94;{7}  - 1], 3  digits plus sign; 8  bits. type ( vector ) :: vector1 !< Vector dummy variable. type ( vector ) :: vector2 !< Vector dummy variable. call vector1 % set ( x =- 1._R8P , y =- 1._R8P , z =- 1._R8P ) call vector1 % init () print \"(A)\" , ' Assign vector1 = [1, 2, 3]' vector1 = 1 * ex + 2 * ey + 3 * ez print \"(A)\" , ' Assign vector2 = [1, 1, 1] testing assignments by scalar' vector2 = 1._R16P vector2 = 1._R8P vector2 = 1._R4P vector2 = 1_I8P vector2 = 1_I4P vector2 = 1_I2P vector2 = 1_I1P print \"(A)\" , ' Verify * operator, multiply by 1 defined in any supported number formats' vector1 = 1._R16P * vector1 vector1 = 1._R8P * vector1 vector1 = 1._R4P * vector1 vector1 = 1_I8P * vector1 vector1 = 1_I4P * vector1 vector1 = 1_I2P * vector1 vector1 = 1_I1P * vector1 vector1 = vector1 * 1._R16P vector1 = vector1 * 1._R8P vector1 = vector1 * 1._R4P vector1 = vector1 * 1_I8P vector1 = vector1 * 1_I4P vector1 = vector1 * 1_I2P vector1 = vector1 * 1_I1P call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify * operator between vectors, vector1 * vector2' vector1 = vector1 * vector2 call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify / operator, diveded by 1 defined in any supported number formats' vector1 = vector1 / 1._R16P vector1 = vector1 / 1._R8P vector1 = vector1 / 1._R4P vector1 = vector1 / 1_I8P vector1 = vector1 / 1_I4P vector1 = vector1 / 1_I2P vector1 = vector1 / 1_I1P call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify / operator between vectors, vector1 / vector2' vector1 = vector1 / vector2 call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify + operator, add 1 (14 times) defined in any supported number formats' vector1 = 1._R16P + vector1 vector1 = 1._R8P + vector1 vector1 = 1._R4P + vector1 vector1 = 1_I8P + vector1 vector1 = 1_I4P + vector1 vector1 = 1_I2P + vector1 vector1 = 1_I1P + vector1 vector1 = + vector1 vector1 = vector1 + 1._R16P vector1 = vector1 + 1._R8P vector1 = vector1 + 1._R4P vector1 = vector1 + 1_I8P vector1 = vector1 + 1_I4P vector1 = vector1 + 1_I2P vector1 = vector1 + 1_I1P call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify + operator between vectors, vector1 + vector2' vector1 = vector1 + vector2 call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify - operator, subtract 1 (14 times) defined in any supported number formats' vector1 = 1._R16P - vector1 vector1 =- 1._R8P - vector1 vector1 = 1._R4P - vector1 vector1 =- 1_I8P - vector1 vector1 = 1_I4P - vector1 vector1 =- 1_I2P - vector1 vector1 = 1_I1P - vector1 vector1 = - vector1 vector1 = vector1 - 1._R16P vector1 = vector1 - 1._R8P vector1 = vector1 - 1._R4P vector1 = vector1 - 1_I8P vector1 = vector1 - 1_I4P vector1 = vector1 - 1_I2P vector1 = vector1 - 1_I1P call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify - operator between vectors, vector1 - vector2' vector1 = vector1 - vector2 call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify save/load methods' open ( unit = 2 , form = 'UNFORMATTED' , status = 'SCRATCH' ) call vector1 % save ( unit = 2 ) call vector1 % load ( unit = 2 ) close ( unit = 2 ) call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify < operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1<1._R16P => ' , ( vector1 < 1._R16P ) print \"(A,L1)\" , 'vector1<1._R8P  => ' , ( vector1 < 1._R8P ) print \"(A,L1)\" , 'vector1<1._R4P  => ' , ( vector1 < 1._R4P ) print \"(A,L1)\" , 'vector1<1_I8P   => ' , ( vector1 < 1_I8P ) print \"(A,L1)\" , 'vector1<1_I4P   => ' , ( vector1 < 1_I4P ) print \"(A,L1)\" , 'vector1<1_I2P   => ' , ( vector1 < 1_I2P ) print \"(A,L1)\" , 'vector1<1_I1P   => ' , ( vector1 < 1_I1P ) print \"(A,L1)\" , '1._R16P<vector1 => ' , ( 1._R16P < vector1 ) print \"(A,L1)\" , '1._R8P <vector1 => ' , ( 1._R8P < vector1 ) print \"(A,L1)\" , '1._R4P <vector1 => ' , ( 1._R4P < vector1 ) print \"(A,L1)\" , '1_I8P  <vector1 => ' , ( 1_I8P < vector1 ) print \"(A,L1)\" , '1_I4P  <vector1 => ' , ( 1_I4P < vector1 ) print \"(A,L1)\" , '1_I2P  <vector1 => ' , ( 1_I2P < vector1 ) print \"(A,L1)\" , '1_I1P  <vector1 => ' , ( 1_I1P < vector1 ) print \"(A,L1)\" , 'vector1<vector2 => ' , ( vector1 < vector2 ) print \"(A)\" , ' Verify <= operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1<=1._R16P => ' , ( vector1 <= 1._R16P ) print \"(A,L1)\" , 'vector1<=1._R8P  => ' , ( vector1 <= 1._R8P ) print \"(A,L1)\" , 'vector1<=1._R4P  => ' , ( vector1 <= 1._R4P ) print \"(A,L1)\" , 'vector1<=1_I8P   => ' , ( vector1 <= 1_I8P ) print \"(A,L1)\" , 'vector1<=1_I4P   => ' , ( vector1 <= 1_I4P ) print \"(A,L1)\" , 'vector1<=1_I2P   => ' , ( vector1 <= 1_I2P ) print \"(A,L1)\" , 'vector1<=1_I1P   => ' , ( vector1 <= 1_I1P ) print \"(A,L1)\" , '1._R16P<=vector1 => ' , ( 1._R16P <= vector1 ) print \"(A,L1)\" , '1._R8P <=vector1 => ' , ( 1._R8P <= vector1 ) print \"(A,L1)\" , '1._R4P <=vector1 => ' , ( 1._R4P <= vector1 ) print \"(A,L1)\" , '1_I8P  <=vector1 => ' , ( 1_I8P <= vector1 ) print \"(A,L1)\" , '1_I4P  <=vector1 => ' , ( 1_I4P <= vector1 ) print \"(A,L1)\" , '1_I2P  <=vector1 => ' , ( 1_I2P <= vector1 ) print \"(A,L1)\" , '1_I1P  <=vector1 => ' , ( 1_I1P <= vector1 ) print \"(A,L1)\" , 'vector1<=vector2 => ' , ( vector1 <= vector2 ) print \"(A)\" , ' Verify == operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1==1._R16P => ' , ( vector1 == 1._R16P ) print \"(A,L1)\" , 'vector1==1._R8P  => ' , ( vector1 == 1._R8P ) print \"(A,L1)\" , 'vector1==1._R4P  => ' , ( vector1 == 1._R4P ) print \"(A,L1)\" , 'vector1==1_I8P   => ' , ( vector1 == 1_I8P ) print \"(A,L1)\" , 'vector1==1_I4P   => ' , ( vector1 == 1_I4P ) print \"(A,L1)\" , 'vector1==1_I2P   => ' , ( vector1 == 1_I2P ) print \"(A,L1)\" , 'vector1==1_I1P   => ' , ( vector1 == 1_I1P ) print \"(A,L1)\" , '1._R16P==vector1 => ' , ( 1._R16P == vector1 ) print \"(A,L1)\" , '1._R8P ==vector1 => ' , ( 1._R8P == vector1 ) print \"(A,L1)\" , '1._R4P ==vector1 => ' , ( 1._R4P == vector1 ) print \"(A,L1)\" , '1_I8P  ==vector1 => ' , ( 1_I8P == vector1 ) print \"(A,L1)\" , '1_I4P  ==vector1 => ' , ( 1_I4P == vector1 ) print \"(A,L1)\" , '1_I2P  ==vector1 => ' , ( 1_I2P == vector1 ) print \"(A,L1)\" , '1_I1P  ==vector1 => ' , ( 1_I1P == vector1 ) print \"(A,L1)\" , 'vector1==vector2 => ' , ( vector1 == vector2 ) print \"(A)\" , ' Verify /= operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1/=1._R16P => ' , ( vector1 /= 1._R16P ) print \"(A,L1)\" , 'vector1/=1._R8P  => ' , ( vector1 /= 1._R8P ) print \"(A,L1)\" , 'vector1/=1._R4P  => ' , ( vector1 /= 1._R4P ) print \"(A,L1)\" , 'vector1/=1_I8P   => ' , ( vector1 /= 1_I8P ) print \"(A,L1)\" , 'vector1/=1_I4P   => ' , ( vector1 /= 1_I4P ) print \"(A,L1)\" , 'vector1/=1_I2P   => ' , ( vector1 /= 1_I2P ) print \"(A,L1)\" , 'vector1/=1_I1P   => ' , ( vector1 /= 1_I1P ) print \"(A,L1)\" , '1._R16P/=vector1 => ' , ( 1._R16P /= vector1 ) print \"(A,L1)\" , '1._R8P /=vector1 => ' , ( 1._R8P /= vector1 ) print \"(A,L1)\" , '1._R4P /=vector1 => ' , ( 1._R4P /= vector1 ) print \"(A,L1)\" , '1_I8P  /=vector1 => ' , ( 1_I8P /= vector1 ) print \"(A,L1)\" , '1_I4P  /=vector1 => ' , ( 1_I4P /= vector1 ) print \"(A,L1)\" , '1_I2P  /=vector1 => ' , ( 1_I2P /= vector1 ) print \"(A,L1)\" , '1_I1P  /=vector1 => ' , ( 1_I1P /= vector1 ) print \"(A,L1)\" , 'vector1/=vector2 => ' , ( vector1 /= vector2 ) print \"(A)\" , ' Verify >= operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1>=1._R16P => ' , ( vector1 >= 1._R16P ) print \"(A,L1)\" , 'vector1>=1._R8P  => ' , ( vector1 >= 1._R8P ) print \"(A,L1)\" , 'vector1>=1._R4P  => ' , ( vector1 >= 1._R4P ) print \"(A,L1)\" , 'vector1>=1_I8P   => ' , ( vector1 >= 1_I8P ) print \"(A,L1)\" , 'vector1>=1_I4P   => ' , ( vector1 >= 1_I4P ) print \"(A,L1)\" , 'vector1>=1_I2P   => ' , ( vector1 >= 1_I2P ) print \"(A,L1)\" , 'vector1>=1_I1P   => ' , ( vector1 >= 1_I1P ) print \"(A,L1)\" , '1._R16P>=vector1 => ' , ( 1._R16P >= vector1 ) print \"(A,L1)\" , '1._R8P >=vector1 => ' , ( 1._R8P >= vector1 ) print \"(A,L1)\" , '1._R4P >=vector1 => ' , ( 1._R4P >= vector1 ) print \"(A,L1)\" , '1_I8P  >=vector1 => ' , ( 1_I8P >= vector1 ) print \"(A,L1)\" , '1_I4P  >=vector1 => ' , ( 1_I4P >= vector1 ) print \"(A,L1)\" , '1_I2P  >=vector1 => ' , ( 1_I2P >= vector1 ) print \"(A,L1)\" , '1_I1P  >=vector1 => ' , ( 1_I1P >= vector1 ) print \"(A,L1)\" , 'vector1>=vector2 => ' , ( vector1 >= vector2 ) print \"(A)\" , ' Verify > operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1>1._R16P => ' , ( vector1 > 1._R16P ) print \"(A,L1)\" , 'vector1>1._R8P  => ' , ( vector1 > 1._R8P ) print \"(A,L1)\" , 'vector1>1._R4P  => ' , ( vector1 > 1._R4P ) print \"(A,L1)\" , 'vector1>1_I8P   => ' , ( vector1 > 1_I8P ) print \"(A,L1)\" , 'vector1>1_I4P   => ' , ( vector1 > 1_I4P ) print \"(A,L1)\" , 'vector1>1_I2P   => ' , ( vector1 > 1_I2P ) print \"(A,L1)\" , 'vector1>1_I1P   => ' , ( vector1 > 1_I1P ) print \"(A,L1)\" , '1._R16P>vector1 => ' , ( 1._R16P > vector1 ) print \"(A,L1)\" , '1._R8P >vector1 => ' , ( 1._R8P > vector1 ) print \"(A,L1)\" , '1._R4P >vector1 => ' , ( 1._R4P > vector1 ) print \"(A,L1)\" , '1_I8P  >vector1 => ' , ( 1_I8P > vector1 ) print \"(A,L1)\" , '1_I4P  >vector1 => ' , ( 1_I4P > vector1 ) print \"(A,L1)\" , '1_I2P  >vector1 => ' , ( 1_I2P > vector1 ) print \"(A,L1)\" , '1_I1P  >vector1 => ' , ( 1_I1P > vector1 ) print \"(A,L1)\" , 'vector1>vector2 => ' , ( vector1 > vector2 ) stop endprogram kinds","tags":"","loc":"sourcefile/kinds.f90.html","title":"kinds.f90 â€“ VecFor"},{"text":"Simple regression test for VecFor library. Source Code !< Simple regression test for VecFor library. program simple !< Simple regression test for VecFor library. use vecfor use , intrinsic :: ISO_FORTRAN_ENV , only : stdout => OUTPUT_UNIT implicit none type ( vector ) :: vector1 !< Vector dummy variable. type ( vector ) :: vector2 !< Vector dummy variable. type ( vector ) :: vector3 !< Vector dummy variable. type ( vector ) :: vector4 !< Vector dummy variable. type ( vector ) :: vector5 !< Vector dummy variable. print \"(A)\" , ' Assign vector1 = [1, 2, 3]' vector1 = 1 * ex + 2 * ey + 3 * ez print \"(A)\" , ' Assign vector2 = [-1, -2, -3]' vector2 = - 1 * ex - 2 * ey - 3 * ez print \"(A)\" , ' Verify auxiliary methods' print \"(A,F5.1)\" , ' vector1%sq_norm() = ' , vector1 % sq_norm () print \"(A,F5.1)\" , ' sq_norm(vector1) = ' , sq_norm ( vector1 ) print \"(A,F5.1)\" , ' vector1%normL2() = ' , vector1 % normL2 () print \"(A,F5.1)\" , ' normL2(vector1) = ' , normL2 ( vector1 ) print \"(A)\" , ' normalized(vector1):' vector3 = vector1 % normalized () call vector3 % print ( unit = stdout ) print \"(A)\" , 'call vector1%normalize():' vector3 = vector1 call vector3 % normalize () call vector3 % print ( unit = stdout ) print \"(A)\" , ' Verify dot product' print \"(A,F5.1)\" , ' vector1.dot.ex = ' , vector1 . dot . ex print \"(A,F5.1)\" , ' vector1.dot.ey = ' , vector1 . dot . ey print \"(A,F5.1)\" , ' vector1.dot.ez = ' , vector1 . dot . ez print \"(A,F5.1)\" , ' vector1.dot.vector2 = ' , vector1 . dot . vector2 print \"(A)\" , ' Verify cross product' print \"(A)\" , ' vector1.cross.vector2:' vector3 = vector1 . cross . vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' Verify special operators' print \"(A)\" , ' vector1.ortho.vector2:' vector3 = vector1 . ortho . vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' vector1.paral.vector2:' vector3 = vector1 . paral . vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' Verify * / + - operators' print \"(A)\" , ' vector1 * vector2:' vector3 = vector1 * vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' vector1 / vector2:' vector3 = vector1 / vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' vector1 + vector2:' vector3 = vector1 + vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' vector1 - vector2:' vector3 = vector1 - vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' Assign vector1 = [-1, 1, 0]' vector1 = - ex + ey print \"(A)\" , ' Assign vector2 = [0, 1, 0]' vector2 = ey print \"(A)\" , ' Assign vector3 = [0, -1, 0]' vector3 = - ey print \"(A)\" , ' Assign vector4 = [-1, -1, 0]' vector4 = - ex - ey print \"(A)\" , ' Face 1-2-3 normal (stand alone procedure):' vector5 = face_normal3 ( pt1 = vector1 , pt2 = vector2 , pt3 = vector3 ) call vector5 % print ( unit = stdout ) print \"(A)\" , ' Face 1-2-3 normal (type bound method):' call vector5 % face_normal3 ( pt1 = vector1 , pt2 = vector2 , pt3 = vector3 ) call vector5 % print ( unit = stdout ) print \"(A)\" , ' Face 1-2-3-4 normal (stand alone procedure): ' vector5 = face_normal4 ( pt1 = vector1 , pt2 = vector2 , pt3 = vector3 , pt4 = vector4 ) call vector5 % print ( unit = stdout ) print \"(A)\" , ' Face 1-2-3-4 normal (type bound method):' call vector5 % face_normal4 ( pt1 = vector1 , pt2 = vector2 , pt3 = vector3 , pt4 = vector4 ) call vector5 % print ( unit = stdout ) print \"(A,I3)\" , ' IO length of vector1 = ' , vector1 % iolen () stop endprogram simple","tags":"","loc":"sourcefile/simple.f90.html","title":"simple.f90 â€“ VecFor"},{"text":"type, public :: Vector Vector class. Inherited By type~~vector~~InheritedByGraph type~vector Vector type~vector_ptr Vector_Ptr type~vector->type~vector_ptr p Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Components Type Visibility Attributes Name Initial real(kind=R8P), public :: x = 0._R8P Cartesian component in x direction. real(kind=R8P), public :: y = 0._R8P Cartesian component in y direction. real(kind=R8P), public :: z = 0._R8P Cartesian component in z direction. Type-Bound Procedures procedure, public :: init => init_vector_self private elementalsubroutine init_vector_self (vec) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector. Description Initialize components of Vector variable. procedure, public :: set => set_vector_self private elementalsubroutine set_vector_self (vec, x, y, z) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector. real(kind=R8P), intent(in), optional :: x Cartesian component in x direction. real(kind=R8P), intent(in), optional :: y Cartesian component in y direction. real(kind=R8P), intent(in), optional :: z Cartesian component in z direction. Description Set components of Vector variable. procedure, public :: iolen => iolen_vector_self private function iolen_vector_self (vec) result(iolen) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value integer(kind=I4P) IO length. Description Compute IO length. procedure, public :: load => load_vector_self private subroutine load_vector_self (vec, pos, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector data. integer(kind=I8P), intent(in), optional :: pos Position specifier. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Load Vector data. procedure, public :: save => save_vector_self private subroutine save_vector_self (vec, pos, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector data. integer(kind=I8P), intent(in), optional :: pos Position specifier. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Save Vector data. procedure, public :: print => print_vector_self private subroutine print_vector_self (vec, pref, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. character(len=*), intent(in), optional :: pref Prefixing string for outputs. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Print in a pretty ascii format the components of type Vector. procedure, public :: sq_norm => sq_norm_self private elementalfunction sq_norm_self (vec) result(sq) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Square of the Norm. Description Compute the square of the norm of a vector. procedure, public :: normL2 => normL2_self private elementalfunction normL2_self (vec) result(norm) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Norm L2. Description Compute the norm L2 of a vector. procedure, public :: normalize => normalize_self private elementalsubroutine normalize_self (vec) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector to be normalized. Description Normalize a vector. procedure, public :: normalized => normalized_self private elementalfunction normalized_self (vec) result(norm) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector to be normalized. Return Value type( Vector ) Normalized copy. Description Get a normalized copy of a vector. procedure, public :: face_normal4 => face_normal4_self private elementalsubroutine face_normal4_self (fnormal, norm, pt1, pt2, pt3, pt4) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: fnormal Face normal. character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. type( Vector ), intent(in) :: pt4 Fourth face point. Description Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. procedure, public :: face_normal3 => face_normal3_self private elementalsubroutine face_normal3_self (fnormal, norm, pt1, pt2, pt3) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: fnormal Face normal. character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. Description Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. generic, public :: operator(.cross.) => crossproduct pass(vec1) crossproduct () Arguments None generic, public :: operator(.dot.) => dotproduct pass(vec1) dotproduct () Arguments None generic, public :: operator(.paral.) => parallel pass(vec1) parallel () Arguments None generic, public :: operator(.ortho.) => orthogonal pass(vec1) orthogonal () Arguments None procedure, private, pass(vec1) :: crossproduct private elementalfunction crossproduct (vec1, vec2) result(cross) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Cross product vector. Description Compute the cross product of 2 vectors. procedure, private, pass(vec1) :: dotproduct private elementalfunction dotproduct (vec1, vec2) result(dot) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value real(kind=R8P) Dot product. Description Compute the scalar (dot) product of 2 vectors. procedure, private, pass(vec1) :: parallel private elementalfunction parallel (vec1, vec2) result(paral) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 Compute the component of vec1 parallel to vec2.\n First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Component of of vec1 parallel to vec2. procedure, private, pass(vec1) :: orthogonal private elementalfunction orthogonal (vec1, vec2) result(ortho) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Component of of vec1 orthogonal to vec2. Description Compute the component of vec1 orthogonal to vec2. generic, public :: assignment(=) => assign_self , assign_ScalR8P , assign_ScalR4P , assign_ScalI8P , assign_ScalI4P , assign_ScalI2P , assign_ScalI1P pass(self1) assign_self () Arguments None pass(self ) assign_ScalR8P () Arguments None pass(self ) assign_ScalR4P () Arguments None pass(self ) assign_ScalI8P () Arguments None pass(self ) assign_ScalI4P () Arguments None pass(self ) assign_ScalI2P () Arguments None pass(self ) assign_ScalI1P () Arguments None procedure, private, pass(self1) :: assign_self private puresubroutine assign_self (self1, self2) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self1 class( Vector ), intent(in) :: self2 Description Assignment between two selfs. procedure, private, pass(self ) :: assign_ScalR8P private elementalsubroutine assign_ScalR8P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self real(kind=R8P), intent(in) :: scal Description Assignment between a scalar (real R8P) and self. procedure, private, pass(self ) :: assign_ScalR4P private elementalsubroutine assign_ScalR4P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self real(kind=R4P), intent(in) :: scal Description Assignment between a scalar (real R4P) and self. procedure, private, pass(self ) :: assign_ScalI8P private elementalsubroutine assign_ScalI8P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I8P), intent(in) :: scal Description Assignment between a scalar (integer I8P) and self. procedure, private, pass(self ) :: assign_ScalI4P private elementalsubroutine assign_ScalI4P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I4P), intent(in) :: scal Description Assignment between a scalar (integer I4P) and self. procedure, private, pass(self ) :: assign_ScalI2P private elementalsubroutine assign_ScalI2P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self Assignment between a scalar (integer I2P) and self. integer(kind=I2P), intent(in) :: scal procedure, private, pass(self ) :: assign_ScalI1P private elementalsubroutine assign_ScalI1P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I1P), intent(in) :: scal Description Assignment between a scalar (integer I1P) and self. generic, public :: operator(*) => self_mul_self , ScalR8P_mul_self , self_mul_ScalR8P , ScalR4P_mul_self , self_mul_ScalR4P , ScalI8P_mul_self , self_mul_ScalI8P , ScalI4P_mul_self , self_mul_ScalI4P , ScalI2P_mul_self , self_mul_ScalI2P , ScalI1P_mul_self , self_mul_ScalI1P pass(self1) self_mul_self () Arguments None pass(self ) ScalR8P_mul_self () Arguments None pass(self ) self_mul_ScalR8P () Arguments None pass(self ) ScalR4P_mul_self () Arguments None pass(self ) self_mul_ScalR4P () Arguments None pass(self ) ScalI8P_mul_self () Arguments None pass(self ) self_mul_ScalI8P () Arguments None pass(self ) ScalI4P_mul_self () Arguments None pass(self ) self_mul_ScalI4P () Arguments None pass(self ) ScalI2P_mul_self () Arguments None pass(self ) self_mul_ScalI2P () Arguments None pass(self ) ScalI1P_mul_self () Arguments None pass(self ) self_mul_ScalI1P () Arguments None procedure, private, pass(self1) :: self_mul_self private elementalfunction self_mul_self (self1, self2) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Multiply (by components) two selfs. procedure, private, pass(self ) :: ScalR8P_mul_self private elementalfunction ScalR8P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (real R8P) for self. procedure, private, pass(self ) :: ScalR4P_mul_self private elementalfunction ScalR4P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (real R4P) for self. procedure, private, pass(self ) :: ScalI8P_mul_self private elementalfunction ScalI8P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I8P) for self. procedure, private, pass(self ) :: ScalI4P_mul_self private elementalfunction ScalI4P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I4P) for self. procedure, private, pass(self ) :: ScalI2P_mul_self private elementalfunction ScalI2P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I2P) for self. procedure, private, pass(self ) :: ScalI1P_mul_self private elementalfunction ScalI1P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I1P) for self. procedure, private, pass(self ) :: self_mul_ScalR8P private elementalfunction self_mul_ScalR8P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (real R8P). procedure, private, pass(self ) :: self_mul_ScalR4P private elementalfunction self_mul_ScalR4P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (real R4P). procedure, private, pass(self ) :: self_mul_ScalI8P private elementalfunction self_mul_ScalI8P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I8P). procedure, private, pass(self ) :: self_mul_ScalI4P private elementalfunction self_mul_ScalI4P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I4P). procedure, private, pass(self ) :: self_mul_ScalI2P private elementalfunction self_mul_ScalI2P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I2P). procedure, private, pass(self ) :: self_mul_ScalI1P private elementalfunction self_mul_ScalI1P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I1P). generic, public :: operator(/) => self_div_self , self_div_ScalR8P , self_div_ScalR4P , self_div_ScalI8P , self_div_ScalI4P , self_div_ScalI2P , self_div_ScalI1P pass(self1) self_div_self () Arguments None pass(self ) self_div_ScalR8P () Arguments None pass(self ) self_div_ScalR4P () Arguments None pass(self ) self_div_ScalI8P () Arguments None pass(self ) self_div_ScalI4P () Arguments None pass(self ) self_div_ScalI2P () Arguments None pass(self ) self_div_ScalI1P () Arguments None procedure, private, pass(self1) :: self_div_self private elementalfunction self_div_self (self1, self2) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Divide self for self. procedure, private, pass(self ) :: self_div_ScalR8P private elementalfunction self_div_ScalR8P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (real R8P). procedure, private, pass(self ) :: self_div_ScalR4P private elementalfunction self_div_ScalR4P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (real R4P). procedure, private, pass(self ) :: self_div_ScalI8P private elementalfunction self_div_ScalI8P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I8P). procedure, private, pass(self ) :: self_div_ScalI4P private elementalfunction self_div_ScalI4P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I4P). procedure, private, pass(self ) :: self_div_ScalI2P private elementalfunction self_div_ScalI2P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I2P). procedure, private, pass(self ) :: self_div_ScalI1P private elementalfunction self_div_ScalI1P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I1P). generic, public :: operator(+) => positive_self , self_sum_self , ScalR8P_sum_self , self_sum_ScalR8P , ScalR4P_sum_self , self_sum_ScalR4P , ScalI8P_sum_self , self_sum_ScalI8P , ScalI4P_sum_self , self_sum_ScalI4P , ScalI2P_sum_self , self_sum_ScalI2P , ScalI1P_sum_self , self_sum_ScalI1P pass(self ) positive_self () Arguments None pass(self1) self_sum_self () Arguments None pass(self ) ScalR8P_sum_self () Arguments None pass(self ) self_sum_ScalR8P () Arguments None pass(self ) ScalR4P_sum_self () Arguments None pass(self ) self_sum_ScalR4P () Arguments None pass(self ) ScalI8P_sum_self () Arguments None pass(self ) self_sum_ScalI8P () Arguments None pass(self ) ScalI4P_sum_self () Arguments None pass(self ) self_sum_ScalI4P () Arguments None pass(self ) ScalI2P_sum_self () Arguments None pass(self ) self_sum_ScalI2P () Arguments None pass(self ) ScalI1P_sum_self () Arguments None pass(self ) self_sum_ScalI1P () Arguments None procedure, private, pass(self ) :: positive_self private elementalfunction positive_self (self) result(pos) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self Return Value type( Vector ) Description Applay unary + to a self. procedure, private, pass(self1) :: self_sum_self private elementalfunction self_sum_self (self1, self2) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Sum self and self. procedure, private, pass(self ) :: ScalR8P_sum_self private elementalfunction ScalR8P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (real R8P) and self. procedure, private, pass(self ) :: ScalR4P_sum_self private elementalfunction ScalR4P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (real R4P) and self. procedure, private, pass(self ) :: ScalI8P_sum_self private elementalfunction ScalI8P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I8P) and self. procedure, private, pass(self ) :: ScalI4P_sum_self private elementalfunction ScalI4P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I4P) and self. procedure, private, pass(self ) :: ScalI2P_sum_self private elementalfunction ScalI2P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I2P) and self. procedure, private, pass(self ) :: ScalI1P_sum_self private elementalfunction ScalI1P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I1P) and self. procedure, private, pass(self ) :: self_sum_ScalR8P private elementalfunction self_sum_ScalR8P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (real R8P). procedure, private, pass(self ) :: self_sum_ScalR4P private elementalfunction self_sum_ScalR4P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (real R4P). procedure, private, pass(self ) :: self_sum_ScalI8P private elementalfunction self_sum_ScalI8P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I8P). procedure, private, pass(self ) :: self_sum_ScalI4P private elementalfunction self_sum_ScalI4P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I4P). procedure, private, pass(self ) :: self_sum_ScalI2P private elementalfunction self_sum_ScalI2P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I2P). procedure, private, pass(self ) :: self_sum_ScalI1P private elementalfunction self_sum_ScalI1P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I1P). generic, public :: operator(-) => negative_self , self_sub_self , ScalR8P_sub_self , self_sub_ScalR8P , ScalR4P_sub_self , self_sub_ScalR4P , ScalI8P_sub_self , self_sub_ScalI8P , ScalI4P_sub_self , self_sub_ScalI4P , ScalI2P_sub_self , self_sub_ScalI2P , ScalI1P_sub_self , self_sub_ScalI1P pass(self ) negative_self () Arguments None pass(self1) self_sub_self () Arguments None pass(self ) ScalR8P_sub_self () Arguments None pass(self ) self_sub_ScalR8P () Arguments None pass(self ) ScalR4P_sub_self () Arguments None pass(self ) self_sub_ScalR4P () Arguments None pass(self ) ScalI8P_sub_self () Arguments None pass(self ) self_sub_ScalI8P () Arguments None pass(self ) ScalI4P_sub_self () Arguments None pass(self ) self_sub_ScalI4P () Arguments None pass(self ) ScalI2P_sub_self () Arguments None pass(self ) self_sub_ScalI2P () Arguments None pass(self ) ScalI1P_sub_self () Arguments None pass(self ) self_sub_ScalI1P () Arguments None procedure, private, pass(self ) :: negative_self private elementalfunction negative_self (self) result(neg) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self Return Value type( Vector ) Description Applay unary - to a self. procedure, private, pass(self1) :: self_sub_self private elementalfunction self_sub_self (self1, self2) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Subtract self and self. procedure, private, pass(self ) :: ScalR8P_sub_self private elementalfunction ScalR8P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (real R8P) and self. procedure, private, pass(self ) :: ScalR4P_sub_self private elementalfunction ScalR4P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (real R4P) and self. procedure, private, pass(self ) :: ScalI8P_sub_self private elementalfunction ScalI8P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I8P) and self. procedure, private, pass(self ) :: ScalI4P_sub_self private elementalfunction ScalI4P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I4P) and self. procedure, private, pass(self ) :: ScalI2P_sub_self private elementalfunction ScalI2P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I2P) and self. procedure, private, pass(self ) :: ScalI1P_sub_self private elementalfunction ScalI1P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I1P) and self. procedure, private, pass(self ) :: self_sub_ScalR8P private elementalfunction self_sub_ScalR8P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (real R8P). procedure, private, pass(self ) :: self_sub_ScalR4P private elementalfunction self_sub_ScalR4P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (real R4P). procedure, private, pass(self ) :: self_sub_ScalI8P private elementalfunction self_sub_ScalI8P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I8P). procedure, private, pass(self ) :: self_sub_ScalI4P private elementalfunction self_sub_ScalI4P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I4P). procedure, private, pass(self ) :: self_sub_ScalI2P private elementalfunction self_sub_ScalI2P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I2P). procedure, private, pass(self ) :: self_sub_ScalI1P private elementalfunction self_sub_ScalI1P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I1P). generic, public :: operator(/=) => self_not_eq_self , R8P_not_eq_self , self_not_eq_R8P , R4P_not_eq_self , self_not_eq_R4P , I8P_not_eq_self , self_not_eq_I8P , I4P_not_eq_self , self_not_eq_I4P , I2P_not_eq_self , self_not_eq_I2P , I1P_not_eq_self , self_not_eq_I1P pass(self1) self_not_eq_self () Arguments None pass(self ) R8P_not_eq_self () Arguments None pass(self ) self_not_eq_R8P () Arguments None pass(self ) R4P_not_eq_self () Arguments None pass(self ) self_not_eq_R4P () Arguments None pass(self ) I8P_not_eq_self () Arguments None pass(self ) self_not_eq_I8P () Arguments None pass(self ) I4P_not_eq_self () Arguments None pass(self ) self_not_eq_I4P () Arguments None pass(self ) I2P_not_eq_self () Arguments None pass(self ) self_not_eq_I2P () Arguments None pass(self ) I1P_not_eq_self () Arguments None pass(self ) self_not_eq_I1P () Arguments None generic, public :: operator(<) => self_low_self , R8P_low_self , self_low_R8P , R4P_low_self , self_low_R4P , I8P_low_self , self_low_I8P , I4P_low_self , self_low_I4P , I2P_low_self , self_low_I2P , I1P_low_self , self_low_I1P pass(self1) self_low_self () Arguments None pass(self ) R8P_low_self () Arguments None pass(self ) self_low_R8P () Arguments None pass(self ) R4P_low_self () Arguments None pass(self ) self_low_R4P () Arguments None pass(self ) I8P_low_self () Arguments None pass(self ) self_low_I8P () Arguments None pass(self ) I4P_low_self () Arguments None pass(self ) self_low_I4P () Arguments None pass(self ) I2P_low_self () Arguments None pass(self ) self_low_I2P () Arguments None pass(self ) I1P_low_self () Arguments None pass(self ) self_low_I1P () Arguments None generic, public :: operator(<=) => self_low_eq_self , R8P_low_eq_self , self_low_eq_R8P , R4P_low_eq_self , self_low_eq_R4P , I8P_low_eq_self , self_low_eq_I8P , I4P_low_eq_self , self_low_eq_I4P , I2P_low_eq_self , self_low_eq_I2P , I1P_low_eq_self , self_low_eq_I1P pass(self1) self_low_eq_self () Arguments None pass(self ) R8P_low_eq_self () Arguments None pass(self ) self_low_eq_R8P () Arguments None pass(self ) R4P_low_eq_self () Arguments None pass(self ) self_low_eq_R4P () Arguments None pass(self ) I8P_low_eq_self () Arguments None pass(self ) self_low_eq_I8P () Arguments None pass(self ) I4P_low_eq_self () Arguments None pass(self ) self_low_eq_I4P () Arguments None pass(self ) I2P_low_eq_self () Arguments None pass(self ) self_low_eq_I2P () Arguments None pass(self ) I1P_low_eq_self () Arguments None pass(self ) self_low_eq_I1P () Arguments None generic, public :: operator(==) => self_eq_self , R8P_eq_self , self_eq_R8P , R4P_eq_self , self_eq_R4P , I8P_eq_self , self_eq_I8P , I4P_eq_self , self_eq_I4P , I2P_eq_self , self_eq_I2P , I1P_eq_self , self_eq_I1P pass(self1) self_eq_self () Arguments None pass(self ) R8P_eq_self () Arguments None pass(self ) self_eq_R8P () Arguments None pass(self ) R4P_eq_self () Arguments None pass(self ) self_eq_R4P () Arguments None pass(self ) I8P_eq_self () Arguments None pass(self ) self_eq_I8P () Arguments None pass(self ) I4P_eq_self () Arguments None pass(self ) self_eq_I4P () Arguments None pass(self ) I2P_eq_self () Arguments None pass(self ) self_eq_I2P () Arguments None pass(self ) I1P_eq_self () Arguments None pass(self ) self_eq_I1P () Arguments None generic, public :: operator(>=) => self_great_eq_self , R8P_great_eq_self , self_great_eq_R8P , R4P_great_eq_self , self_great_eq_R4P , I8P_great_eq_self , self_great_eq_I8P , I4P_great_eq_self , self_great_eq_I4P , I2P_great_eq_self , self_great_eq_I2P , I1P_great_eq_self , self_great_eq_I1P pass(self1) self_great_eq_self () Arguments None pass(self ) R8P_great_eq_self () Arguments None pass(self ) self_great_eq_R8P () Arguments None pass(self ) R4P_great_eq_self () Arguments None pass(self ) self_great_eq_R4P () Arguments None pass(self ) I8P_great_eq_self () Arguments None pass(self ) self_great_eq_I8P () Arguments None pass(self ) I4P_great_eq_self () Arguments None pass(self ) self_great_eq_I4P () Arguments None pass(self ) I2P_great_eq_self () Arguments None pass(self ) self_great_eq_I2P () Arguments None pass(self ) I1P_great_eq_self () Arguments None pass(self ) self_great_eq_I1P () Arguments None generic, public :: operator(>) => self_great_self , R8P_great_self , self_great_R8P , R4P_great_self , self_great_R4P , I8P_great_self , self_great_I8P , I4P_great_self , self_great_I4P , I2P_great_self , self_great_I2P , I1P_great_self , self_great_I1P pass(self1) self_great_self () Arguments None pass(self ) R8P_great_self () Arguments None pass(self ) self_great_R8P () Arguments None pass(self ) R4P_great_self () Arguments None pass(self ) self_great_R4P () Arguments None pass(self ) I8P_great_self () Arguments None pass(self ) self_great_I8P () Arguments None pass(self ) I4P_great_self () Arguments None pass(self ) self_great_I4P () Arguments None pass(self ) I2P_great_self () Arguments None pass(self ) self_great_I2P () Arguments None pass(self ) I1P_great_self () Arguments None pass(self ) self_great_I1P () Arguments None procedure, private, pass(self1) :: self_not_eq_self private elementalfunction self_not_eq_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 First selftor. type( Vector ), intent(in) :: self2 Second selftor. Return Value logical The result of the comparison. Description Return .true. if the normL2 of the self1 is /= with respect the normL2 of self2 or if the directions of self1\n and self2 are different, .false. otherwise. procedure, private, pass(self ) :: R8P_not_eq_self private elementalfunction R8P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: R4P_not_eq_self private elementalfunction R4P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I8P_not_eq_self private elementalfunction I8P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I4P_not_eq_self private elementalfunction I4P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I2P_not_eq_self private elementalfunction I2P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I1P_not_eq_self private elementalfunction I1P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_not_eq_R8P private elementalfunction self_not_eq_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_not_eq_R4P private elementalfunction self_not_eq_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_not_eq_I8P private elementalfunction self_not_eq_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_not_eq_I4P private elementalfunction self_not_eq_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_not_eq_I2P private elementalfunction self_not_eq_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_not_eq_I1P private elementalfunction self_not_eq_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self1) :: self_low_self private elementalfunction self_low_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the normL2 of self2, .false. otherwise. procedure, private, pass(self ) :: R8P_low_self private elementalfunction R8P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: R4P_low_self private elementalfunction R4P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I8P_low_self private elementalfunction I8P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I4P_low_self private elementalfunction I4P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I2P_low_self private elementalfunction I2P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I1P_low_self private elementalfunction I1P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_R8P private elementalfunction self_low_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_R4P private elementalfunction self_low_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_I8P private elementalfunction self_low_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_I4P private elementalfunction self_low_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_I2P private elementalfunction self_low_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_I1P private elementalfunction self_low_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self1) :: self_low_eq_self private elementalfunction self_low_eq_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the normL2 of self2, .false. otherwise. procedure, private, pass(self ) :: R8P_low_eq_self private elementalfunction R8P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: R4P_low_eq_self private elementalfunction R4P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I8P_low_eq_self private elementalfunction I8P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I4P_low_eq_self private elementalfunction I4P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I2P_low_eq_self private elementalfunction I2P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I1P_low_eq_self private elementalfunction I1P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_eq_R8P private elementalfunction self_low_eq_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_eq_R4P private elementalfunction self_low_eq_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_eq_I8P private elementalfunction self_low_eq_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_eq_I4P private elementalfunction self_low_eq_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_eq_I2P private elementalfunction self_low_eq_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_low_eq_I1P private elementalfunction self_low_eq_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self1) :: self_eq_self private elementalfunction self_eq_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 Return .true. if the normL2 of the self1 is = with respect the normL2 of self2 and the directions of\n self1 and self2 are the same, .false. otherwise. type( Vector ), intent(in) :: self2 Return Value logical procedure, private, pass(self ) :: R8P_eq_self private elementalfunction R8P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: R4P_eq_self private elementalfunction R4P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I8P_eq_self private elementalfunction I8P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I4P_eq_self private elementalfunction I4P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description @brief Procedure returns .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I2P_eq_self private elementalfunction I2P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I1P_eq_self private elementalfunction I1P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_eq_R8P private elementalfunction self_eq_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_eq_R4P private elementalfunction self_eq_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_eq_I8P private elementalfunction self_eq_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_eq_I4P private elementalfunction self_eq_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_eq_I2P private elementalfunction self_eq_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_eq_I1P private elementalfunction self_eq_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. procedure, private, pass(self1) :: self_great_eq_self private elementalfunction self_great_eq_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the normL2 of self2, .false. otherwise. procedure, private, pass(self ) :: R8P_great_eq_self private elementalfunction R8P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: R4P_great_eq_self private elementalfunction R4P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I8P_great_eq_self private elementalfunction I8P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I4P_great_eq_self private elementalfunction I4P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I2P_great_eq_self private elementalfunction I2P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I1P_great_eq_self private elementalfunction I1P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_eq_R8P private elementalfunction self_great_eq_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_eq_R4P private elementalfunction self_great_eq_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_eq_I8P private elementalfunction self_great_eq_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_eq_I4P private elementalfunction self_great_eq_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_eq_I2P private elementalfunction self_great_eq_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_eq_I1P private elementalfunction self_great_eq_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self1) :: self_great_self private elementalfunction self_great_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the normL2 of self2, .false. otherwise. procedure, private, pass(self ) :: R8P_great_self private elementalfunction R8P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: R4P_great_self private elementalfunction R4P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I8P_great_self private elementalfunction I8P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I4P_great_self private elementalfunction I4P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I2P_great_self private elementalfunction I2P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: I1P_great_self private elementalfunction I1P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_R8P private elementalfunction self_great_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_R4P private elementalfunction self_great_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_I8P private elementalfunction self_great_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_I4P private elementalfunction self_great_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_I2P private elementalfunction self_great_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. procedure, private, pass(self ) :: self_great_I1P private elementalfunction self_great_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Source Code type , public :: Vector !< Vector class. real ( R8P ) :: x = 0._R8P !< Cartesian component in x direction. real ( R8P ) :: y = 0._R8P !< Cartesian component in y direction. real ( R8P ) :: z = 0._R8P !< Cartesian component in z direction. contains procedure :: init => init_vector_self ! Procedure for initializing vector components. procedure :: set => set_vector_self ! Procedure for setting vector components. procedure :: iolen => iolen_vector_self ! Procedure for computing IO length. procedure :: load => load_vector_self ! Procedure for loading Vector data. procedure :: save => save_vector_self ! Procedure for saving Vector data. procedure :: print => print_vector_self ! Procedure for printing vector components with a \"pretty\" format. procedure :: sq_norm => sq_norm_self ! Procedure for computing the square of the norm of a vector. procedure :: normL2 => normL2_self ! Procedure for computing the norm L2 of a vector. procedure :: normalize => normalize_self ! Procedure for normalizing a vector. procedure :: normalized => normalized_self ! Procedure for obtaining a normalized copy of a vector. procedure :: face_normal4 => face_normal4_self ! Procedure for calculating the normal of the face defined by 4 points vector. procedure :: face_normal3 => face_normal3_self ! Procedure for calculating the normal of the face defined by 3 points vector. generic :: operator (. cross .) => crossproduct ! Procedure for computing the cross product of 2 vectors. generic :: operator (. dot .) => dotproduct ! Procedure for computing the scalar (dot) product of 2 vectors. generic :: operator (. paral .) => parallel ! Procedure for computing the component of vec1 parallel to vec2. generic :: operator (. ortho .) => orthogonal ! Procedure for computign the component of vec1 orthogonal to vec2. procedure , pass ( vec1 ), private :: crossproduct procedure , pass ( vec1 ), private :: dotproduct procedure , pass ( vec1 ), private :: parallel procedure , pass ( vec1 ), private :: orthogonal ! operators overloading generic :: assignment ( = ) => assign_self , & #ifdef r16p assign_ScalR16P ,& #endif assign_ScalR8P , assign_ScalR4P , assign_ScalI8P , assign_ScalI4P , assign_ScalI2P , assign_ScalI1P #ifdef r16p procedure , pass ( self ), private :: assign_ScalR16P #endif procedure , pass ( self1 ), private :: assign_self procedure , pass ( self ), private :: assign_ScalR8P procedure , pass ( self ), private :: assign_ScalR4P procedure , pass ( self ), private :: assign_ScalI8P procedure , pass ( self ), private :: assign_ScalI4P procedure , pass ( self ), private :: assign_ScalI2P procedure , pass ( self ), private :: assign_ScalI1P generic :: operator ( * ) => self_mul_self , & #ifdef r16p ScalR16P_mul_self , self_mul_ScalR16P , & #endif ScalR8P_mul_self , self_mul_ScalR8P , ScalR4P_mul_self , self_mul_ScalR4P , ScalI8P_mul_self , self_mul_ScalI8P ,& ScalI4P_mul_self , self_mul_ScalI4P , ScalI2P_mul_self , self_mul_ScalI2P , ScalI1P_mul_self , self_mul_ScalI1P #ifdef r16p procedure , pass ( self ), private :: ScalR16P_mul_self procedure , pass ( self ), private :: self_mul_ScalR16P #endif procedure , pass ( self1 ), private :: self_mul_self procedure , pass ( self ), private :: ScalR8P_mul_self procedure , pass ( self ), private :: ScalR4P_mul_self procedure , pass ( self ), private :: ScalI8P_mul_self procedure , pass ( self ), private :: ScalI4P_mul_self procedure , pass ( self ), private :: ScalI2P_mul_self procedure , pass ( self ), private :: ScalI1P_mul_self procedure , pass ( self ), private :: self_mul_ScalR8P procedure , pass ( self ), private :: self_mul_ScalR4P procedure , pass ( self ), private :: self_mul_ScalI8P procedure , pass ( self ), private :: self_mul_ScalI4P procedure , pass ( self ), private :: self_mul_ScalI2P procedure , pass ( self ), private :: self_mul_ScalI1P generic :: operator ( / ) => self_div_self , & #ifdef r16p self_div_ScalR16P ,& #endif self_div_ScalR8P , self_div_ScalR4P , self_div_ScalI8P , self_div_ScalI4P , self_div_ScalI2P , self_div_ScalI1P #ifdef r16p procedure , pass ( self ), private :: self_div_ScalR16P #endif procedure , pass ( self1 ), private :: self_div_self procedure , pass ( self ), private :: self_div_ScalR8P procedure , pass ( self ), private :: self_div_ScalR4P procedure , pass ( self ), private :: self_div_ScalI8P procedure , pass ( self ), private :: self_div_ScalI4P procedure , pass ( self ), private :: self_div_ScalI2P procedure , pass ( self ), private :: self_div_ScalI1P generic :: operator ( + ) => positive_self , self_sum_self , & #ifdef r16p ScalR16P_sum_self , self_sum_ScalR16P , & #endif ScalR8P_sum_self , self_sum_ScalR8P , ScalR4P_sum_self , self_sum_ScalR4P , ScalI8P_sum_self , self_sum_ScalI8P ,& ScalI4P_sum_self , self_sum_ScalI4P , ScalI2P_sum_self , self_sum_ScalI2P , ScalI1P_sum_self , self_sum_ScalI1P #ifdef r16p procedure , pass ( self ), private :: ScalR16P_sum_self procedure , pass ( self ), private :: self_sum_ScalR16P #endif procedure , pass ( self ), private :: positive_self procedure , pass ( self1 ), private :: self_sum_self procedure , pass ( self ), private :: ScalR8P_sum_self procedure , pass ( self ), private :: ScalR4P_sum_self procedure , pass ( self ), private :: ScalI8P_sum_self procedure , pass ( self ), private :: ScalI4P_sum_self procedure , pass ( self ), private :: ScalI2P_sum_self procedure , pass ( self ), private :: ScalI1P_sum_self procedure , pass ( self ), private :: self_sum_ScalR8P procedure , pass ( self ), private :: self_sum_ScalR4P procedure , pass ( self ), private :: self_sum_ScalI8P procedure , pass ( self ), private :: self_sum_ScalI4P procedure , pass ( self ), private :: self_sum_ScalI2P procedure , pass ( self ), private :: self_sum_ScalI1P generic :: operator ( - ) => negative_self , self_sub_self , & #ifdef r16p ScalR16P_sub_self , self_sub_ScalR16P , & #endif ScalR8P_sub_self , self_sub_ScalR8P , ScalR4P_sub_self , self_sub_ScalR4P , ScalI8P_sub_self , self_sub_ScalI8P ,& ScalI4P_sub_self , self_sub_ScalI4P , ScalI2P_sub_self , self_sub_ScalI2P , ScalI1P_sub_self , self_sub_ScalI1P #ifdef r16p procedure , pass ( self ), private :: ScalR16P_sub_self procedure , pass ( self ), private :: self_sub_ScalR16P #endif procedure , pass ( self ), private :: negative_self procedure , pass ( self1 ), private :: self_sub_self procedure , pass ( self ), private :: ScalR8P_sub_self procedure , pass ( self ), private :: ScalR4P_sub_self procedure , pass ( self ), private :: ScalI8P_sub_self procedure , pass ( self ), private :: ScalI4P_sub_self procedure , pass ( self ), private :: ScalI2P_sub_self procedure , pass ( self ), private :: ScalI1P_sub_self procedure , pass ( self ), private :: self_sub_ScalR8P procedure , pass ( self ), private :: self_sub_ScalR4P procedure , pass ( self ), private :: self_sub_ScalI8P procedure , pass ( self ), private :: self_sub_ScalI4P procedure , pass ( self ), private :: self_sub_ScalI2P procedure , pass ( self ), private :: self_sub_ScalI1P generic :: operator ( /= ) => self_not_eq_self , & #ifdef r16p R16P_not_eq_self , self_not_eq_R16P , & #endif R8P_not_eq_self , self_not_eq_R8P , R4P_not_eq_self , self_not_eq_R4P , I8P_not_eq_self , self_not_eq_I8P ,& I4P_not_eq_self , self_not_eq_I4P , I2P_not_eq_self , self_not_eq_I2P , I1P_not_eq_self , self_not_eq_I1P generic :: operator ( < ) => self_low_self , & #ifdef r16p R16P_low_self , self_low_R16P , & #endif R8P_low_self , self_low_R8P , R4P_low_self , self_low_R4P , I8P_low_self , self_low_I8P ,& I4P_low_self , self_low_I4P , I2P_low_self , self_low_I2P , I1P_low_self , self_low_I1P generic :: operator ( <= ) => self_low_eq_self , & #ifdef r16p R16P_low_eq_self , self_low_eq_R16P , & #endif R8P_low_eq_self , self_low_eq_R8P , R4P_low_eq_self , self_low_eq_R4P , I8P_low_eq_self , self_low_eq_I8P ,& I4P_low_eq_self , self_low_eq_I4P , I2P_low_eq_self , self_low_eq_I2P , I1P_low_eq_self , self_low_eq_I1P generic :: operator ( == ) => self_eq_self , & #ifdef r16p R16P_eq_self , self_eq_R16P , & #endif R8P_eq_self , self_eq_R8P , R4P_eq_self , self_eq_R4P , I8P_eq_self , self_eq_I8P ,& I4P_eq_self , self_eq_I4P , I2P_eq_self , self_eq_I2P , I1P_eq_self , self_eq_I1P generic :: operator ( >= ) => self_great_eq_self , & #ifdef r16p R16P_great_eq_self , self_great_eq_R16P , & #endif R8P_great_eq_self , self_great_eq_R8P , R4P_great_eq_self , self_great_eq_R4P , I8P_great_eq_self ,& self_great_eq_I8P , I4P_great_eq_self , self_great_eq_I4P , I2P_great_eq_self , self_great_eq_I2P ,& I1P_great_eq_self , self_great_eq_I1P generic :: operator ( > ) => self_great_self , & #ifdef r16p R16P_great_self , self_great_R16P , & #endif R8P_great_self , self_great_R8P , R4P_great_self , self_great_R4P , I8P_great_self , self_great_I8P ,& I4P_great_self , self_great_I4P , I2P_great_self , self_great_I2P , I1P_great_self , self_great_I1P #ifdef r16p procedure , pass ( self ), private :: R16P_not_eq_self procedure , pass ( self ), private :: self_not_eq_R16P procedure , pass ( self ), private :: R16P_low_self procedure , pass ( self ), private :: self_low_R16P procedure , pass ( self ), private :: R16P_low_eq_self procedure , pass ( self ), private :: self_low_eq_R16P procedure , pass ( self ), private :: R16P_eq_self procedure , pass ( self ), private :: self_eq_R16P procedure , pass ( self ), private :: R16P_great_eq_self procedure , pass ( self ), private :: self_great_eq_R16P procedure , pass ( self ), private :: R16P_great_self procedure , pass ( self ), private :: self_great_R16P #endif procedure , pass ( self1 ), private :: self_not_eq_self procedure , pass ( self ), private :: R8P_not_eq_self procedure , pass ( self ), private :: R4P_not_eq_self procedure , pass ( self ), private :: I8P_not_eq_self procedure , pass ( self ), private :: I4P_not_eq_self procedure , pass ( self ), private :: I2P_not_eq_self procedure , pass ( self ), private :: I1P_not_eq_self procedure , pass ( self ), private :: self_not_eq_R8P procedure , pass ( self ), private :: self_not_eq_R4P procedure , pass ( self ), private :: self_not_eq_I8P procedure , pass ( self ), private :: self_not_eq_I4P procedure , pass ( self ), private :: self_not_eq_I2P procedure , pass ( self ), private :: self_not_eq_I1P procedure , pass ( self1 ), private :: self_low_self procedure , pass ( self ), private :: R8P_low_self procedure , pass ( self ), private :: R4P_low_self procedure , pass ( self ), private :: I8P_low_self procedure , pass ( self ), private :: I4P_low_self procedure , pass ( self ), private :: I2P_low_self procedure , pass ( self ), private :: I1P_low_self procedure , pass ( self ), private :: self_low_R8P procedure , pass ( self ), private :: self_low_R4P procedure , pass ( self ), private :: self_low_I8P procedure , pass ( self ), private :: self_low_I4P procedure , pass ( self ), private :: self_low_I2P procedure , pass ( self ), private :: self_low_I1P procedure , pass ( self1 ), private :: self_low_eq_self procedure , pass ( self ), private :: R8P_low_eq_self procedure , pass ( self ), private :: R4P_low_eq_self procedure , pass ( self ), private :: I8P_low_eq_self procedure , pass ( self ), private :: I4P_low_eq_self procedure , pass ( self ), private :: I2P_low_eq_self procedure , pass ( self ), private :: I1P_low_eq_self procedure , pass ( self ), private :: self_low_eq_R8P procedure , pass ( self ), private :: self_low_eq_R4P procedure , pass ( self ), private :: self_low_eq_I8P procedure , pass ( self ), private :: self_low_eq_I4P procedure , pass ( self ), private :: self_low_eq_I2P procedure , pass ( self ), private :: self_low_eq_I1P procedure , pass ( self1 ), private :: self_eq_self procedure , pass ( self ), private :: R8P_eq_self procedure , pass ( self ), private :: R4P_eq_self procedure , pass ( self ), private :: I8P_eq_self procedure , pass ( self ), private :: I4P_eq_self procedure , pass ( self ), private :: I2P_eq_self procedure , pass ( self ), private :: I1P_eq_self procedure , pass ( self ), private :: self_eq_R8P procedure , pass ( self ), private :: self_eq_R4P procedure , pass ( self ), private :: self_eq_I8P procedure , pass ( self ), private :: self_eq_I4P procedure , pass ( self ), private :: self_eq_I2P procedure , pass ( self ), private :: self_eq_I1P procedure , pass ( self1 ), private :: self_great_eq_self procedure , pass ( self ), private :: R8P_great_eq_self procedure , pass ( self ), private :: R4P_great_eq_self procedure , pass ( self ), private :: I8P_great_eq_self procedure , pass ( self ), private :: I4P_great_eq_self procedure , pass ( self ), private :: I2P_great_eq_self procedure , pass ( self ), private :: I1P_great_eq_self procedure , pass ( self ), private :: self_great_eq_R8P procedure , pass ( self ), private :: self_great_eq_R4P procedure , pass ( self ), private :: self_great_eq_I8P procedure , pass ( self ), private :: self_great_eq_I4P procedure , pass ( self ), private :: self_great_eq_I2P procedure , pass ( self ), private :: self_great_eq_I1P procedure , pass ( self1 ), private :: self_great_self procedure , pass ( self ), private :: R8P_great_self procedure , pass ( self ), private :: R4P_great_self procedure , pass ( self ), private :: I8P_great_self procedure , pass ( self ), private :: I4P_great_self procedure , pass ( self ), private :: I2P_great_self procedure , pass ( self ), private :: I1P_great_self procedure , pass ( self ), private :: self_great_R8P procedure , pass ( self ), private :: self_great_R4P procedure , pass ( self ), private :: self_great_I8P procedure , pass ( self ), private :: self_great_I4P procedure , pass ( self ), private :: self_great_I2P procedure , pass ( self ), private :: self_great_I1P endtype Vector","tags":"","loc":"type/vector.html","title":"Vector â€“ VecFor "},{"text":"type, public :: Vector_Ptr type~~vector_ptr~~InheritsGraph type~vector_ptr Vector_Ptr type~vector Vector type~vector->type~vector_ptr p Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Pointer of Vector for creating array of pointers of Vector. Components Type Visibility Attributes Name Initial type( Vector ), public, pointer :: p => null() Source Code type , public :: Vector_Ptr !< Pointer of Vector for creating array of pointers of Vector. type ( Vector ), pointer :: p => null () endtype Vector_Ptr","tags":"","loc":"type/vector_ptr.html","title":"Vector_Ptr â€“ VecFor "},{"text":"public elementalfunction sq_norm(vec) result(sq) Arguments Type Intent Optional Attributes Name type( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Square of the Norm. Description Compute the square of the norm of a vector. The square norm if defined as  N = x&#94;2  + y&#94;2  + z&#94;2 . Called By proc~~sq_norm~~CalledByGraph proc~sq_norm sq_norm program~simple simple program~simple->proc~sq_norm Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function sq_norm ( vec ) result ( sq ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the square of the norm of a vector. !< !< The square norm if defined as  N = x&#94;2  + y&#94;2  + z&#94;2 . !--------------------------------------------------------------------------------------------------------------------------------- type ( Vector ), intent ( IN ) :: vec !< Vector. real ( R8P ) :: sq !< Square of the Norm. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sq = ( vec % x * vec % x ) + ( vec % y * vec % y ) + ( vec % z * vec % z ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction sq_norm","tags":"","loc":"proc/sq_norm.html","title":"sq_norm â€“ VecFor"},{"text":"public elementalfunction normL2(vec) result(norm) Arguments Type Intent Optional Attributes Name type( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Norm L2. Description Compute the norm L2 of a vector. The norm L2 if defined as  N = \\sqrt {x&#94;2  + y&#94;2  + z&#94;2 } . Called By proc~~norml2~~CalledByGraph proc~norml2 normL2 proc~i4p_eq_self I4P_eq_self proc~i4p_eq_self->proc~norml2 proc~self_low_i8p self_low_I8P proc~self_low_i8p->proc~norml2 proc~self_eq_i4p self_eq_I4P proc~self_eq_i4p->proc~norml2 proc~self_great_self self_great_self proc~self_great_self->proc~norml2 proc~i4p_low_self I4P_low_self proc~i4p_low_self->proc~norml2 proc~i2p_eq_self I2P_eq_self proc~i2p_eq_self->proc~norml2 proc~self_low_i4p self_low_I4P proc~self_low_i4p->proc~norml2 proc~self_eq_i2p self_eq_I2P proc~self_eq_i2p->proc~norml2 proc~i2p_low_self I2P_low_self proc~i2p_low_self->proc~norml2 proc~i1p_eq_self I1P_eq_self proc~i1p_eq_self->proc~norml2 proc~self_low_i2p self_low_I2P proc~self_low_i2p->proc~norml2 proc~self_eq_i1p self_eq_I1P proc~self_eq_i1p->proc~norml2 proc~self_not_eq_r16p self_not_eq_R16P proc~self_not_eq_r16p->proc~norml2 proc~i1p_low_self I1P_low_self proc~i1p_low_self->proc~norml2 proc~self_great_eq_self self_great_eq_self proc~self_great_eq_self->proc~norml2 proc~i2p_great_self I2P_great_self proc~i2p_great_self->proc~norml2 proc~self_low_i1p self_low_I1P proc~self_low_i1p->proc~norml2 proc~r16p_great_eq_self R16P_great_eq_self proc~r16p_great_eq_self->proc~norml2 proc~r16p_great_self R16P_great_self proc~r16p_great_self->proc~norml2 proc~self_low_eq_self self_low_eq_self proc~self_low_eq_self->proc~norml2 proc~self_great_eq_r16p self_great_eq_R16P proc~self_great_eq_r16p->proc~norml2 proc~r16p_low_eq_self R16P_low_eq_self proc~r16p_low_eq_self->proc~norml2 proc~r8p_great_eq_self R8P_great_eq_self proc~r8p_great_eq_self->proc~norml2 proc~self_low_eq_r16p self_low_eq_R16P proc~self_low_eq_r16p->proc~norml2 proc~self_great_eq_r8p self_great_eq_R8P proc~self_great_eq_r8p->proc~norml2 proc~r8p_low_eq_self R8P_low_eq_self proc~r8p_low_eq_self->proc~norml2 proc~r4p_great_eq_self R4P_great_eq_self proc~r4p_great_eq_self->proc~norml2 proc~self_great_eq_r4p self_great_eq_R4P proc~self_great_eq_r4p->proc~norml2 proc~self_low_eq_r8p self_low_eq_R8P proc~self_low_eq_r8p->proc~norml2 proc~r8p_not_eq_self R8P_not_eq_self proc~r8p_not_eq_self->proc~norml2 proc~self_great_i2p self_great_I2P proc~self_great_i2p->proc~norml2 proc~r4p_low_eq_self R4P_low_eq_self proc~r4p_low_eq_self->proc~norml2 proc~i8p_great_eq_self I8P_great_eq_self proc~i8p_great_eq_self->proc~norml2 proc~self_not_eq_i1p self_not_eq_I1P proc~self_not_eq_i1p->proc~norml2 proc~self_low_eq_r4p self_low_eq_R4P proc~self_low_eq_r4p->proc~norml2 proc~self_great_eq_i8p self_great_eq_I8P proc~self_great_eq_i8p->proc~norml2 proc~i8p_low_eq_self I8P_low_eq_self proc~i8p_low_eq_self->proc~norml2 proc~i4p_great_eq_self I4P_great_eq_self proc~i4p_great_eq_self->proc~norml2 proc~self_low_eq_i8p self_low_eq_I8P proc~self_low_eq_i8p->proc~norml2 proc~i8p_not_eq_self I8P_not_eq_self proc~i8p_not_eq_self->proc~norml2 proc~i4p_low_eq_self I4P_low_eq_self proc~i4p_low_eq_self->proc~norml2 proc~self_not_eq_i8p self_not_eq_I8P proc~self_not_eq_i8p->proc~norml2 proc~self_not_eq_r8p self_not_eq_R8P proc~self_not_eq_r8p->proc~norml2 proc~self_low_eq_i4p self_low_eq_I4P proc~self_low_eq_i4p->proc~norml2 proc~i4p_not_eq_self I4P_not_eq_self proc~i4p_not_eq_self->proc~norml2 proc~i1p_great_self I1P_great_self proc~i1p_great_self->proc~norml2 proc~i2p_low_eq_self I2P_low_eq_self proc~i2p_low_eq_self->proc~norml2 proc~i1p_great_eq_self I1P_great_eq_self proc~i1p_great_eq_self->proc~norml2 proc~self_low_self self_low_self proc~self_low_self->proc~norml2 proc~self_low_eq_i2p self_low_eq_I2P proc~self_low_eq_i2p->proc~norml2 proc~self_great_eq_i1p self_great_eq_I1P proc~self_great_eq_i1p->proc~norml2 proc~i1p_low_eq_self I1P_low_eq_self proc~i1p_low_eq_self->proc~norml2 proc~self_not_eq_i2p self_not_eq_I2P proc~self_not_eq_i2p->proc~norml2 proc~self_low_eq_i1p self_low_eq_I1P proc~self_low_eq_i1p->proc~norml2 proc~i1p_not_eq_self I1P_not_eq_self proc~i1p_not_eq_self->proc~norml2 proc~normalize normalize proc~normalize->proc~norml2 proc~self_eq_self self_eq_self proc~self_eq_self->proc~norml2 proc~self_eq_self->proc~normalize proc~self_great_r16p self_great_R16P proc~self_great_r16p->proc~norml2 proc~r4p_not_eq_self R4P_not_eq_self proc~r4p_not_eq_self->proc~norml2 proc~r16p_eq_self R16P_eq_self proc~r16p_eq_self->proc~norml2 proc~r8p_great_self R8P_great_self proc~r8p_great_self->proc~norml2 proc~self_great_i1p self_great_I1P proc~self_great_i1p->proc~norml2 proc~self_eq_r16p self_eq_R16P proc~self_eq_r16p->proc~norml2 proc~self_great_r8p self_great_R8P proc~self_great_r8p->proc~norml2 proc~r16p_low_self R16P_low_self proc~r16p_low_self->proc~norml2 proc~r8p_eq_self R8P_eq_self proc~r8p_eq_self->proc~norml2 proc~r4p_great_self R4P_great_self proc~r4p_great_self->proc~norml2 proc~self_eq_r8p self_eq_R8P proc~self_eq_r8p->proc~norml2 proc~self_great_r4p self_great_R4P proc~self_great_r4p->proc~norml2 proc~r4p_eq_self R4P_eq_self proc~r4p_eq_self->proc~norml2 proc~i8p_great_self I8P_great_self proc~i8p_great_self->proc~norml2 proc~self_eq_r4p self_eq_R4P proc~self_eq_r4p->proc~norml2 proc~r4p_low_self R4P_low_self proc~r4p_low_self->proc~norml2 proc~self_not_eq_r4p self_not_eq_R4P proc~self_not_eq_r4p->proc~norml2 proc~i8p_eq_self I8P_eq_self proc~i8p_eq_self->proc~norml2 proc~self_low_r4p self_low_R4P proc~self_low_r4p->proc~norml2 proc~self_eq_i8p self_eq_I8P proc~self_eq_i8p->proc~norml2 proc~i8p_low_self I8P_low_self proc~i8p_low_self->proc~norml2 proc~self_low_r16p self_low_R16P proc~self_low_r16p->proc~norml2 proc~self_great_eq_i4p self_great_eq_I4P proc~self_great_eq_i4p->proc~norml2 proc~r8p_low_self R8P_low_self proc~r8p_low_self->proc~norml2 proc~i2p_great_eq_self I2P_great_eq_self proc~i2p_great_eq_self->proc~norml2 proc~self_low_r8p self_low_R8P proc~self_low_r8p->proc~norml2 program~simple simple program~simple->proc~norml2 proc~face_normal3 face_normal3 program~simple->proc~face_normal3 proc~face_normal4 face_normal4 program~simple->proc~face_normal4 proc~self_great_eq_i2p self_great_eq_I2P proc~self_great_eq_i2p->proc~norml2 proc~self_great_i8p self_great_I8P proc~self_great_i8p->proc~norml2 proc~normalized_self normalized_self proc~normalized_self->proc~norml2 proc~self_not_eq_i4p self_not_eq_I4P proc~self_not_eq_i4p->proc~norml2 proc~i4p_great_self I4P_great_self proc~i4p_great_self->proc~norml2 proc~self_not_eq_self self_not_eq_self proc~self_not_eq_self->proc~norml2 proc~self_not_eq_self->proc~normalize proc~i2p_not_eq_self I2P_not_eq_self proc~i2p_not_eq_self->proc~norml2 proc~parallel parallel proc~parallel->proc~norml2 proc~parallel->proc~normalize proc~normalize_self normalize_self proc~normalize_self->proc~norml2 proc~self_great_i4p self_great_I4P proc~self_great_i4p->proc~norml2 proc~r16p_not_eq_self R16P_not_eq_self proc~r16p_not_eq_self->proc~norml2 proc~face_normal3->proc~normalize proc~face_normal3_self face_normal3_self proc~face_normal3_self->proc~normalize proc~face_normal4->proc~normalize proc~face_normal4_self face_normal4_self proc~face_normal4_self->proc~normalize Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function normL2 ( vec ) result ( norm ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the norm L2 of a vector. !< !< The norm L2 if defined as  N = \\sqrt {x&#94;2  + y&#94;2  + z&#94;2 } . !--------------------------------------------------------------------------------------------------------------------------------- type ( Vector ), intent ( IN ) :: vec !< Vector. real ( R8P ) :: norm !< Norm L2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- norm = sqrt (( vec % x * vec % x ) + ( vec % y * vec % y ) + ( vec % z * vec % z )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction normL2","tags":"","loc":"proc/norml2.html","title":"normL2 â€“ VecFor"},{"text":"public elementalfunction normalize(vec) result(norm) Arguments Type Intent Optional Attributes Name type( Vector ), intent(in) :: vec Vector to be normalized. Return Value type( Vector ) Vector normalized. Description Normalize a vector. The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the\n normalization value is set to normL2(vec)+smallR8P. Calls proc~~normalize~~CallsGraph proc~normalize normalize proc~norml2 normL2 proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~normalize~~CalledByGraph proc~normalize normalize proc~face_normal3 face_normal3 proc~face_normal3->proc~normalize proc~self_not_eq_self self_not_eq_self proc~self_not_eq_self->proc~normalize proc~face_normal3_self face_normal3_self proc~face_normal3_self->proc~normalize proc~face_normal4 face_normal4 proc~face_normal4->proc~normalize proc~self_eq_self self_eq_self proc~self_eq_self->proc~normalize proc~face_normal4_self face_normal4_self proc~face_normal4_self->proc~normalize proc~parallel parallel proc~parallel->proc~normalize program~simple simple program~simple->proc~face_normal3 program~simple->proc~face_normal4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial real(kind=R8P), public :: nm Norm L2 of vector. Source Code elemental function normalize ( vec ) result ( norm ) !--------------------------------------------------------------------------------------------------------------------------------- !< Normalize a vector. !< !< The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the !< normalization value is set to normL2(vec)+smallR8P. !--------------------------------------------------------------------------------------------------------------------------------- type ( Vector ), intent ( IN ) :: vec !< Vector to be normalized. type ( Vector ) :: norm !< Vector normalized. real ( R8P ) :: nm !< Norm L2 of vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- nm = normL2 ( vec ) if ( nm < smallR8P ) then nm = nm + smallR8P endif norm % x = vec % x / nm norm % y = vec % y / nm norm % z = vec % z / nm return !--------------------------------------------------------------------------------------------------------------------------------- endfunction normalize","tags":"","loc":"proc/normalize.html","title":"normalize â€“ VecFor"},{"text":"public elementalfunction face_normal4(norm, pt1, pt2, pt3, pt4) result(fnormal) Arguments Type Intent Optional Attributes Name character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. type( Vector ), intent(in) :: pt4 Fourth face point. Return Value type( Vector ) Face normal. Description Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. The convention for the points numeration is the following: 1.----------.2\n  |          |\n  |          |\n  |          |\n  |          |\n 4.----------.3 The normal is calculated by the cross product of the diagonal d13 for the diagonal d24: d13 x d24.\n The normal is normalized if the variable norm is passed (with any value). Calls proc~~face_normal4~~CallsGraph proc~face_normal4 face_normal4 proc~normalize normalize proc~face_normal4->proc~normalize proc~norml2 normL2 proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~face_normal4~~CalledByGraph proc~face_normal4 face_normal4 program~simple simple program~simple->proc~face_normal4 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( Vector ), public :: d13 Face 1-3 diagonal. type( Vector ), public :: d24 Face 2-4 diagonal. Source Code elemental function face_normal4 ( norm , pt1 , pt2 , pt3 , pt4 ) result ( fnormal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. !< !< The convention for the points numeration is the following: !<``` !< 1.----------.2 !<  |          | !<  |          | !<  |          | !<  |          | !< 4.----------.3 !<``` !< The normal is calculated by the cross product of the diagonal d13 for the diagonal d24: d13 x d24. !< The normal is normalized if the variable *norm* is passed (with any value). !--------------------------------------------------------------------------------------------------------------------------------- character ( 1 ), intent ( IN ), optional :: norm !< If 'norm' is passed as argument the normal is normalized. type ( Vector ), intent ( IN ) :: pt1 !< First face point. type ( Vector ), intent ( IN ) :: pt2 !< Second face point. type ( Vector ), intent ( IN ) :: pt3 !< Third face point. type ( Vector ), intent ( IN ) :: pt4 !< Fourth face point. type ( Vector ) :: fnormal !< Face normal. type ( Vector ) :: d13 !< Face 1-3 diagonal. type ( Vector ) :: d24 !< Face 2-4 diagonal. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- d13 = pt3 - pt1 d24 = pt4 - pt2 if ( present ( norm )) then fnormal = normalize ( d13 . cross . d24 ) else fnormal = 0.5_R8P * ( d13 . cross . d24 ) endif return !--------------------------------------------------------------------------------------------------------------------------------- endfunction face_normal4","tags":"","loc":"proc/face_normal4.html","title":"face_normal4 â€“ VecFor"},{"text":"public elementalfunction face_normal3(norm, pt1, pt2, pt3) result(fnormal) Arguments Type Intent Optional Attributes Name character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. Return Value type( Vector ) Face normal. Description Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. The convention for the points numeration is the following: 1.----.2\n   \\   |\n    \\  |\n     \\ |\n      \\|\n       .3 The normal is calculated by the cross product of the side s12 for the side s13: s12 x s13.\n The normal is normalized if the variable 'norm' is passed (with any value). Calls proc~~face_normal3~~CallsGraph proc~face_normal3 face_normal3 proc~normalize normalize proc~face_normal3->proc~normalize proc~norml2 normL2 proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called By proc~~face_normal3~~CalledByGraph proc~face_normal3 face_normal3 program~simple simple program~simple->proc~face_normal3 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( Vector ), public :: s12 Face 1-2 diagonals. type( Vector ), public :: s13 Face 1-3 diagonals. Source Code elemental function face_normal3 ( norm , pt1 , pt2 , pt3 ) result ( fnormal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. !< !< The convention for the points numeration is the following: !<``` !< 1.----.2 !<   \\   | !<    \\  | !<     \\ | !<      \\| !<       .3 !<``` !< The normal is calculated by the cross product of the side s12 for the side s13: s12 x s13. !< The normal is normalized if the variable 'norm' is passed (with any value). !--------------------------------------------------------------------------------------------------------------------------------- character ( 1 ), intent ( IN ), optional :: norm !< If 'norm' is passed as argument the normal is normalized. type ( Vector ), intent ( IN ) :: pt1 !< First face point. type ( Vector ), intent ( IN ) :: pt2 !< Second face point. type ( Vector ), intent ( IN ) :: pt3 !< Third face point. type ( Vector ) :: fnormal !< Face normal. type ( Vector ) :: s12 !< Face 1-2 diagonals. type ( Vector ) :: s13 !< Face 1-3 diagonals. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- s12 = pt2 - pt1 s13 = pt3 - pt1 if ( present ( norm )) then fnormal = normalize ( s12 . cross . s13 ) else fnormal = 0.5_R8P * ( s12 . cross . s13 ) endif return !--------------------------------------------------------------------------------------------------------------------------------- endfunction face_normal3","tags":"","loc":"proc/face_normal3.html","title":"face_normal3 â€“ VecFor"},{"text":"private function iolen_vector_self(vec) result(iolen) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value integer(kind=I4P) IO length. Description Compute IO length. Source Code function iolen_vector_self ( vec ) result ( iolen ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute IO length. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector. integer ( I4P ) :: iolen !< IO length. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- inquire ( iolength = iolen ) vec % x , vec % y , vec % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction iolen_vector_self","tags":"","loc":"proc/iolen_vector_self.html","title":"iolen_vector_self â€“ VecFor"},{"text":"private elementalfunction normalized_self(vec) result(norm) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector to be normalized. Return Value type( Vector ) Normalized copy. Description Get a normalized copy of a vector. The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the\n normalization value is set to normL2(vec)+smallR8P. Calls proc~~normalized_self~~CallsGraph proc~normalized_self normalized_self proc~norml2 normL2 proc~normalized_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial real(kind=R8P), public :: nm Norm L2 of vector. Source Code elemental function normalized_self ( vec ) result ( norm ) !--------------------------------------------------------------------------------------------------------------------------------- !< Get a normalized copy of a vector. !< !< The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the !< normalization value is set to normL2(vec)+smallR8P. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector to be normalized. type ( Vector ) :: norm !< Normalized copy. real ( R8P ) :: nm !< Norm L2 of vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- nm = normL2 ( vec ) if ( nm < smallR8P ) then nm = nm + smallR8P endif norm % x = vec % x / nm norm % y = vec % y / nm norm % z = vec % z / nm return !--------------------------------------------------------------------------------------------------------------------------------- endfunction normalized_self","tags":"","loc":"proc/normalized_self.html","title":"normalized_self â€“ VecFor"},{"text":"private elementalfunction sq_norm_self(vec) result(sq) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Square of the Norm. Description Compute the square of the norm of a vector. The square norm if defined as  N = x&#94;2  + y&#94;2  + z&#94;2 . Source Code elemental function sq_norm_self ( vec ) result ( sq ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the square of the norm of a vector. !< !< The square norm if defined as  N = x&#94;2  + y&#94;2  + z&#94;2 . !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector. real ( R8P ) :: sq !< Square of the Norm. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sq = ( vec % x * vec % x ) + ( vec % y * vec % y ) + ( vec % z * vec % z ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction sq_norm_self","tags":"","loc":"proc/sq_norm_self.html","title":"sq_norm_self â€“ VecFor"},{"text":"private elementalfunction normL2_self(vec) result(norm) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Norm L2. Description Compute the norm L2 of a vector. The norm L2 if defined as  N = \\sqrt {x&#94;2  + y&#94;2  + z&#94;2 } . Source Code elemental function normL2_self ( vec ) result ( norm ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the norm L2 of a vector. !< !< The norm L2 if defined as  N = \\sqrt {x&#94;2  + y&#94;2  + z&#94;2 } . !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector. real ( R8P ) :: norm !< Norm L2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- norm = sqrt (( vec % x * vec % x ) + ( vec % y * vec % y ) + ( vec % z * vec % z )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction normL2_self","tags":"","loc":"proc/norml2_self.html","title":"normL2_self â€“ VecFor"},{"text":"private elementalfunction crossproduct(vec1, vec2) result(cross) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Cross product vector. Description Compute the cross product of 2 vectors.  \\vec V=\\left({y_1 z_2 - z_1 y_2}\\right)\\vec i +\n           \\left({z_1 x_2 - x_1 z_2}\\right)\\vec j +\n           \\left({x_1 y_2 - y_1 x_2}\\right)\\vec k \n where  x_i ,  y_i  and  z_i   i=1,2  are the components of the vectors. Source Code elemental function crossproduct ( vec1 , vec2 ) result ( cross ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the cross product of 2 vectors. !< !<  \\vec V=\\left({y_1 z_2 - z_1 y_2}\\right)\\vec i + !<           \\left({z_1 x_2 - x_1 z_2}\\right)\\vec j + !<           \\left({x_1 y_2 - y_1 x_2}\\right)\\vec k  !< where  x_i ,  y_i  and  z_i   i=1,2  are the components of the vectors. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec1 !< First vector. type ( Vector ), intent ( IN ) :: vec2 !< Second vector. type ( Vector ) :: cross !< Cross product vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- cross % x = ( vec1 % y * vec2 % z ) - ( vec1 % z * vec2 % y ) cross % y = ( vec1 % z * vec2 % x ) - ( vec1 % x * vec2 % z ) cross % z = ( vec1 % x * vec2 % y ) - ( vec1 % y * vec2 % x ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction crossproduct","tags":"","loc":"proc/crossproduct.html","title":"crossproduct â€“ VecFor"},{"text":"private elementalfunction dotproduct(vec1, vec2) result(dot) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value real(kind=R8P) Dot product. Description Compute the scalar (dot) product of 2 vectors.  {\\rm D}= x_1 \\cdot x_2 + y_1 \\cdot y_2 + z_1 \\cdot z_2 \n where  x_i ,  y_i  and  z_i   i=1,2  are the components of the vectors. Source Code elemental function dotproduct ( vec1 , vec2 ) result ( dot ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the scalar (dot) product of 2 vectors. !< !<  {\\rm D}= x_1 \\cdot x_2 + y_1 \\cdot y_2 + z_1 \\cdot z_2  !< where  x_i ,  y_i  and  z_i   i=1,2  are the components of the vectors. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec1 !< First vector. type ( Vector ), intent ( IN ) :: vec2 !< Second vector. real ( R8P ) :: dot !< Dot product. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- dot = ( vec1 % x * vec2 % x ) + ( vec1 % y * vec2 % y ) + ( vec1 % z * vec2 % z ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction dotproduct","tags":"","loc":"proc/dotproduct.html","title":"dotproduct â€“ VecFor"},{"text":"private elementalfunction parallel(vec1, vec2) result(paral) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 Compute the component of vec1 parallel to vec2.\n First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Component of of vec1 parallel to vec2. Calls proc~~parallel~~CallsGraph proc~parallel parallel proc~normalize normalize proc~parallel->proc~normalize proc~norml2 normL2 proc~parallel->proc~norml2 proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function parallel ( vec1 , vec2 ) result ( paral ) !--------------------------------------------------------------------------------------------------------------------------------- !> Compute the component of vec1 parallel to vec2. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec1 !< First vector. type ( Vector ), intent ( IN ) :: vec2 !< Second vector. type ( Vector ) :: paral !< Component of of vec1 parallel to vec2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- paral = ( vec1 . dot . vec2 ) * normalize ( vec2 ) / normL2 ( vec2 ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction parallel","tags":"","loc":"proc/parallel.html","title":"parallel â€“ VecFor"},{"text":"private elementalfunction orthogonal(vec1, vec2) result(ortho) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Component of of vec1 orthogonal to vec2. Description Compute the component of vec1 orthogonal to vec2. Source Code elemental function orthogonal ( vec1 , vec2 ) result ( ortho ) !--------------------------------------------------------------------------------------------------------------------------------- !< Compute the component of vec1 orthogonal to vec2. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec1 !< First vector. type ( Vector ), intent ( IN ) :: vec2 !< Second vector. type ( Vector ) :: ortho !< Component of of vec1 orthogonal to vec2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- ortho = vec1 - ( vec1 . paral . vec2 ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction orthogonal","tags":"","loc":"proc/orthogonal.html","title":"orthogonal â€“ VecFor"},{"text":"private elementalfunction self_mul_self(self1, self2) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Multiply (by components) two selfs. Source Code elemental function self_mul_self ( self1 , self2 ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply (by components) two selfs. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = self1 % x * self2 % x mul % y = self1 % y * self2 % y mul % z = self1 % z * self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_self","tags":"","loc":"proc/self_mul_self.html","title":"self_mul_self â€“ VecFor"},{"text":"private elementalfunction ScalR16P_mul_self(scal, self) result(mul) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (real R16P) for self. Source Code elemental function ScalR16P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (real R16P) for self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR16P_mul_self","tags":"","loc":"proc/scalr16p_mul_self.html","title":"ScalR16P_mul_self â€“ VecFor"},{"text":"private elementalfunction self_mul_ScalR16P(self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (real R16P). Source Code elemental function self_mul_ScalR16P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (real R16P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalR16P","tags":"","loc":"proc/self_mul_scalr16p.html","title":"self_mul_ScalR16P â€“ VecFor"},{"text":"private elementalfunction ScalR8P_mul_self(scal, self) result(mul) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (real R8P) for self. Source Code elemental function ScalR8P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (real R8P) for self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR8P_mul_self","tags":"","loc":"proc/scalr8p_mul_self.html","title":"ScalR8P_mul_self â€“ VecFor"},{"text":"private elementalfunction self_mul_ScalR8P(self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (real R8P). Source Code elemental function self_mul_ScalR8P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (real R8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalR8P","tags":"","loc":"proc/self_mul_scalr8p.html","title":"self_mul_ScalR8P â€“ VecFor"},{"text":"private elementalfunction ScalR4P_mul_self(scal, self) result(mul) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (real R4P) for self. Source Code elemental function ScalR4P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (real R4P) for self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR4P_mul_self","tags":"","loc":"proc/scalr4p_mul_self.html","title":"ScalR4P_mul_self â€“ VecFor"},{"text":"private elementalfunction self_mul_ScalR4P(self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (real R4P). Source Code elemental function self_mul_ScalR4P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (real R4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalR4P","tags":"","loc":"proc/self_mul_scalr4p.html","title":"self_mul_ScalR4P â€“ VecFor"},{"text":"private elementalfunction ScalI8P_mul_self(scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I8P) for self. Source Code elemental function ScalI8P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (integer I8P) for self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI8P_mul_self","tags":"","loc":"proc/scali8p_mul_self.html","title":"ScalI8P_mul_self â€“ VecFor"},{"text":"private elementalfunction self_mul_ScalI8P(self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I8P). Source Code elemental function self_mul_ScalI8P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (integer I8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalI8P","tags":"","loc":"proc/self_mul_scali8p.html","title":"self_mul_ScalI8P â€“ VecFor"},{"text":"private elementalfunction ScalI4P_mul_self(scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I4P) for self. Source Code elemental function ScalI4P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (integer I4P) for self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI4P_mul_self","tags":"","loc":"proc/scali4p_mul_self.html","title":"ScalI4P_mul_self â€“ VecFor"},{"text":"private elementalfunction self_mul_ScalI4P(self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I4P). Source Code elemental function self_mul_ScalI4P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (integer I4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalI4P","tags":"","loc":"proc/self_mul_scali4p.html","title":"self_mul_ScalI4P â€“ VecFor"},{"text":"private elementalfunction ScalI2P_mul_self(scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I2P) for self. Source Code elemental function ScalI2P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (integer I2P) for self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI2P_mul_self","tags":"","loc":"proc/scali2p_mul_self.html","title":"ScalI2P_mul_self â€“ VecFor"},{"text":"private elementalfunction self_mul_ScalI2P(self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I2P). Source Code elemental function self_mul_ScalI2P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (integer I2P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalI2P","tags":"","loc":"proc/self_mul_scali2p.html","title":"self_mul_ScalI2P â€“ VecFor"},{"text":"private elementalfunction ScalI1P_mul_self(scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I1P) for self. Source Code elemental function ScalI1P_mul_self ( scal , self ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply scalar (integer I1P) for self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI1P_mul_self","tags":"","loc":"proc/scali1p_mul_self.html","title":"ScalI1P_mul_self â€“ VecFor"},{"text":"private elementalfunction self_mul_ScalI1P(self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I1P). Source Code elemental function self_mul_ScalI1P ( self , scal ) result ( mul ) !--------------------------------------------------------------------------------------------------------------------------------- !< Multiply self for scalar (integer I1P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal type ( Vector ) :: mul !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- mul % x = real ( scal , R8P ) * self % x mul % y = real ( scal , R8P ) * self % y mul % z = real ( scal , R8P ) * self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_mul_ScalI1P","tags":"","loc":"proc/self_mul_scali1p.html","title":"self_mul_ScalI1P â€“ VecFor"},{"text":"private elementalfunction self_div_self(self1, self2) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Divide self for self. Source Code elemental function self_div_self ( self1 , self2 ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self1 % x / self2 % x div % y = self1 % y / self2 % y div % z = self1 % z / self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_self","tags":"","loc":"proc/self_div_self.html","title":"self_div_self â€“ VecFor"},{"text":"private elementalfunction self_div_ScalR16P(self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (real R16P). Source Code elemental function self_div_ScalR16P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (real R16P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalR16P","tags":"","loc":"proc/self_div_scalr16p.html","title":"self_div_ScalR16P â€“ VecFor"},{"text":"private elementalfunction self_div_ScalR8P(self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (real R8P). Source Code elemental function self_div_ScalR8P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (real R8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalR8P","tags":"","loc":"proc/self_div_scalr8p.html","title":"self_div_ScalR8P â€“ VecFor"},{"text":"private elementalfunction self_div_ScalR4P(self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (real R4P). Source Code elemental function self_div_ScalR4P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (real R4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalR4P","tags":"","loc":"proc/self_div_scalr4p.html","title":"self_div_ScalR4P â€“ VecFor"},{"text":"private elementalfunction self_div_ScalI8P(self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I8P). Source Code elemental function self_div_ScalI8P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (integer I8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalI8P","tags":"","loc":"proc/self_div_scali8p.html","title":"self_div_ScalI8P â€“ VecFor"},{"text":"private elementalfunction self_div_ScalI4P(self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I4P). Source Code elemental function self_div_ScalI4P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (integer I4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalI4P","tags":"","loc":"proc/self_div_scali4p.html","title":"self_div_ScalI4P â€“ VecFor"},{"text":"private elementalfunction self_div_ScalI2P(self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I2P). Source Code elemental function self_div_ScalI2P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (integer I2P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalI2P","tags":"","loc":"proc/self_div_scali2p.html","title":"self_div_ScalI2P â€“ VecFor"},{"text":"private elementalfunction self_div_ScalI1P(self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I1P). Source Code elemental function self_div_ScalI1P ( self , scal ) result ( div ) !--------------------------------------------------------------------------------------------------------------------------------- !< Divide self for scalar (integer I1P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal type ( Vector ) :: div !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- div % x = self % x / real ( scal , R8P ) div % y = self % y / real ( scal , R8P ) div % z = self % z / real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_div_ScalI1P","tags":"","loc":"proc/self_div_scali1p.html","title":"self_div_ScalI1P â€“ VecFor"},{"text":"private elementalfunction positive_self(self) result(pos) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self Return Value type( Vector ) Description Applay unary + to a self. Source Code elemental function positive_self ( self ) result ( pos ) !--------------------------------------------------------------------------------------------------------------------------------- !< Applay unary + to a self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self type ( Vector ) :: pos !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- pos % x = + self % x pos % y = + self % y pos % z = + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction positive_self","tags":"","loc":"proc/positive_self.html","title":"positive_self â€“ VecFor"},{"text":"private elementalfunction self_sum_self(self1, self2) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Sum self and self. Source Code elemental function self_sum_self ( self1 , self2 ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = self1 % x + self2 % x summ % y = self1 % y + self2 % y summ % z = self1 % z + self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_self","tags":"","loc":"proc/self_sum_self.html","title":"self_sum_self â€“ VecFor"},{"text":"private elementalfunction ScalR16P_sum_self(scal, self) result(summ) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (real R16P) and self. Source Code elemental function ScalR16P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (real R16P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR16P_sum_self","tags":"","loc":"proc/scalr16p_sum_self.html","title":"ScalR16P_sum_self â€“ VecFor"},{"text":"private elementalfunction self_sum_ScalR16P(self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (real R16P). Source Code elemental function self_sum_ScalR16P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (real R16P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalR16P","tags":"","loc":"proc/self_sum_scalr16p.html","title":"self_sum_ScalR16P â€“ VecFor"},{"text":"private elementalfunction ScalR8P_sum_self(scal, self) result(summ) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (real R8P) and self. Source Code elemental function ScalR8P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (real R8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR8P_sum_self","tags":"","loc":"proc/scalr8p_sum_self.html","title":"ScalR8P_sum_self â€“ VecFor"},{"text":"private elementalfunction self_sum_ScalR8P(self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (real R8P). Source Code elemental function self_sum_ScalR8P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (real R8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalR8P","tags":"","loc":"proc/self_sum_scalr8p.html","title":"self_sum_ScalR8P â€“ VecFor"},{"text":"private elementalfunction ScalR4P_sum_self(scal, self) result(summ) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (real R4P) and self. Source Code elemental function ScalR4P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (real R4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR4P_sum_self","tags":"","loc":"proc/scalr4p_sum_self.html","title":"ScalR4P_sum_self â€“ VecFor"},{"text":"private elementalfunction self_sum_ScalR4P(self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (real R4P). Source Code elemental function self_sum_ScalR4P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (real R4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalR4P","tags":"","loc":"proc/self_sum_scalr4p.html","title":"self_sum_ScalR4P â€“ VecFor"},{"text":"private elementalfunction ScalI8P_sum_self(scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I8P) and self. Source Code elemental function ScalI8P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (integer I8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI8P_sum_self","tags":"","loc":"proc/scali8p_sum_self.html","title":"ScalI8P_sum_self â€“ VecFor"},{"text":"private elementalfunction self_sum_ScalI8P(self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I8P). Source Code elemental function self_sum_ScalI8P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (integer I8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalI8P","tags":"","loc":"proc/self_sum_scali8p.html","title":"self_sum_ScalI8P â€“ VecFor"},{"text":"private elementalfunction ScalI4P_sum_self(scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I4P) and self. Source Code elemental function ScalI4P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (integer I4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI4P_sum_self","tags":"","loc":"proc/scali4p_sum_self.html","title":"ScalI4P_sum_self â€“ VecFor"},{"text":"private elementalfunction self_sum_ScalI4P(self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I4P). Source Code elemental function self_sum_ScalI4P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (integer I4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalI4P","tags":"","loc":"proc/self_sum_scali4p.html","title":"self_sum_ScalI4P â€“ VecFor"},{"text":"private elementalfunction ScalI2P_sum_self(scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I2P) and self. Source Code elemental function ScalI2P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (integer I2P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI2P_sum_self","tags":"","loc":"proc/scali2p_sum_self.html","title":"ScalI2P_sum_self â€“ VecFor"},{"text":"private elementalfunction self_sum_ScalI2P(self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I2P). Source Code elemental function self_sum_ScalI2P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (integer I2P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalI2P","tags":"","loc":"proc/self_sum_scali2p.html","title":"self_sum_ScalI2P â€“ VecFor"},{"text":"private elementalfunction ScalI1P_sum_self(scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I1P) and self. Source Code elemental function ScalI1P_sum_self ( scal , self ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum scalar (integer I1P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI1P_sum_self","tags":"","loc":"proc/scali1p_sum_self.html","title":"ScalI1P_sum_self â€“ VecFor"},{"text":"private elementalfunction self_sum_ScalI1P(self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I1P). Source Code elemental function self_sum_ScalI1P ( self , scal ) result ( summ ) !--------------------------------------------------------------------------------------------------------------------------------- !< Sum self and scalar (integer I1P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal type ( Vector ) :: summ !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- summ % x = real ( scal , R8P ) + self % x summ % y = real ( scal , R8P ) + self % y summ % z = real ( scal , R8P ) + self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sum_ScalI1P","tags":"","loc":"proc/self_sum_scali1p.html","title":"self_sum_ScalI1P â€“ VecFor"},{"text":"private elementalfunction negative_self(self) result(neg) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self Return Value type( Vector ) Description Applay unary - to a self. Source Code elemental function negative_self ( self ) result ( neg ) !--------------------------------------------------------------------------------------------------------------------------------- !< Applay unary - to a self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self type ( Vector ) :: neg !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- neg % x = - self % x neg % y = - self % y neg % z = - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction negative_self","tags":"","loc":"proc/negative_self.html","title":"negative_self â€“ VecFor"},{"text":"private elementalfunction self_sub_self(self1, self2) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Subtract self and self. Source Code elemental function self_sub_self ( self1 , self2 ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self1 % x - self2 % x sub % y = self1 % y - self2 % y sub % z = self1 % z - self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_self","tags":"","loc":"proc/self_sub_self.html","title":"self_sub_self â€“ VecFor"},{"text":"private elementalfunction ScalR16P_sub_self(scal, self) result(sub) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (real R16P) and self. Source Code elemental function ScalR16P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (real R16P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR16P_sub_self","tags":"","loc":"proc/scalr16p_sub_self.html","title":"ScalR16P_sub_self â€“ VecFor"},{"text":"private elementalfunction self_sub_ScalR16P(self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (real R16P). Source Code elemental function self_sub_ScalR16P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (real R16P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalR16P","tags":"","loc":"proc/self_sub_scalr16p.html","title":"self_sub_ScalR16P â€“ VecFor"},{"text":"private elementalfunction ScalR8P_sub_self(scal, self) result(sub) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (real R8P) and self. Source Code elemental function ScalR8P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (real R8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR8P_sub_self","tags":"","loc":"proc/scalr8p_sub_self.html","title":"ScalR8P_sub_self â€“ VecFor"},{"text":"private elementalfunction self_sub_ScalR8P(self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (real R8P). Source Code elemental function self_sub_ScalR8P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (real R8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalR8P","tags":"","loc":"proc/self_sub_scalr8p.html","title":"self_sub_ScalR8P â€“ VecFor"},{"text":"private elementalfunction ScalR4P_sub_self(scal, self) result(sub) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (real R4P) and self. Source Code elemental function ScalR4P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (real R4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalR4P_sub_self","tags":"","loc":"proc/scalr4p_sub_self.html","title":"ScalR4P_sub_self â€“ VecFor"},{"text":"private elementalfunction self_sub_ScalR4P(self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (real R4P). Source Code elemental function self_sub_ScalR4P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (real R4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalR4P","tags":"","loc":"proc/self_sub_scalr4p.html","title":"self_sub_ScalR4P â€“ VecFor"},{"text":"private elementalfunction ScalI8P_sub_self(scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I8P) and self. Source Code elemental function ScalI8P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (integer I8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI8P_sub_self","tags":"","loc":"proc/scali8p_sub_self.html","title":"ScalI8P_sub_self â€“ VecFor"},{"text":"private elementalfunction self_sub_ScalI8P(self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I8P). Source Code elemental function self_sub_ScalI8P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (integer I8P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalI8P","tags":"","loc":"proc/self_sub_scali8p.html","title":"self_sub_ScalI8P â€“ VecFor"},{"text":"private elementalfunction ScalI4P_sub_self(scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I4P) and self. Source Code elemental function ScalI4P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (integer I4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI4P_sub_self","tags":"","loc":"proc/scali4p_sub_self.html","title":"ScalI4P_sub_self â€“ VecFor"},{"text":"private elementalfunction self_sub_ScalI4P(self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I4P). Source Code elemental function self_sub_ScalI4P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (integer I4P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalI4P","tags":"","loc":"proc/self_sub_scali4p.html","title":"self_sub_ScalI4P â€“ VecFor"},{"text":"private elementalfunction ScalI2P_sub_self(scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I2P) and self. Source Code elemental function ScalI2P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (integer I2P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI2P_sub_self","tags":"","loc":"proc/scali2p_sub_self.html","title":"ScalI2P_sub_self â€“ VecFor"},{"text":"private elementalfunction self_sub_ScalI2P(self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I2P). Source Code elemental function self_sub_ScalI2P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (integer I2P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalI2P","tags":"","loc":"proc/self_sub_scali2p.html","title":"self_sub_ScalI2P â€“ VecFor"},{"text":"private elementalfunction ScalI1P_sub_self(scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I1P) and self. Source Code elemental function ScalI1P_sub_self ( scal , self ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract scalar (integer I1P) and self. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = real ( scal , R8P ) - self % x sub % y = real ( scal , R8P ) - self % y sub % z = real ( scal , R8P ) - self % z return !--------------------------------------------------------------------------------------------------------------------------------- endfunction ScalI1P_sub_self","tags":"","loc":"proc/scali1p_sub_self.html","title":"ScalI1P_sub_self â€“ VecFor"},{"text":"private elementalfunction self_sub_ScalI1P(self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I1P). Source Code elemental function self_sub_ScalI1P ( self , scal ) result ( sub ) !--------------------------------------------------------------------------------------------------------------------------------- !< Subtract self and scalar (integer I1P). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal type ( Vector ) :: sub !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- sub % x = self % x - real ( scal , R8P ) sub % y = self % y - real ( scal , R8P ) sub % z = self % z - real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_sub_ScalI1P","tags":"","loc":"proc/self_sub_scali1p.html","title":"self_sub_ScalI1P â€“ VecFor"},{"text":"private elementalfunction self_not_eq_self(self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 First selftor. type( Vector ), intent(in) :: self2 Second selftor. Return Value logical The result of the comparison. Description Return .true. if the normL2 of the self1 is /= with respect the normL2 of self2 or if the directions of self1\n and self2 are different, .false. otherwise. Calls proc~~self_not_eq_self~~CallsGraph proc~self_not_eq_self self_not_eq_self proc~normalize normalize proc~self_not_eq_self->proc~normalize proc~norml2 normL2 proc~self_not_eq_self->proc~norml2 proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( Vector ), public :: n1 Normalizations of self1. type( Vector ), public :: n2 Normalizations of self2. Source Code elemental function self_not_eq_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is /= with respect the normL2 of self2 or if the directions of self1 !< and self2 are different, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 !< First selftor. type ( Vector ), intent ( IN ) :: self2 !< Second selftor. logical :: compare !< The result of the comparison. type ( Vector ) :: n1 !< Normalizations of self1. type ( Vector ) :: n2 !< Normalizations of self2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) /= normL2 ( self2 )) if (. not . compare ) then ! the normL2 are the same, checking the directions n1 = normalize ( self1 ) n2 = normalize ( self2 ) compare = (( n1 % x /= n2 % x ). OR .( n1 % y /= n2 % y ). OR .( n1 % z /= n2 % z )) endif return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_self","tags":"","loc":"proc/self_not_eq_self.html","title":"self_not_eq_self â€“ VecFor"},{"text":"private elementalfunction R16P_not_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~r16p_not_eq_self~~CallsGraph proc~r16p_not_eq_self R16P_not_eq_self proc~norml2 normL2 proc~r16p_not_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R16P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_not_eq_self","tags":"","loc":"proc/r16p_not_eq_self.html","title":"R16P_not_eq_self â€“ VecFor"},{"text":"private elementalfunction self_not_eq_R16P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~self_not_eq_r16p~~CallsGraph proc~self_not_eq_r16p self_not_eq_R16P proc~norml2 normL2 proc~self_not_eq_r16p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_not_eq_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_R16P","tags":"","loc":"proc/self_not_eq_r16p.html","title":"self_not_eq_R16P â€“ VecFor"},{"text":"private elementalfunction R8P_not_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~r8p_not_eq_self~~CallsGraph proc~r8p_not_eq_self R8P_not_eq_self proc~norml2 normL2 proc~r8p_not_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R8P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_not_eq_self","tags":"","loc":"proc/r8p_not_eq_self.html","title":"R8P_not_eq_self â€“ VecFor"},{"text":"private elementalfunction self_not_eq_R8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~self_not_eq_r8p~~CallsGraph proc~self_not_eq_r8p self_not_eq_R8P proc~norml2 normL2 proc~self_not_eq_r8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_not_eq_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_R8P","tags":"","loc":"proc/self_not_eq_r8p.html","title":"self_not_eq_R8P â€“ VecFor"},{"text":"private elementalfunction R4P_not_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~r4p_not_eq_self~~CallsGraph proc~r4p_not_eq_self R4P_not_eq_self proc~norml2 normL2 proc~r4p_not_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R4P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_not_eq_self","tags":"","loc":"proc/r4p_not_eq_self.html","title":"R4P_not_eq_self â€“ VecFor"},{"text":"private elementalfunction self_not_eq_R4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~self_not_eq_r4p~~CallsGraph proc~self_not_eq_r4p self_not_eq_R4P proc~norml2 normL2 proc~self_not_eq_r4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_not_eq_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_R4P","tags":"","loc":"proc/self_not_eq_r4p.html","title":"self_not_eq_R4P â€“ VecFor"},{"text":"private elementalfunction I8P_not_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~i8p_not_eq_self~~CallsGraph proc~i8p_not_eq_self I8P_not_eq_self proc~norml2 normL2 proc~i8p_not_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I8P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_not_eq_self","tags":"","loc":"proc/i8p_not_eq_self.html","title":"I8P_not_eq_self â€“ VecFor"},{"text":"private elementalfunction self_not_eq_I8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~self_not_eq_i8p~~CallsGraph proc~self_not_eq_i8p self_not_eq_I8P proc~norml2 normL2 proc~self_not_eq_i8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_not_eq_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_I8P","tags":"","loc":"proc/self_not_eq_i8p.html","title":"self_not_eq_I8P â€“ VecFor"},{"text":"private elementalfunction I4P_not_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~i4p_not_eq_self~~CallsGraph proc~i4p_not_eq_self I4P_not_eq_self proc~norml2 normL2 proc~i4p_not_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I4P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_not_eq_self","tags":"","loc":"proc/i4p_not_eq_self.html","title":"I4P_not_eq_self â€“ VecFor"},{"text":"private elementalfunction self_not_eq_I4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~self_not_eq_i4p~~CallsGraph proc~self_not_eq_i4p self_not_eq_I4P proc~norml2 normL2 proc~self_not_eq_i4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_not_eq_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_I4P","tags":"","loc":"proc/self_not_eq_i4p.html","title":"self_not_eq_I4P â€“ VecFor"},{"text":"private elementalfunction I2P_not_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~i2p_not_eq_self~~CallsGraph proc~i2p_not_eq_self I2P_not_eq_self proc~norml2 normL2 proc~i2p_not_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I2P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_not_eq_self","tags":"","loc":"proc/i2p_not_eq_self.html","title":"I2P_not_eq_self â€“ VecFor"},{"text":"private elementalfunction self_not_eq_I2P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~self_not_eq_i2p~~CallsGraph proc~self_not_eq_i2p self_not_eq_I2P proc~norml2 normL2 proc~self_not_eq_i2p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_not_eq_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_I2P","tags":"","loc":"proc/self_not_eq_i2p.html","title":"self_not_eq_I2P â€“ VecFor"},{"text":"private elementalfunction I1P_not_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~i1p_not_eq_self~~CallsGraph proc~i1p_not_eq_self I1P_not_eq_self proc~norml2 normL2 proc~i1p_not_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I1P_not_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_not_eq_self","tags":"","loc":"proc/i1p_not_eq_self.html","title":"I1P_not_eq_self â€“ VecFor"},{"text":"private elementalfunction self_not_eq_I1P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. Calls proc~~self_not_eq_i1p~~CallsGraph proc~self_not_eq_i1p self_not_eq_I1P proc~norml2 normL2 proc~self_not_eq_i1p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_not_eq_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) /= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_not_eq_I1P","tags":"","loc":"proc/self_not_eq_i1p.html","title":"self_not_eq_I1P â€“ VecFor"},{"text":"private elementalfunction self_low_self(self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the normL2 of self2, .false. otherwise. Calls proc~~self_low_self~~CallsGraph proc~self_low_self self_low_self proc~norml2 normL2 proc~self_low_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the normL2 of self2, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 type ( Vector ), intent ( IN ) :: self2 logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) < normL2 ( self2 )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_self","tags":"","loc":"proc/self_low_self.html","title":"self_low_self â€“ VecFor"},{"text":"private elementalfunction R16P_low_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~r16p_low_self~~CallsGraph proc~r16p_low_self R16P_low_self proc~norml2 normL2 proc~r16p_low_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R16P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_low_self","tags":"","loc":"proc/r16p_low_self.html","title":"R16P_low_self â€“ VecFor"},{"text":"private elementalfunction self_low_R16P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_r16p~~CallsGraph proc~self_low_r16p self_low_R16P proc~norml2 normL2 proc~self_low_r16p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R16P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_R16P","tags":"","loc":"proc/self_low_r16p.html","title":"self_low_R16P â€“ VecFor"},{"text":"private elementalfunction R8P_low_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~r8p_low_self~~CallsGraph proc~r8p_low_self R8P_low_self proc~norml2 normL2 proc~r8p_low_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R8P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_low_self","tags":"","loc":"proc/r8p_low_self.html","title":"R8P_low_self â€“ VecFor"},{"text":"private elementalfunction self_low_R8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_r8p~~CallsGraph proc~self_low_r8p self_low_R8P proc~norml2 normL2 proc~self_low_r8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R8P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_R8P","tags":"","loc":"proc/self_low_r8p.html","title":"self_low_R8P â€“ VecFor"},{"text":"private elementalfunction R4P_low_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~r4p_low_self~~CallsGraph proc~r4p_low_self R4P_low_self proc~norml2 normL2 proc~r4p_low_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R4P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_low_self","tags":"","loc":"proc/r4p_low_self.html","title":"R4P_low_self â€“ VecFor"},{"text":"private elementalfunction self_low_R4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_r4p~~CallsGraph proc~self_low_r4p self_low_R4P proc~norml2 normL2 proc~self_low_r4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self real ( R4P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_R4P","tags":"","loc":"proc/self_low_r4p.html","title":"self_low_R4P â€“ VecFor"},{"text":"private elementalfunction I8P_low_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~i8p_low_self~~CallsGraph proc~i8p_low_self I8P_low_self proc~norml2 normL2 proc~i8p_low_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I8P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_low_self","tags":"","loc":"proc/i8p_low_self.html","title":"I8P_low_self â€“ VecFor"},{"text":"private elementalfunction self_low_I8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_i8p~~CallsGraph proc~self_low_i8p self_low_I8P proc~norml2 normL2 proc~self_low_i8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I8P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_I8P","tags":"","loc":"proc/self_low_i8p.html","title":"self_low_I8P â€“ VecFor"},{"text":"private elementalfunction I4P_low_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~i4p_low_self~~CallsGraph proc~i4p_low_self I4P_low_self proc~norml2 normL2 proc~i4p_low_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I4P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_low_self","tags":"","loc":"proc/i4p_low_self.html","title":"I4P_low_self â€“ VecFor"},{"text":"private elementalfunction self_low_I4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_i4p~~CallsGraph proc~self_low_i4p self_low_I4P proc~norml2 normL2 proc~self_low_i4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I4P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_I4P","tags":"","loc":"proc/self_low_i4p.html","title":"self_low_I4P â€“ VecFor"},{"text":"private elementalfunction I2P_low_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~i2p_low_self~~CallsGraph proc~i2p_low_self I2P_low_self proc~norml2 normL2 proc~i2p_low_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I2P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_low_self","tags":"","loc":"proc/i2p_low_self.html","title":"I2P_low_self â€“ VecFor"},{"text":"private elementalfunction self_low_I2P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_i2p~~CallsGraph proc~self_low_i2p self_low_I2P proc~norml2 normL2 proc~self_low_i2p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I2P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_I2P","tags":"","loc":"proc/self_low_i2p.html","title":"self_low_I2P â€“ VecFor"},{"text":"private elementalfunction I1P_low_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~i1p_low_self~~CallsGraph proc~i1p_low_self I1P_low_self proc~norml2 normL2 proc~i1p_low_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I1P_low_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal class ( Vector ), intent ( IN ) :: self logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) < normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_low_self","tags":"","loc":"proc/i1p_low_self.html","title":"I1P_low_self â€“ VecFor"},{"text":"private elementalfunction self_low_I1P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_i1p~~CallsGraph proc~self_low_i1p self_low_I1P proc~norml2 normL2 proc~self_low_i1p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self integer ( I1P ), intent ( IN ) :: scal logical :: compare !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) < real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_I1P","tags":"","loc":"proc/self_low_i1p.html","title":"self_low_I1P â€“ VecFor"},{"text":"private elementalfunction self_low_eq_self(self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the normL2 of self2, .false. otherwise. Calls proc~~self_low_eq_self~~CallsGraph proc~self_low_eq_self self_low_eq_self proc~norml2 normL2 proc~self_low_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_eq_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the normL2 of self2, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 ! First selftor. type ( Vector ), intent ( IN ) :: self2 ! Second selftor. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) <= normL2 ( self2 )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_self","tags":"","loc":"proc/self_low_eq_self.html","title":"self_low_eq_self â€“ VecFor"},{"text":"private elementalfunction R16P_low_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~r16p_low_eq_self~~CallsGraph proc~r16p_low_eq_self R16P_low_eq_self proc~norml2 normL2 proc~r16p_low_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R16P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_low_eq_self","tags":"","loc":"proc/r16p_low_eq_self.html","title":"R16P_low_eq_self â€“ VecFor"},{"text":"private elementalfunction self_low_eq_R16P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_eq_r16p~~CallsGraph proc~self_low_eq_r16p self_low_eq_R16P proc~norml2 normL2 proc~self_low_eq_r16p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_eq_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R16P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_R16P","tags":"","loc":"proc/self_low_eq_r16p.html","title":"self_low_eq_R16P â€“ VecFor"},{"text":"private elementalfunction R8P_low_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~r8p_low_eq_self~~CallsGraph proc~r8p_low_eq_self R8P_low_eq_self proc~norml2 normL2 proc~r8p_low_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R8P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_low_eq_self","tags":"","loc":"proc/r8p_low_eq_self.html","title":"R8P_low_eq_self â€“ VecFor"},{"text":"private elementalfunction self_low_eq_R8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_eq_r8p~~CallsGraph proc~self_low_eq_r8p self_low_eq_R8P proc~norml2 normL2 proc~self_low_eq_r8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_eq_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_R8P","tags":"","loc":"proc/self_low_eq_r8p.html","title":"self_low_eq_R8P â€“ VecFor"},{"text":"private elementalfunction R4P_low_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~r4p_low_eq_self~~CallsGraph proc~r4p_low_eq_self R4P_low_eq_self proc~norml2 normL2 proc~r4p_low_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R4P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_low_eq_self","tags":"","loc":"proc/r4p_low_eq_self.html","title":"R4P_low_eq_self â€“ VecFor"},{"text":"private elementalfunction self_low_eq_R4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_eq_r4p~~CallsGraph proc~self_low_eq_r4p self_low_eq_R4P proc~norml2 normL2 proc~self_low_eq_r4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_eq_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_R4P","tags":"","loc":"proc/self_low_eq_r4p.html","title":"self_low_eq_R4P â€“ VecFor"},{"text":"private elementalfunction I8P_low_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~i8p_low_eq_self~~CallsGraph proc~i8p_low_eq_self I8P_low_eq_self proc~norml2 normL2 proc~i8p_low_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I8P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_low_eq_self","tags":"","loc":"proc/i8p_low_eq_self.html","title":"I8P_low_eq_self â€“ VecFor"},{"text":"private elementalfunction self_low_eq_I8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_eq_i8p~~CallsGraph proc~self_low_eq_i8p self_low_eq_I8P proc~norml2 normL2 proc~self_low_eq_i8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_eq_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_I8P","tags":"","loc":"proc/self_low_eq_i8p.html","title":"self_low_eq_I8P â€“ VecFor"},{"text":"private elementalfunction I4P_low_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~i4p_low_eq_self~~CallsGraph proc~i4p_low_eq_self I4P_low_eq_self proc~norml2 normL2 proc~i4p_low_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I4P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_low_eq_self","tags":"","loc":"proc/i4p_low_eq_self.html","title":"I4P_low_eq_self â€“ VecFor"},{"text":"private elementalfunction self_low_eq_I4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_eq_i4p~~CallsGraph proc~self_low_eq_i4p self_low_eq_I4P proc~norml2 normL2 proc~self_low_eq_i4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_eq_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_I4P","tags":"","loc":"proc/self_low_eq_i4p.html","title":"self_low_eq_I4P â€“ VecFor"},{"text":"private elementalfunction I2P_low_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~i2p_low_eq_self~~CallsGraph proc~i2p_low_eq_self I2P_low_eq_self proc~norml2 normL2 proc~i2p_low_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I2P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_low_eq_self","tags":"","loc":"proc/i2p_low_eq_self.html","title":"I2P_low_eq_self â€“ VecFor"},{"text":"private elementalfunction self_low_eq_I2P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_eq_i2p~~CallsGraph proc~self_low_eq_i2p self_low_eq_I2P proc~norml2 normL2 proc~self_low_eq_i2p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_eq_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I2P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_I2P","tags":"","loc":"proc/self_low_eq_i2p.html","title":"self_low_eq_I2P â€“ VecFor"},{"text":"private elementalfunction I1P_low_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~i1p_low_eq_self~~CallsGraph proc~i1p_low_eq_self I1P_low_eq_self proc~norml2 normL2 proc~i1p_low_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I1P_low_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) <= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_low_eq_self","tags":"","loc":"proc/i1p_low_eq_self.html","title":"I1P_low_eq_self â€“ VecFor"},{"text":"private elementalfunction self_low_eq_I1P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_low_eq_i1p~~CallsGraph proc~self_low_eq_i1p self_low_eq_I1P proc~norml2 normL2 proc~self_low_eq_i1p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_low_eq_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I1P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) <= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_low_eq_I1P","tags":"","loc":"proc/self_low_eq_i1p.html","title":"self_low_eq_I1P â€“ VecFor"},{"text":"private elementalfunction self_eq_self(self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 Return .true. if the normL2 of the self1 is = with respect the normL2 of self2 and the directions of\n self1 and self2 are the same, .false. otherwise. type( Vector ), intent(in) :: self2 Return Value logical Calls proc~~self_eq_self~~CallsGraph proc~self_eq_self self_eq_self proc~normalize normalize proc~self_eq_self->proc~normalize proc~norml2 normL2 proc~self_eq_self->proc~norml2 proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( Vector ), public :: n1 type( Vector ), public :: n2 Source Code elemental function self_eq_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !> Return .true. if the normL2 of the self1 is = with respect the normL2 of self2 and the directions of !> self1 and self2 are the same, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 ! First selftor. type ( Vector ), intent ( IN ) :: self2 ! Second selftor. logical :: compare ! The result of the comparison. type ( Vector ) :: n1 ! Normalizations of self1. type ( Vector ) :: n2 ! Normalizations of self2. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) == normL2 ( self2 )) if ( compare ) then ! the normL2 are the same, checking the directions n1 = normalize ( self1 ) n2 = normalize ( self2 ) compare = (( n1 % x == n2 % x ). AND .( n1 % y == n2 % y ). AND .( n1 % z == n2 % z )) endif return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_self","tags":"","loc":"proc/self_eq_self.html","title":"self_eq_self â€“ VecFor"},{"text":"private elementalfunction R16P_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~r16p_eq_self~~CallsGraph proc~r16p_eq_self R16P_eq_self proc~norml2 normL2 proc~r16p_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R16P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_eq_self","tags":"","loc":"proc/r16p_eq_self.html","title":"R16P_eq_self â€“ VecFor"},{"text":"private elementalfunction self_eq_R16P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~self_eq_r16p~~CallsGraph proc~self_eq_r16p self_eq_R16P proc~norml2 normL2 proc~self_eq_r16p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_eq_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R16P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_R16P","tags":"","loc":"proc/self_eq_r16p.html","title":"self_eq_R16P â€“ VecFor"},{"text":"private elementalfunction R8P_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~r8p_eq_self~~CallsGraph proc~r8p_eq_self R8P_eq_self proc~norml2 normL2 proc~r8p_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R8P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_eq_self","tags":"","loc":"proc/r8p_eq_self.html","title":"R8P_eq_self â€“ VecFor"},{"text":"private elementalfunction self_eq_R8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~self_eq_r8p~~CallsGraph proc~self_eq_r8p self_eq_R8P proc~norml2 normL2 proc~self_eq_r8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_eq_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_R8P","tags":"","loc":"proc/self_eq_r8p.html","title":"self_eq_R8P â€“ VecFor"},{"text":"private elementalfunction R4P_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~r4p_eq_self~~CallsGraph proc~r4p_eq_self R4P_eq_self proc~norml2 normL2 proc~r4p_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R4P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_eq_self","tags":"","loc":"proc/r4p_eq_self.html","title":"R4P_eq_self â€“ VecFor"},{"text":"private elementalfunction self_eq_R4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~self_eq_r4p~~CallsGraph proc~self_eq_r4p self_eq_R4P proc~norml2 normL2 proc~self_eq_r4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_eq_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_R4P","tags":"","loc":"proc/self_eq_r4p.html","title":"self_eq_R4P â€“ VecFor"},{"text":"private elementalfunction I8P_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~i8p_eq_self~~CallsGraph proc~i8p_eq_self I8P_eq_self proc~norml2 normL2 proc~i8p_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I8P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_eq_self","tags":"","loc":"proc/i8p_eq_self.html","title":"I8P_eq_self â€“ VecFor"},{"text":"private elementalfunction self_eq_I8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~self_eq_i8p~~CallsGraph proc~self_eq_i8p self_eq_I8P proc~norml2 normL2 proc~self_eq_i8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_eq_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_I8P","tags":"","loc":"proc/self_eq_i8p.html","title":"self_eq_I8P â€“ VecFor"},{"text":"private elementalfunction I4P_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description @brief Procedure returns .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~i4p_eq_self~~CallsGraph proc~i4p_eq_self I4P_eq_self proc~norml2 normL2 proc~i4p_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I4P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< @brief Procedure returns .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_eq_self","tags":"","loc":"proc/i4p_eq_self.html","title":"I4P_eq_self â€“ VecFor"},{"text":"private elementalfunction self_eq_I4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~self_eq_i4p~~CallsGraph proc~self_eq_i4p self_eq_I4P proc~norml2 normL2 proc~self_eq_i4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_eq_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_I4P","tags":"","loc":"proc/self_eq_i4p.html","title":"self_eq_I4P â€“ VecFor"},{"text":"private elementalfunction I2P_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~i2p_eq_self~~CallsGraph proc~i2p_eq_self I2P_eq_self proc~norml2 normL2 proc~i2p_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I2P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_eq_self","tags":"","loc":"proc/i2p_eq_self.html","title":"I2P_eq_self â€“ VecFor"},{"text":"private elementalfunction self_eq_I2P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~self_eq_i2p~~CallsGraph proc~self_eq_i2p self_eq_I2P proc~norml2 normL2 proc~self_eq_i2p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_eq_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I2P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_I2P","tags":"","loc":"proc/self_eq_i2p.html","title":"self_eq_I2P â€“ VecFor"},{"text":"private elementalfunction I1P_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~i1p_eq_self~~CallsGraph proc~i1p_eq_self I1P_eq_self proc~norml2 normL2 proc~i1p_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I1P_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_eq_self","tags":"","loc":"proc/i1p_eq_self.html","title":"I1P_eq_self â€“ VecFor"},{"text":"private elementalfunction self_eq_I1P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. Calls proc~~self_eq_i1p~~CallsGraph proc~self_eq_i1p self_eq_I1P proc~norml2 normL2 proc~self_eq_i1p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_eq_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I1P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) == real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_eq_I1P","tags":"","loc":"proc/self_eq_i1p.html","title":"self_eq_I1P â€“ VecFor"},{"text":"private elementalfunction self_great_eq_self(self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the normL2 of self2, .false. otherwise. Calls proc~~self_great_eq_self~~CallsGraph proc~self_great_eq_self self_great_eq_self proc~norml2 normL2 proc~self_great_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_eq_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the normL2 of self2, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 ! First selftor. type ( Vector ), intent ( IN ) :: self2 ! Second selftor. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) >= normL2 ( self2 )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_self","tags":"","loc":"proc/self_great_eq_self.html","title":"self_great_eq_self â€“ VecFor"},{"text":"private elementalfunction R16P_great_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~r16p_great_eq_self~~CallsGraph proc~r16p_great_eq_self R16P_great_eq_self proc~norml2 normL2 proc~r16p_great_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R16P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_great_eq_self","tags":"","loc":"proc/r16p_great_eq_self.html","title":"R16P_great_eq_self â€“ VecFor"},{"text":"private elementalfunction self_great_eq_R16P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_eq_r16p~~CallsGraph proc~self_great_eq_r16p self_great_eq_R16P proc~norml2 normL2 proc~self_great_eq_r16p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_eq_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R16P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_R16P","tags":"","loc":"proc/self_great_eq_r16p.html","title":"self_great_eq_R16P â€“ VecFor"},{"text":"private elementalfunction R8P_great_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~r8p_great_eq_self~~CallsGraph proc~r8p_great_eq_self R8P_great_eq_self proc~norml2 normL2 proc~r8p_great_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R8P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_great_eq_self","tags":"","loc":"proc/r8p_great_eq_self.html","title":"R8P_great_eq_self â€“ VecFor"},{"text":"private elementalfunction self_great_eq_R8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_eq_r8p~~CallsGraph proc~self_great_eq_r8p self_great_eq_R8P proc~norml2 normL2 proc~self_great_eq_r8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_eq_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_R8P","tags":"","loc":"proc/self_great_eq_r8p.html","title":"self_great_eq_R8P â€“ VecFor"},{"text":"private elementalfunction R4P_great_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~r4p_great_eq_self~~CallsGraph proc~r4p_great_eq_self R4P_great_eq_self proc~norml2 normL2 proc~r4p_great_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R4P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_great_eq_self","tags":"","loc":"proc/r4p_great_eq_self.html","title":"R4P_great_eq_self â€“ VecFor"},{"text":"private elementalfunction self_great_eq_R4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_eq_r4p~~CallsGraph proc~self_great_eq_r4p self_great_eq_R4P proc~norml2 normL2 proc~self_great_eq_r4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_eq_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_R4P","tags":"","loc":"proc/self_great_eq_r4p.html","title":"self_great_eq_R4P â€“ VecFor"},{"text":"private elementalfunction I8P_great_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~i8p_great_eq_self~~CallsGraph proc~i8p_great_eq_self I8P_great_eq_self proc~norml2 normL2 proc~i8p_great_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I8P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_great_eq_self","tags":"","loc":"proc/i8p_great_eq_self.html","title":"I8P_great_eq_self â€“ VecFor"},{"text":"private elementalfunction self_great_eq_I8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_eq_i8p~~CallsGraph proc~self_great_eq_i8p self_great_eq_I8P proc~norml2 normL2 proc~self_great_eq_i8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_eq_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_I8P","tags":"","loc":"proc/self_great_eq_i8p.html","title":"self_great_eq_I8P â€“ VecFor"},{"text":"private elementalfunction I4P_great_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~i4p_great_eq_self~~CallsGraph proc~i4p_great_eq_self I4P_great_eq_self proc~norml2 normL2 proc~i4p_great_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I4P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_great_eq_self","tags":"","loc":"proc/i4p_great_eq_self.html","title":"I4P_great_eq_self â€“ VecFor"},{"text":"private elementalfunction self_great_eq_I4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_eq_i4p~~CallsGraph proc~self_great_eq_i4p self_great_eq_I4P proc~norml2 normL2 proc~self_great_eq_i4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_eq_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_I4P","tags":"","loc":"proc/self_great_eq_i4p.html","title":"self_great_eq_I4P â€“ VecFor"},{"text":"private elementalfunction I2P_great_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~i2p_great_eq_self~~CallsGraph proc~i2p_great_eq_self I2P_great_eq_self proc~norml2 normL2 proc~i2p_great_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I2P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_great_eq_self","tags":"","loc":"proc/i2p_great_eq_self.html","title":"I2P_great_eq_self â€“ VecFor"},{"text":"private elementalfunction self_great_eq_I2P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_eq_i2p~~CallsGraph proc~self_great_eq_i2p self_great_eq_I2P proc~norml2 normL2 proc~self_great_eq_i2p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_eq_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I2P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_I2P","tags":"","loc":"proc/self_great_eq_i2p.html","title":"self_great_eq_I2P â€“ VecFor"},{"text":"private elementalfunction I1P_great_eq_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~i1p_great_eq_self~~CallsGraph proc~i1p_great_eq_self I1P_great_eq_self proc~norml2 normL2 proc~i1p_great_eq_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I1P_great_eq_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) >= normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_great_eq_self","tags":"","loc":"proc/i1p_great_eq_self.html","title":"I1P_great_eq_self â€“ VecFor"},{"text":"private elementalfunction self_great_eq_I1P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_eq_i1p~~CallsGraph proc~self_great_eq_i1p self_great_eq_I1P proc~norml2 normL2 proc~self_great_eq_i1p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_eq_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I1P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) >= real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_eq_I1P","tags":"","loc":"proc/self_great_eq_i1p.html","title":"self_great_eq_I1P â€“ VecFor"},{"text":"private elementalfunction self_great_self(self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the normL2 of self2, .false. otherwise. Calls proc~~self_great_self~~CallsGraph proc~self_great_self self_great_self proc~norml2 normL2 proc~self_great_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_self ( self1 , self2 ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the normL2 of self2, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self1 ! First selftor. type ( Vector ), intent ( IN ) :: self2 ! Second selftor. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self1 ) > normL2 ( self2 )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_self","tags":"","loc":"proc/self_great_self.html","title":"self_great_self â€“ VecFor"},{"text":"private elementalfunction R16P_great_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~r16p_great_self~~CallsGraph proc~r16p_great_self R16P_great_self proc~norml2 normL2 proc~r16p_great_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R16P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R16P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R16P_great_self","tags":"","loc":"proc/r16p_great_self.html","title":"R16P_great_self â€“ VecFor"},{"text":"private elementalfunction self_great_R16P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_r16p~~CallsGraph proc~self_great_r16p self_great_R16P proc~norml2 normL2 proc~self_great_r16p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_R16P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R16P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_R16P","tags":"","loc":"proc/self_great_r16p.html","title":"self_great_R16P â€“ VecFor"},{"text":"private elementalfunction R8P_great_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~r8p_great_self~~CallsGraph proc~r8p_great_self R8P_great_self proc~norml2 normL2 proc~r8p_great_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R8P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R8P_great_self","tags":"","loc":"proc/r8p_great_self.html","title":"R8P_great_self â€“ VecFor"},{"text":"private elementalfunction self_great_R8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_r8p~~CallsGraph proc~self_great_r8p self_great_R8P proc~norml2 normL2 proc~self_great_r8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_R8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_R8P","tags":"","loc":"proc/self_great_r8p.html","title":"self_great_R8P â€“ VecFor"},{"text":"private elementalfunction R4P_great_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~r4p_great_self~~CallsGraph proc~r4p_great_self R4P_great_self proc~norml2 normL2 proc~r4p_great_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function R4P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- real ( R4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction R4P_great_self","tags":"","loc":"proc/r4p_great_self.html","title":"R4P_great_self â€“ VecFor"},{"text":"private elementalfunction self_great_R4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_r4p~~CallsGraph proc~self_great_r4p self_great_R4P proc~norml2 normL2 proc~self_great_r4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_R4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. real ( R4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_R4P","tags":"","loc":"proc/self_great_r4p.html","title":"self_great_R4P â€“ VecFor"},{"text":"private elementalfunction I8P_great_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~i8p_great_self~~CallsGraph proc~i8p_great_self I8P_great_self proc~norml2 normL2 proc~i8p_great_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I8P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I8P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I8P_great_self","tags":"","loc":"proc/i8p_great_self.html","title":"I8P_great_self â€“ VecFor"},{"text":"private elementalfunction self_great_I8P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_i8p~~CallsGraph proc~self_great_i8p self_great_I8P proc~norml2 normL2 proc~self_great_i8p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_I8P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I8P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_I8P","tags":"","loc":"proc/self_great_i8p.html","title":"self_great_I8P â€“ VecFor"},{"text":"private elementalfunction I4P_great_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~i4p_great_self~~CallsGraph proc~i4p_great_self I4P_great_self proc~norml2 normL2 proc~i4p_great_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I4P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I4P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I4P_great_self","tags":"","loc":"proc/i4p_great_self.html","title":"I4P_great_self â€“ VecFor"},{"text":"private elementalfunction self_great_I4P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_i4p~~CallsGraph proc~self_great_i4p self_great_I4P proc~norml2 normL2 proc~self_great_i4p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_I4P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I4P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_I4P","tags":"","loc":"proc/self_great_i4p.html","title":"self_great_I4P â€“ VecFor"},{"text":"private elementalfunction I2P_great_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~i2p_great_self~~CallsGraph proc~i2p_great_self I2P_great_self proc~norml2 normL2 proc~i2p_great_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I2P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I2P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I2P_great_self","tags":"","loc":"proc/i2p_great_self.html","title":"I2P_great_self â€“ VecFor"},{"text":"private elementalfunction self_great_I2P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_i2p~~CallsGraph proc~self_great_i2p self_great_I2P proc~norml2 normL2 proc~self_great_i2p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_I2P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I2P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_I2P","tags":"","loc":"proc/self_great_i2p.html","title":"self_great_I2P â€“ VecFor"},{"text":"private elementalfunction I1P_great_self(scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~i1p_great_self~~CallsGraph proc~i1p_great_self I1P_great_self proc~norml2 normL2 proc~i1p_great_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function I1P_great_self ( scal , self ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- integer ( I1P ), intent ( IN ) :: scal ! Scalar. class ( Vector ), intent ( IN ) :: self ! Vector. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( real ( scal , R8P ) > normL2 ( self )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction I1P_great_self","tags":"","loc":"proc/i1p_great_self.html","title":"I1P_great_self â€“ VecFor"},{"text":"private elementalfunction self_great_I1P(self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Calls proc~~self_great_i1p~~CallsGraph proc~self_great_i1p self_great_I1P proc~norml2 normL2 proc~self_great_i1p->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code elemental function self_great_I1P ( self , scal ) result ( compare ) !--------------------------------------------------------------------------------------------------------------------------------- !< Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: self ! Vector. integer ( I1P ), intent ( IN ) :: scal ! Scalar. logical :: compare ! The result of the comparison. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- compare = ( normL2 ( self ) > real ( scal , R8P )) return !--------------------------------------------------------------------------------------------------------------------------------- endfunction self_great_I1P","tags":"","loc":"proc/self_great_i1p.html","title":"self_great_I1P â€“ VecFor"},{"text":"private elementalsubroutine init_vector_self(vec) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector. Description Initialize components of Vector variable. Source Code elemental subroutine init_vector_self ( vec ) !--------------------------------------------------------------------------------------------------------------------------------- !< Initialize components of Vector variable. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: vec !< Vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- vec % x = 0._R8P vec % y = 0._R8P vec % z = 0._R8P return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine init_vector_self","tags":"","loc":"proc/init_vector_self.html","title":"init_vector_self â€“ VecFor"},{"text":"private elementalsubroutine set_vector_self(vec, x, y, z) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector. real(kind=R8P), intent(in), optional :: x Cartesian component in x direction. real(kind=R8P), intent(in), optional :: y Cartesian component in y direction. real(kind=R8P), intent(in), optional :: z Cartesian component in z direction. Description Set components of Vector variable. Source Code elemental subroutine set_vector_self ( vec , x , y , z ) !--------------------------------------------------------------------------------------------------------------------------------- !< Set components of Vector variable. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: vec !< Vector. real ( R8P ), intent ( IN ), optional :: x !< Cartesian component in x direction. real ( R8P ), intent ( IN ), optional :: y !< Cartesian component in y direction. real ( R8P ), intent ( IN ), optional :: z !< Cartesian component in z direction. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- if ( present ( x )) vec % x = x if ( present ( y )) vec % y = y if ( present ( z )) vec % z = z return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine set_vector_self","tags":"","loc":"proc/set_vector_self.html","title":"set_vector_self â€“ VecFor"},{"text":"private subroutine load_vector_self(vec, pos, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector data. integer(kind=I8P), intent(in), optional :: pos Position specifier. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Load Vector data. Variables Type Visibility Attributes Name Initial integer(kind=I4P), public :: iostatd IO error. character(len=500), public :: iomsgd Temporary variable for IO error message. Source Code subroutine load_vector_self ( vec , pos , iostat , iomsg , unit ) !--------------------------------------------------------------------------------------------------------------------------------- !< Load Vector data. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: vec !< Vector data. integer ( I8P ), optional , intent ( IN ) :: pos !< Position specifier. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. integer ( I4P ), intent ( IN ) :: unit !< Logic unit. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- if ( present ( pos )) then read ( unit = unit , pos = pos , iostat = iostatd , iomsg = iomsgd ) vec % x , vec % y , vec % z else read ( unit = unit , iostat = iostatd , iomsg = iomsgd ) vec % x , vec % y , vec % z endif if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = trim ( adjustl ( iomsgd )) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine load_vector_self","tags":"","loc":"proc/load_vector_self.html","title":"load_vector_self â€“ VecFor"},{"text":"private subroutine save_vector_self(vec, pos, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector data. integer(kind=I8P), intent(in), optional :: pos Position specifier. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Save Vector data. Variables Type Visibility Attributes Name Initial integer(kind=I4P), public :: iostatd IO error. character(len=500), public :: iomsgd Temporary variable for IO error message. Source Code subroutine save_vector_self ( vec , pos , iostat , iomsg , unit ) !--------------------------------------------------------------------------------------------------------------------------------- !< Save Vector data. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector data. integer ( I8P ), optional , intent ( IN ) :: pos !< Position specifier. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. integer ( I4P ), intent ( IN ) :: unit !< Logic unit. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- if ( present ( pos )) then write ( unit = unit , pos = pos , iostat = iostatd , iomsg = iomsgd ) vec % x , vec % y , vec % z else write ( unit = unit , iostat = iostatd , iomsg = iomsgd ) vec % x , vec % y , vec % z endif if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = trim ( adjustl ( iomsgd )) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine save_vector_self","tags":"","loc":"proc/save_vector_self.html","title":"save_vector_self â€“ VecFor"},{"text":"private subroutine print_vector_self(vec, pref, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. character(len=*), intent(in), optional :: pref Prefixing string for outputs. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Print in a pretty ascii format the components of type Vector. Calls proc~~print_vector_self~~CallsGraph proc~print_vector_self print_vector_self none~str str proc~print_vector_self->none~str Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial character(len=:), public, allocatable :: prefd Prefixing string. integer(kind=I4P), public :: iostatd IO error. character(len=500), public :: iomsgd Temporary variable for IO error message. Functions elementalfunction str(n) result(str_) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: n Real to be converted. Return Value character(len=DR8P) Returned string containing input number. Description Procedure for converting real to string. This function achieves casting of real to string. Source Code subroutine print_vector_self ( vec , pref , iostat , iomsg , unit ) !--------------------------------------------------------------------------------------------------------------------------------- !< Print in a pretty ascii format the components of type Vector. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( IN ) :: vec !< Vector. character ( * ), optional , intent ( IN ) :: pref !< Prefixing string for outputs. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- prefd = '' ; if ( present ( pref )) prefd = pref write ( unit , '(A)' , iostat = iostatd , iomsg = iomsgd ) pref // ' Component x ' // str ( n = vec % x ) write ( unit , '(A)' , iostat = iostatd , iomsg = iomsgd ) pref // ' Component y ' // str ( n = vec % y ) write ( unit , '(A)' , iostat = iostatd , iomsg = iomsgd ) pref // ' Component z ' // str ( n = vec % z ) if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = trim ( adjustl ( iomsgd )) return !--------------------------------------------------------------------------------------------------------------------------------- contains elemental function str ( n ) result ( str_ ) !------------------------------------------------------------------------------------------------------------------------------- !< Procedure for converting real to string. This function achieves casting of real to string. !------------------------------------------------------------------------------------------------------------------------------- real ( R8P ), intent ( IN ) :: n !< Real to be converted. character ( DR8P ) :: str_ !< Returned string containing input number. !------------------------------------------------------------------------------------------------------------------------------- !------------------------------------------------------------------------------------------------------------------------------- write ( str_ , FR8P ) n ! Casting of n to string. if ( n > 0._R8P ) str_ ( 1 : 1 ) = '+' ! Prefixing plus if n>0. return !------------------------------------------------------------------------------------------------------------------------------- endfunction str endsubroutine print_vector_self","tags":"","loc":"proc/print_vector_self.html","title":"print_vector_self â€“ VecFor"},{"text":"private elementalsubroutine normalize_self(vec) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector to be normalized. Description Normalize a vector. The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the\n normalization value is set to normL2(vec)+smallR8P. Calls proc~~normalize_self~~CallsGraph proc~normalize_self normalize_self proc~norml2 normL2 proc~normalize_self->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial real(kind=R8P), public :: nm Norm L2 of vector. Source Code elemental subroutine normalize_self ( vec ) !--------------------------------------------------------------------------------------------------------------------------------- !< Normalize a vector. !< !< The normalization is made by means of norm L2. If the norm L2 of the vector is less than the parameter smallR8P the !< normalization value is set to normL2(vec)+smallR8P. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: vec !< Vector to be normalized. real ( R8P ) :: nm !< Norm L2 of vector. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- nm = normL2 ( vec ) if ( nm < smallR8P ) then nm = nm + smallR8P endif vec % x = vec % x / nm vec % y = vec % y / nm vec % z = vec % z / nm return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine normalize_self","tags":"","loc":"proc/normalize_self.html","title":"normalize_self â€“ VecFor"},{"text":"private elementalsubroutine face_normal4_self(fnormal, norm, pt1, pt2, pt3, pt4) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: fnormal Face normal. character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. type( Vector ), intent(in) :: pt4 Fourth face point. Description Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. The convention for the points numeration is the following: 1.----------.2\n  |          |\n  |          |\n  |          |\n  |          |\n 4.----------.3 The normal is calculated by the cross product of the diagonal d13 for the diagonal d24: d13 x d24.\n The normal is normalized if the variable norm is passed (with any value). Calls proc~~face_normal4_self~~CallsGraph proc~face_normal4_self face_normal4_self proc~normalize normalize proc~face_normal4_self->proc~normalize proc~norml2 normL2 proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( Vector ), public :: d13 Face 1-3 diagonals. type( Vector ), public :: d24 Face 2-4 diagonals. Source Code elemental subroutine face_normal4_self ( fnormal , norm , pt1 , pt2 , pt3 , pt4 ) !< Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. !< !< The convention for the points numeration is the following: !<``` !< 1.----------.2 !<  |          | !<  |          | !<  |          | !<  |          | !< 4.----------.3 !<``` !< The normal is calculated by the cross product of the diagonal d13 for the diagonal d24: d13 x d24. !< The normal is normalized if the variable *norm* is passed (with any value). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: fnormal !< Face normal. character ( 1 ), optional , intent ( IN ) :: norm !< If 'norm' is passed as argument the normal is normalized. type ( Vector ), intent ( IN ) :: pt1 !< First face point. type ( Vector ), intent ( IN ) :: pt2 !< Second face point. type ( Vector ), intent ( IN ) :: pt3 !< Third face point. type ( Vector ), intent ( IN ) :: pt4 !< Fourth face point. type ( Vector ) :: d13 !< Face 1-3 diagonals. type ( Vector ) :: d24 !< Face 2-4 diagonals. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- d13 = pt3 - pt1 d24 = pt4 - pt2 if ( present ( norm )) then fnormal = normalize ( d13 . cross . d24 ) else fnormal = 0.5_R8P * ( d13 . cross . d24 ) endif return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine face_normal4_self","tags":"","loc":"proc/face_normal4_self.html","title":"face_normal4_self â€“ VecFor"},{"text":"private elementalsubroutine face_normal3_self(fnormal, norm, pt1, pt2, pt3) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: fnormal Face normal. character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. Description Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. The convention for the points numeration is the following: 1.----.2\n   \\   |\n    \\  |\n     \\ |\n      \\|\n       .3 The normal is calculated by the cross product of the side s12 for the side s13: s12 x s13.\n The normal is normalized if the variable norm is passed (with any value). Calls proc~~face_normal3_self~~CallsGraph proc~face_normal3_self face_normal3_self proc~normalize normalize proc~face_normal3_self->proc~normalize proc~norml2 normL2 proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type( Vector ), public :: s12 Face 1-2 diagonals. type( Vector ), public :: s13 Face 1-3 diagonals. Source Code elemental subroutine face_normal3_self ( fnormal , norm , pt1 , pt2 , pt3 ) !--------------------------------------------------------------------------------------------------------------------------------- !< Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. !< !< The convention for the points numeration is the following: !<``` !< 1.----.2 !<   \\   | !<    \\  | !<     \\ | !<      \\| !<       .3 !<``` !< The normal is calculated by the cross product of the side s12 for the side s13: s12 x s13. !< The normal is normalized if the variable *norm* is passed (with any value). !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: fnormal !< Face normal. character ( 1 ), optional , intent ( IN ) :: norm !< If 'norm' is passed as argument the normal is normalized. type ( Vector ), intent ( IN ) :: pt1 !< First face point. type ( Vector ), intent ( IN ) :: pt2 !< Second face point. type ( Vector ), intent ( IN ) :: pt3 !< Third face point. type ( Vector ) :: s12 !< Face 1-2 diagonals. type ( Vector ) :: s13 !< Face 1-3 diagonals. !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- s12 = pt2 - pt1 s13 = pt3 - pt1 if ( present ( norm )) then fnormal = normalize ( s12 . cross . s13 ) else fnormal = 0.5_R8P * ( s12 . cross . s13 ) endif return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine face_normal3_self","tags":"","loc":"proc/face_normal3_self.html","title":"face_normal3_self â€“ VecFor"},{"text":"private puresubroutine assign_self(self1, self2) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self1 class( Vector ), intent(in) :: self2 Description Assignment between two selfs. Source Code pure subroutine assign_self ( self1 , self2 ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between two selfs. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self1 class ( Vector ), intent ( IN ) :: self2 !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self1 % x = self2 % x self1 % y = self2 % y self1 % z = self2 % z return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_self","tags":"","loc":"proc/assign_self.html","title":"assign_self â€“ VecFor"},{"text":"private elementalsubroutine assign_ScalR16P(self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self real(kind=R16P), intent(in) :: scal Description Assignment between a scalar (real R16P) and self. Source Code elemental subroutine assign_ScalR16P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (real R16P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self real ( R16P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalR16P","tags":"","loc":"proc/assign_scalr16p.html","title":"assign_ScalR16P â€“ VecFor"},{"text":"private elementalsubroutine assign_ScalR8P(self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self real(kind=R8P), intent(in) :: scal Description Assignment between a scalar (real R8P) and self. Source Code elemental subroutine assign_ScalR8P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (real R8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- implicit none class ( Vector ), intent ( INOUT ) :: self real ( R8P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalR8P","tags":"","loc":"proc/assign_scalr8p.html","title":"assign_ScalR8P â€“ VecFor"},{"text":"private elementalsubroutine assign_ScalR4P(self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self real(kind=R4P), intent(in) :: scal Description Assignment between a scalar (real R4P) and self. Source Code elemental subroutine assign_ScalR4P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (real R4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self real ( R4P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalR4P","tags":"","loc":"proc/assign_scalr4p.html","title":"assign_ScalR4P â€“ VecFor"},{"text":"private elementalsubroutine assign_ScalI8P(self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I8P), intent(in) :: scal Description Assignment between a scalar (integer I8P) and self. Source Code elemental subroutine assign_ScalI8P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (integer I8P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self integer ( I8P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalI8P","tags":"","loc":"proc/assign_scali8p.html","title":"assign_ScalI8P â€“ VecFor"},{"text":"private elementalsubroutine assign_ScalI4P(self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I4P), intent(in) :: scal Description Assignment between a scalar (integer I4P) and self. Source Code elemental subroutine assign_ScalI4P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (integer I4P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self integer ( I4P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalI4P","tags":"","loc":"proc/assign_scali4p.html","title":"assign_ScalI4P â€“ VecFor"},{"text":"private elementalsubroutine assign_ScalI2P(self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self Assignment between a scalar (integer I2P) and self. integer(kind=I2P), intent(in) :: scal Source Code elemental subroutine assign_ScalI2P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !> Assignment between a scalar (integer I2P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self integer ( I2P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalI2P","tags":"","loc":"proc/assign_scali2p.html","title":"assign_ScalI2P â€“ VecFor"},{"text":"private elementalsubroutine assign_ScalI1P(self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I1P), intent(in) :: scal Description Assignment between a scalar (integer I1P) and self. Source Code elemental subroutine assign_ScalI1P ( self , scal ) !--------------------------------------------------------------------------------------------------------------------------------- !< Assignment between a scalar (integer I1P) and self. !--------------------------------------------------------------------------------------------------------------------------------- class ( Vector ), intent ( INOUT ) :: self integer ( I1P ), intent ( IN ) :: scal !--------------------------------------------------------------------------------------------------------------------------------- !--------------------------------------------------------------------------------------------------------------------------------- self % x = real ( scal , R8P ) self % y = real ( scal , R8P ) self % z = real ( scal , R8P ) return !--------------------------------------------------------------------------------------------------------------------------------- endsubroutine assign_ScalI1P","tags":"","loc":"proc/assign_scali1p.html","title":"assign_ScalI1P â€“ VecFor"},{"text":"Module definition of class Vector. This derived type is useful for manipulating vectors in 3D space. The components of the vectors are reals with\n parametrized kind as defined by the library module. The components are defined in a three-dimensional cartesian frame of\n reference.\n All the vectorial math procedures (cross, dot products, parallelâ€¦) assume a three-dimensional cartesian frame of reference.\n The operators of assignment (=), multiplication ( ), division (/), sum (+) and subtraction (-) have been overloaded.\n Furthermore the dot and cross* products have been defined.\n Therefore this module provides a far-complete algebra based on Vector derived type. Used By module~~vecfor~~UsedByGraph module~vecfor VecFor program~kinds kinds module~vecfor->program~kinds program~simple simple module~vecfor->program~simple Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer, private, parameter :: R16P = selected_real_kind(15,307) Defined as R8P; 64 bits. integer, private, parameter :: R8P = selected_real_kind(15,307) 15  digits, range [10&#94;{-307} , 10&#94;{+307}  - 1]; 64 bits. integer, private, parameter :: R4P = selected_real_kind(6,37) 6   digits, range [10&#94;{-37}  , 10&#94;{+37}   - 1]; 32 bits. integer, private, parameter :: I8P = selected_int_kind(18) Range [-2&#94;{63},+2&#94;{63} - 1], 19 digits plus sign; 64 bits. integer, private, parameter :: I4P = selected_int_kind(9) Range [-2&#94;{31},+2&#94;{31} - 1], 10 digits plus sign; 32 bits. integer, private, parameter :: I2P = selected_int_kind(4) Range [-2&#94;{15},+2&#94;{15} - 1], 5  digits plus sign; 16 bits. integer, private, parameter :: I1P = selected_int_kind(2) Range [-2&#94;{7} ,+2&#94;{7}  - 1], 3  digits plus sign; 8  bits. real(kind=R8P), private, parameter :: smallR8P = tiny(1._R8P) Smallest (module) representable value of kind=R8P variable. integer, private, parameter :: DR8P = 23 Number of digits of output format FR8P. character(len=10), private, parameter :: FR8P = '(E23.15E3)' Output format for kind=R8P variable. type( Vector ), public, parameter :: ex = Vector(1._R8P,0._R8P,0._R8P) X direction versor. type( Vector ), public, parameter :: ey = Vector(0._R8P,1._R8P,0._R8P) Y direction versor. type( Vector ), public, parameter :: ez = Vector(0._R8P,0._R8P,1._R8P) Z direction versor. Derived Types type, public :: Vector Components Type Visibility Attributes Name Initial real(kind=R8P), public :: x = 0._R8P Cartesian component in x direction. real(kind=R8P), public :: y = 0._R8P Cartesian component in y direction. real(kind=R8P), public :: z = 0._R8P Cartesian component in z direction. Type-Bound Procedures procedure, public :: init => init_vector_self procedure, public :: set => set_vector_self procedure, public :: iolen => iolen_vector_self procedure, public :: load => load_vector_self procedure, public :: save => save_vector_self procedure, public :: print => print_vector_self procedure, public :: sq_norm => sq_norm_self procedure, public :: normL2 => normL2_self procedure, public :: normalize => normalize_self procedure, public :: normalized => normalized_self procedure, public :: face_normal4 => face_normal4_self procedure, public :: face_normal3 => face_normal3_self generic, public :: operator(.cross.) => crossproduct generic, public :: operator(.dot.) => dotproduct generic, public :: operator(.paral.) => parallel generic, public :: operator(.ortho.) => orthogonal procedure, private, pass(vec1) :: crossproduct procedure, private, pass(vec1) :: dotproduct procedure, private, pass(vec1) :: parallel procedure, private, pass(vec1) :: orthogonal generic, public :: assignment(=) => assign_self, assign_ScalR8P, assign_ScalR4P, assign_ScalI8P, assign_ScalI4P, assign_ScalI2P, assign_ScalI1P procedure, private, pass(self1) :: assign_self procedure, private, pass(self ) :: assign_ScalR8P procedure, private, pass(self ) :: assign_ScalR4P procedure, private, pass(self ) :: assign_ScalI8P procedure, private, pass(self ) :: assign_ScalI4P procedure, private, pass(self ) :: assign_ScalI2P procedure, private, pass(self ) :: assign_ScalI1P generic, public :: operator(*) => self_mul_self, ScalR8P_mul_self, self_mul_ScalR8P, ScalR4P_mul_self, self_mul_ScalR4P, ScalI8P_mul_self, self_mul_ScalI8P, ScalI4P_mul_self, self_mul_ScalI4P, ScalI2P_mul_self, self_mul_ScalI2P, ScalI1P_mul_self, self_mul_ScalI1P procedure, private, pass(self1) :: self_mul_self procedure, private, pass(self ) :: ScalR8P_mul_self procedure, private, pass(self ) :: ScalR4P_mul_self procedure, private, pass(self ) :: ScalI8P_mul_self procedure, private, pass(self ) :: ScalI4P_mul_self procedure, private, pass(self ) :: ScalI2P_mul_self procedure, private, pass(self ) :: ScalI1P_mul_self procedure, private, pass(self ) :: self_mul_ScalR8P procedure, private, pass(self ) :: self_mul_ScalR4P procedure, private, pass(self ) :: self_mul_ScalI8P procedure, private, pass(self ) :: self_mul_ScalI4P procedure, private, pass(self ) :: self_mul_ScalI2P procedure, private, pass(self ) :: self_mul_ScalI1P generic, public :: operator(/) => self_div_self, self_div_ScalR8P, self_div_ScalR4P, self_div_ScalI8P, self_div_ScalI4P, self_div_ScalI2P, self_div_ScalI1P procedure, private, pass(self1) :: self_div_self procedure, private, pass(self ) :: self_div_ScalR8P procedure, private, pass(self ) :: self_div_ScalR4P procedure, private, pass(self ) :: self_div_ScalI8P procedure, private, pass(self ) :: self_div_ScalI4P procedure, private, pass(self ) :: self_div_ScalI2P procedure, private, pass(self ) :: self_div_ScalI1P generic, public :: operator(+) => positive_self, self_sum_self, ScalR8P_sum_self, self_sum_ScalR8P, ScalR4P_sum_self, self_sum_ScalR4P, ScalI8P_sum_self, self_sum_ScalI8P, ScalI4P_sum_self, self_sum_ScalI4P, ScalI2P_sum_self, self_sum_ScalI2P, ScalI1P_sum_self, self_sum_ScalI1P procedure, private, pass(self ) :: positive_self procedure, private, pass(self1) :: self_sum_self procedure, private, pass(self ) :: ScalR8P_sum_self procedure, private, pass(self ) :: ScalR4P_sum_self procedure, private, pass(self ) :: ScalI8P_sum_self procedure, private, pass(self ) :: ScalI4P_sum_self procedure, private, pass(self ) :: ScalI2P_sum_self procedure, private, pass(self ) :: ScalI1P_sum_self procedure, private, pass(self ) :: self_sum_ScalR8P procedure, private, pass(self ) :: self_sum_ScalR4P procedure, private, pass(self ) :: self_sum_ScalI8P procedure, private, pass(self ) :: self_sum_ScalI4P procedure, private, pass(self ) :: self_sum_ScalI2P procedure, private, pass(self ) :: self_sum_ScalI1P generic, public :: operator(-) => negative_self, self_sub_self, ScalR8P_sub_self, self_sub_ScalR8P, ScalR4P_sub_self, self_sub_ScalR4P, ScalI8P_sub_self, self_sub_ScalI8P, ScalI4P_sub_self, self_sub_ScalI4P, ScalI2P_sub_self, self_sub_ScalI2P, ScalI1P_sub_self, self_sub_ScalI1P procedure, private, pass(self ) :: negative_self procedure, private, pass(self1) :: self_sub_self procedure, private, pass(self ) :: ScalR8P_sub_self procedure, private, pass(self ) :: ScalR4P_sub_self procedure, private, pass(self ) :: ScalI8P_sub_self procedure, private, pass(self ) :: ScalI4P_sub_self procedure, private, pass(self ) :: ScalI2P_sub_self procedure, private, pass(self ) :: ScalI1P_sub_self procedure, private, pass(self ) :: self_sub_ScalR8P procedure, private, pass(self ) :: self_sub_ScalR4P procedure, private, pass(self ) :: self_sub_ScalI8P procedure, private, pass(self ) :: self_sub_ScalI4P procedure, private, pass(self ) :: self_sub_ScalI2P procedure, private, pass(self ) :: self_sub_ScalI1P generic, public :: operator(/=) => self_not_eq_self, R8P_not_eq_self, self_not_eq_R8P, R4P_not_eq_self, self_not_eq_R4P, I8P_not_eq_self, self_not_eq_I8P, I4P_not_eq_self, self_not_eq_I4P, I2P_not_eq_self, self_not_eq_I2P, I1P_not_eq_self, self_not_eq_I1P generic, public :: operator(<) => self_low_self, R8P_low_self, self_low_R8P, R4P_low_self, self_low_R4P, I8P_low_self, self_low_I8P, I4P_low_self, self_low_I4P, I2P_low_self, self_low_I2P, I1P_low_self, self_low_I1P generic, public :: operator(<=) => self_low_eq_self, R8P_low_eq_self, self_low_eq_R8P, R4P_low_eq_self, self_low_eq_R4P, I8P_low_eq_self, self_low_eq_I8P, I4P_low_eq_self, self_low_eq_I4P, I2P_low_eq_self, self_low_eq_I2P, I1P_low_eq_self, self_low_eq_I1P generic, public :: operator(==) => self_eq_self, R8P_eq_self, self_eq_R8P, R4P_eq_self, self_eq_R4P, I8P_eq_self, self_eq_I8P, I4P_eq_self, self_eq_I4P, I2P_eq_self, self_eq_I2P, I1P_eq_self, self_eq_I1P generic, public :: operator(>=) => self_great_eq_self, R8P_great_eq_self, self_great_eq_R8P, R4P_great_eq_self, self_great_eq_R4P, I8P_great_eq_self, self_great_eq_I8P, I4P_great_eq_self, self_great_eq_I4P, I2P_great_eq_self, self_great_eq_I2P, I1P_great_eq_self, self_great_eq_I1P generic, public :: operator(>) => self_great_self, R8P_great_self, self_great_R8P, R4P_great_self, self_great_R4P, I8P_great_self, self_great_I8P, I4P_great_self, self_great_I4P, I2P_great_self, self_great_I2P, I1P_great_self, self_great_I1P procedure, private, pass(self1) :: self_not_eq_self procedure, private, pass(self ) :: R8P_not_eq_self procedure, private, pass(self ) :: R4P_not_eq_self procedure, private, pass(self ) :: I8P_not_eq_self procedure, private, pass(self ) :: I4P_not_eq_self procedure, private, pass(self ) :: I2P_not_eq_self procedure, private, pass(self ) :: I1P_not_eq_self procedure, private, pass(self ) :: self_not_eq_R8P procedure, private, pass(self ) :: self_not_eq_R4P procedure, private, pass(self ) :: self_not_eq_I8P procedure, private, pass(self ) :: self_not_eq_I4P procedure, private, pass(self ) :: self_not_eq_I2P procedure, private, pass(self ) :: self_not_eq_I1P procedure, private, pass(self1) :: self_low_self procedure, private, pass(self ) :: R8P_low_self procedure, private, pass(self ) :: R4P_low_self procedure, private, pass(self ) :: I8P_low_self procedure, private, pass(self ) :: I4P_low_self procedure, private, pass(self ) :: I2P_low_self procedure, private, pass(self ) :: I1P_low_self procedure, private, pass(self ) :: self_low_R8P procedure, private, pass(self ) :: self_low_R4P procedure, private, pass(self ) :: self_low_I8P procedure, private, pass(self ) :: self_low_I4P procedure, private, pass(self ) :: self_low_I2P procedure, private, pass(self ) :: self_low_I1P procedure, private, pass(self1) :: self_low_eq_self procedure, private, pass(self ) :: R8P_low_eq_self procedure, private, pass(self ) :: R4P_low_eq_self procedure, private, pass(self ) :: I8P_low_eq_self procedure, private, pass(self ) :: I4P_low_eq_self procedure, private, pass(self ) :: I2P_low_eq_self procedure, private, pass(self ) :: I1P_low_eq_self procedure, private, pass(self ) :: self_low_eq_R8P procedure, private, pass(self ) :: self_low_eq_R4P procedure, private, pass(self ) :: self_low_eq_I8P procedure, private, pass(self ) :: self_low_eq_I4P procedure, private, pass(self ) :: self_low_eq_I2P procedure, private, pass(self ) :: self_low_eq_I1P procedure, private, pass(self1) :: self_eq_self procedure, private, pass(self ) :: R8P_eq_self procedure, private, pass(self ) :: R4P_eq_self procedure, private, pass(self ) :: I8P_eq_self procedure, private, pass(self ) :: I4P_eq_self procedure, private, pass(self ) :: I2P_eq_self procedure, private, pass(self ) :: I1P_eq_self procedure, private, pass(self ) :: self_eq_R8P procedure, private, pass(self ) :: self_eq_R4P procedure, private, pass(self ) :: self_eq_I8P procedure, private, pass(self ) :: self_eq_I4P procedure, private, pass(self ) :: self_eq_I2P procedure, private, pass(self ) :: self_eq_I1P procedure, private, pass(self1) :: self_great_eq_self procedure, private, pass(self ) :: R8P_great_eq_self procedure, private, pass(self ) :: R4P_great_eq_self procedure, private, pass(self ) :: I8P_great_eq_self procedure, private, pass(self ) :: I4P_great_eq_self procedure, private, pass(self ) :: I2P_great_eq_self procedure, private, pass(self ) :: I1P_great_eq_self procedure, private, pass(self ) :: self_great_eq_R8P procedure, private, pass(self ) :: self_great_eq_R4P procedure, private, pass(self ) :: self_great_eq_I8P procedure, private, pass(self ) :: self_great_eq_I4P procedure, private, pass(self ) :: self_great_eq_I2P procedure, private, pass(self ) :: self_great_eq_I1P procedure, private, pass(self1) :: self_great_self procedure, private, pass(self ) :: R8P_great_self procedure, private, pass(self ) :: R4P_great_self procedure, private, pass(self ) :: I8P_great_self procedure, private, pass(self ) :: I4P_great_self procedure, private, pass(self ) :: I2P_great_self procedure, private, pass(self ) :: I1P_great_self procedure, private, pass(self ) :: self_great_R8P procedure, private, pass(self ) :: self_great_R4P procedure, private, pass(self ) :: self_great_I8P procedure, private, pass(self ) :: self_great_I4P procedure, private, pass(self ) :: self_great_I2P procedure, private, pass(self ) :: self_great_I1P Description Vector class. type, public :: Vector_Ptr Components Type Visibility Attributes Name Initial type( Vector ), public, pointer :: p => null() Description Pointer of Vector for creating array of pointers of Vector. Functions public elementalfunction sq_norm (vec) result(sq) Arguments Type Intent Optional Attributes Name type( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Square of the Norm. Description Compute the square of the norm of a vector. public elementalfunction normL2 (vec) result(norm) Arguments Type Intent Optional Attributes Name type( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Norm L2. Description Compute the norm L2 of a vector. public elementalfunction normalize (vec) result(norm) Arguments Type Intent Optional Attributes Name type( Vector ), intent(in) :: vec Vector to be normalized. Return Value type( Vector ) Vector normalized. Description Normalize a vector. public elementalfunction face_normal4 (norm, pt1, pt2, pt3, pt4) result(fnormal) Arguments Type Intent Optional Attributes Name character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. type( Vector ), intent(in) :: pt4 Fourth face point. Return Value type( Vector ) Face normal. Description Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. public elementalfunction face_normal3 (norm, pt1, pt2, pt3) result(fnormal) Arguments Type Intent Optional Attributes Name character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. Return Value type( Vector ) Face normal. Description Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. private function iolen_vector_self (vec) result(iolen) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value integer(kind=I4P) IO length. Description Compute IO length. private elementalfunction normalized_self (vec) result(norm) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector to be normalized. Return Value type( Vector ) Normalized copy. Description Get a normalized copy of a vector. private elementalfunction sq_norm_self (vec) result(sq) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Square of the Norm. Description Compute the square of the norm of a vector. private elementalfunction normL2_self (vec) result(norm) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. Return Value real(kind=R8P) Norm L2. Description Compute the norm L2 of a vector. private elementalfunction crossproduct (vec1, vec2) result(cross) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Cross product vector. Description Compute the cross product of 2 vectors. private elementalfunction dotproduct (vec1, vec2) result(dot) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value real(kind=R8P) Dot product. Description Compute the scalar (dot) product of 2 vectors. private elementalfunction parallel (vec1, vec2) result(paral) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 Compute the component of vec1 parallel to vec2.\n First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Component of of vec1 parallel to vec2. private elementalfunction orthogonal (vec1, vec2) result(ortho) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec1 First vector. type( Vector ), intent(in) :: vec2 Second vector. Return Value type( Vector ) Component of of vec1 orthogonal to vec2. Description Compute the component of vec1 orthogonal to vec2. private elementalfunction self_mul_self (self1, self2) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Multiply (by components) two selfs. private elementalfunction ScalR16P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (real R16P) for self. private elementalfunction self_mul_ScalR16P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (real R16P). private elementalfunction ScalR8P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (real R8P) for self. private elementalfunction self_mul_ScalR8P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (real R8P). private elementalfunction ScalR4P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (real R4P) for self. private elementalfunction self_mul_ScalR4P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (real R4P). private elementalfunction ScalI8P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I8P) for self. private elementalfunction self_mul_ScalI8P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I8P). private elementalfunction ScalI4P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I4P) for self. private elementalfunction self_mul_ScalI4P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I4P). private elementalfunction ScalI2P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I2P) for self. private elementalfunction self_mul_ScalI2P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I2P). private elementalfunction ScalI1P_mul_self (scal, self) result(mul) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Multiply scalar (integer I1P) for self. private elementalfunction self_mul_ScalI1P (self, scal) result(mul) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Multiply self for scalar (integer I1P). private elementalfunction self_div_self (self1, self2) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Divide self for self. private elementalfunction self_div_ScalR16P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (real R16P). private elementalfunction self_div_ScalR8P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (real R8P). private elementalfunction self_div_ScalR4P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (real R4P). private elementalfunction self_div_ScalI8P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I8P). private elementalfunction self_div_ScalI4P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I4P). private elementalfunction self_div_ScalI2P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I2P). private elementalfunction self_div_ScalI1P (self, scal) result(div) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Divide self for scalar (integer I1P). private elementalfunction positive_self (self) result(pos) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self Return Value type( Vector ) Description Applay unary + to a self. private elementalfunction self_sum_self (self1, self2) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Sum self and self. private elementalfunction ScalR16P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (real R16P) and self. private elementalfunction self_sum_ScalR16P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (real R16P). private elementalfunction ScalR8P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (real R8P) and self. private elementalfunction self_sum_ScalR8P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (real R8P). private elementalfunction ScalR4P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (real R4P) and self. private elementalfunction self_sum_ScalR4P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (real R4P). private elementalfunction ScalI8P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I8P) and self. private elementalfunction self_sum_ScalI8P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I8P). private elementalfunction ScalI4P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I4P) and self. private elementalfunction self_sum_ScalI4P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I4P). private elementalfunction ScalI2P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I2P) and self. private elementalfunction self_sum_ScalI2P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I2P). private elementalfunction ScalI1P_sum_self (scal, self) result(summ) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Sum scalar (integer I1P) and self. private elementalfunction self_sum_ScalI1P (self, scal) result(summ) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Sum self and scalar (integer I1P). private elementalfunction negative_self (self) result(neg) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self Return Value type( Vector ) Description Applay unary - to a self. private elementalfunction self_sub_self (self1, self2) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value type( Vector ) Description Subtract self and self. private elementalfunction ScalR16P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (real R16P) and self. private elementalfunction self_sub_ScalR16P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (real R16P). private elementalfunction ScalR8P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (real R8P) and self. private elementalfunction self_sub_ScalR8P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (real R8P). private elementalfunction ScalR4P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (real R4P) and self. private elementalfunction self_sub_ScalR4P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (real R4P). private elementalfunction ScalI8P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I8P) and self. private elementalfunction self_sub_ScalI8P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I8P). private elementalfunction ScalI4P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I4P) and self. private elementalfunction self_sub_ScalI4P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I4P). private elementalfunction ScalI2P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I2P) and self. private elementalfunction self_sub_ScalI2P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I2P). private elementalfunction ScalI1P_sub_self (scal, self) result(sub) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value type( Vector ) Description Subtract scalar (integer I1P) and self. private elementalfunction self_sub_ScalI1P (self, scal) result(sub) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value type( Vector ) Description Subtract self and scalar (integer I1P). private elementalfunction self_not_eq_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 First selftor. type( Vector ), intent(in) :: self2 Second selftor. Return Value logical The result of the comparison. Description Return .true. if the normL2 of the self1 is /= with respect the normL2 of self2 or if the directions of self1\n and self2 are different, .false. otherwise. private elementalfunction R16P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction self_not_eq_R16P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction R8P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction self_not_eq_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction R4P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction self_not_eq_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction I8P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction self_not_eq_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction I4P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction self_not_eq_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction I2P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction self_not_eq_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction I1P_not_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction self_not_eq_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is /= with respect the value of scalar scal, .false. otherwise. private elementalfunction self_low_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the normL2 of self2, .false. otherwise. private elementalfunction R16P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_R16P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction R8P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction R4P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction I8P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction I4P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction I2P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction I1P_low_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is < with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_eq_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the normL2 of self2, .false. otherwise. private elementalfunction R16P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_eq_R16P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction R8P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_eq_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction R4P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_eq_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction I8P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_eq_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction I4P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_eq_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction I2P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_eq_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction I1P_low_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_low_eq_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is <= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_eq_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 Return .true. if the normL2 of the self1 is = with respect the normL2 of self2 and the directions of\n self1 and self2 are the same, .false. otherwise. type( Vector ), intent(in) :: self2 Return Value logical private elementalfunction R16P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction self_eq_R16P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction R8P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction self_eq_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction R4P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction self_eq_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction I8P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction self_eq_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction I4P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description @brief Procedure returns .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction self_eq_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction I2P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction self_eq_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction I1P_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction self_eq_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self is = with respect the value of scalar scal, .false. otherwise. private elementalfunction self_great_eq_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the normL2 of self2, .false. otherwise. private elementalfunction R16P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_eq_R16P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction R8P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_eq_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction R4P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_eq_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction I8P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_eq_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction I4P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_eq_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction I2P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_eq_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction I1P_great_eq_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_eq_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is >= with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_self (self1, self2) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self1 type( Vector ), intent(in) :: self2 Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the normL2 of self2, .false. otherwise. private elementalfunction R16P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R16P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_R16P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R16P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction R8P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_R8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction R4P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name real(kind=R4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_R4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self real(kind=R4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction I8P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I8P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_I8P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I8P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction I4P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I4P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_I4P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I4P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction I2P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I2P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_I2P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I2P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction I1P_great_self (scal, self) result(compare) Arguments Type Intent Optional Attributes Name integer(kind=I1P), intent(in) :: scal class( Vector ), intent(in) :: self Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. private elementalfunction self_great_I1P (self, scal) result(compare) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: self integer(kind=I1P), intent(in) :: scal Return Value logical Description Return .true. if the normL2 of the self1 is > with respect the  value of scalar scal, .false. otherwise. Subroutines private elementalsubroutine init_vector_self (vec) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector. Description Initialize components of Vector variable. private elementalsubroutine set_vector_self (vec, x, y, z) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector. real(kind=R8P), intent(in), optional :: x Cartesian component in x direction. real(kind=R8P), intent(in), optional :: y Cartesian component in y direction. real(kind=R8P), intent(in), optional :: z Cartesian component in z direction. Description Set components of Vector variable. private subroutine load_vector_self (vec, pos, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector data. integer(kind=I8P), intent(in), optional :: pos Position specifier. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Load Vector data. private subroutine save_vector_self (vec, pos, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector data. integer(kind=I8P), intent(in), optional :: pos Position specifier. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Save Vector data. private subroutine print_vector_self (vec, pref, iostat, iomsg, unit) Arguments Type Intent Optional Attributes Name class( Vector ), intent(in) :: vec Vector. character(len=*), intent(in), optional :: pref Prefixing string for outputs. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. integer(kind=I4P), intent(in) :: unit Logic unit. Description Print in a pretty ascii format the components of type Vector. private elementalsubroutine normalize_self (vec) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: vec Vector to be normalized. Description Normalize a vector. private elementalsubroutine face_normal4_self (fnormal, norm, pt1, pt2, pt3, pt4) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: fnormal Face normal. character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. type( Vector ), intent(in) :: pt4 Fourth face point. Description Calculate the normal of the face defined by 4 points vector pt1, pt2, pt3 and pt4. private elementalsubroutine face_normal3_self (fnormal, norm, pt1, pt2, pt3) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: fnormal Face normal. character(len=1), intent(in), optional :: norm If 'norm' is passed as argument the normal is normalized. type( Vector ), intent(in) :: pt1 First face point. type( Vector ), intent(in) :: pt2 Second face point. type( Vector ), intent(in) :: pt3 Third face point. Description Calculate the normal of the face defined by the 3 points vector pt1, pt2 and pt3. private puresubroutine assign_self (self1, self2) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self1 class( Vector ), intent(in) :: self2 Description Assignment between two selfs. private elementalsubroutine assign_ScalR16P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self real(kind=R16P), intent(in) :: scal Description Assignment between a scalar (real R16P) and self. private elementalsubroutine assign_ScalR8P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self real(kind=R8P), intent(in) :: scal Description Assignment between a scalar (real R8P) and self. private elementalsubroutine assign_ScalR4P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self real(kind=R4P), intent(in) :: scal Description Assignment between a scalar (real R4P) and self. private elementalsubroutine assign_ScalI8P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I8P), intent(in) :: scal Description Assignment between a scalar (integer I8P) and self. private elementalsubroutine assign_ScalI4P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I4P), intent(in) :: scal Description Assignment between a scalar (integer I4P) and self. private elementalsubroutine assign_ScalI2P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self Assignment between a scalar (integer I2P) and self. integer(kind=I2P), intent(in) :: scal private elementalsubroutine assign_ScalI1P (self, scal) Arguments Type Intent Optional Attributes Name class( Vector ), intent(inout) :: self integer(kind=I1P), intent(in) :: scal Description Assignment between a scalar (integer I1P) and self.","tags":"","loc":"module/vecfor.html","title":"VecFor â€“ VecFor"},{"text":"Uses: VecFor iso_fortran_env program~~kinds~~UsesGraph program~kinds kinds iso_fortran_env iso_fortran_env iso_fortran_env->program~kinds module~vecfor VecFor module~vecfor->program~kinds Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Kinds regression test for VecFor library. Try to test the algebra of mixed vector/numbers for all supported kinds. Variables Type Attributes Name Initial integer, parameter :: R16P = selected_real_kind(33,4931) 33  digits, range [10&#94;{-4931}, 10&#94;{+4931} - 1]; 128 bits. integer, parameter :: R16P = selected_real_kind(15,307) Defined as R8P; 64 bits. integer, parameter :: R8P = selected_real_kind(15,307) 15  digits, range [10&#94;{-307} , 10&#94;{+307}  - 1]; 64 bits. integer, parameter :: R4P = selected_real_kind(6,37) 6   digits, range [10&#94;{-37}  , 10&#94;{+37}   - 1]; 32 bits. integer, parameter :: I8P = selected_int_kind(18) Range [-2&#94;{63},+2&#94;{63} - 1], 19 digits plus sign; 64 bits. integer, parameter :: I4P = selected_int_kind(9) Range [-2&#94;{31},+2&#94;{31} - 1], 10 digits plus sign; 32 bits. integer, parameter :: I2P = selected_int_kind(4) Range [-2&#94;{15},+2&#94;{15} - 1], 5  digits plus sign; 16 bits. integer, parameter :: I1P = selected_int_kind(2) Range [-2&#94;{7} ,+2&#94;{7}  - 1], 3  digits plus sign; 8  bits. type(vector) :: vector1 Vector dummy variable. type(vector) :: vector2 Vector dummy variable. Source Code program kinds !< Kinds regression test for VecFor library. !< !< Try to test the algebra of mixed vector/numbers for all supported kinds. use vecfor use , intrinsic :: ISO_FORTRAN_ENV , only : stdout => OUTPUT_UNIT implicit none #ifdef r16p integer , parameter :: R16P = selected_real_kind ( 33 , 4931 ) !< 33  digits, range [10&#94;{-4931}, 10&#94;{+4931} - 1]; 128 bits. #else integer , parameter :: R16P = selected_real_kind ( 15 , 307 ) !< Defined as R8P; 64 bits. #endif integer , parameter :: R8P = selected_real_kind ( 15 , 307 ) !< 15  digits, range [10&#94;{-307} , 10&#94;{+307}  - 1]; 64 bits. integer , parameter :: R4P = selected_real_kind ( 6 , 37 ) !< 6   digits, range [10&#94;{-37}  , 10&#94;{+37}   - 1]; 32 bits. integer , parameter :: I8P = selected_int_kind ( 18 ) !< Range [-2&#94;{63},+2&#94;{63} - 1], 19 digits plus sign; 64 bits. integer , parameter :: I4P = selected_int_kind ( 9 ) !< Range [-2&#94;{31},+2&#94;{31} - 1], 10 digits plus sign; 32 bits. integer , parameter :: I2P = selected_int_kind ( 4 ) !< Range [-2&#94;{15},+2&#94;{15} - 1], 5  digits plus sign; 16 bits. integer , parameter :: I1P = selected_int_kind ( 2 ) !< Range [-2&#94;{7} ,+2&#94;{7}  - 1], 3  digits plus sign; 8  bits. type ( vector ) :: vector1 !< Vector dummy variable. type ( vector ) :: vector2 !< Vector dummy variable. call vector1 % set ( x =- 1._R8P , y =- 1._R8P , z =- 1._R8P ) call vector1 % init () print \"(A)\" , ' Assign vector1 = [1, 2, 3]' vector1 = 1 * ex + 2 * ey + 3 * ez print \"(A)\" , ' Assign vector2 = [1, 1, 1] testing assignments by scalar' vector2 = 1._R16P vector2 = 1._R8P vector2 = 1._R4P vector2 = 1_I8P vector2 = 1_I4P vector2 = 1_I2P vector2 = 1_I1P print \"(A)\" , ' Verify * operator, multiply by 1 defined in any supported number formats' vector1 = 1._R16P * vector1 vector1 = 1._R8P * vector1 vector1 = 1._R4P * vector1 vector1 = 1_I8P * vector1 vector1 = 1_I4P * vector1 vector1 = 1_I2P * vector1 vector1 = 1_I1P * vector1 vector1 = vector1 * 1._R16P vector1 = vector1 * 1._R8P vector1 = vector1 * 1._R4P vector1 = vector1 * 1_I8P vector1 = vector1 * 1_I4P vector1 = vector1 * 1_I2P vector1 = vector1 * 1_I1P call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify * operator between vectors, vector1 * vector2' vector1 = vector1 * vector2 call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify / operator, diveded by 1 defined in any supported number formats' vector1 = vector1 / 1._R16P vector1 = vector1 / 1._R8P vector1 = vector1 / 1._R4P vector1 = vector1 / 1_I8P vector1 = vector1 / 1_I4P vector1 = vector1 / 1_I2P vector1 = vector1 / 1_I1P call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify / operator between vectors, vector1 / vector2' vector1 = vector1 / vector2 call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify + operator, add 1 (14 times) defined in any supported number formats' vector1 = 1._R16P + vector1 vector1 = 1._R8P + vector1 vector1 = 1._R4P + vector1 vector1 = 1_I8P + vector1 vector1 = 1_I4P + vector1 vector1 = 1_I2P + vector1 vector1 = 1_I1P + vector1 vector1 = + vector1 vector1 = vector1 + 1._R16P vector1 = vector1 + 1._R8P vector1 = vector1 + 1._R4P vector1 = vector1 + 1_I8P vector1 = vector1 + 1_I4P vector1 = vector1 + 1_I2P vector1 = vector1 + 1_I1P call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify + operator between vectors, vector1 + vector2' vector1 = vector1 + vector2 call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify - operator, subtract 1 (14 times) defined in any supported number formats' vector1 = 1._R16P - vector1 vector1 =- 1._R8P - vector1 vector1 = 1._R4P - vector1 vector1 =- 1_I8P - vector1 vector1 = 1_I4P - vector1 vector1 =- 1_I2P - vector1 vector1 = 1_I1P - vector1 vector1 = - vector1 vector1 = vector1 - 1._R16P vector1 = vector1 - 1._R8P vector1 = vector1 - 1._R4P vector1 = vector1 - 1_I8P vector1 = vector1 - 1_I4P vector1 = vector1 - 1_I2P vector1 = vector1 - 1_I1P call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify - operator between vectors, vector1 - vector2' vector1 = vector1 - vector2 call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify save/load methods' open ( unit = 2 , form = 'UNFORMATTED' , status = 'SCRATCH' ) call vector1 % save ( unit = 2 ) call vector1 % load ( unit = 2 ) close ( unit = 2 ) call vector1 % print ( unit = stdout ) print \"(A)\" , ' Verify < operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1<1._R16P => ' , ( vector1 < 1._R16P ) print \"(A,L1)\" , 'vector1<1._R8P  => ' , ( vector1 < 1._R8P ) print \"(A,L1)\" , 'vector1<1._R4P  => ' , ( vector1 < 1._R4P ) print \"(A,L1)\" , 'vector1<1_I8P   => ' , ( vector1 < 1_I8P ) print \"(A,L1)\" , 'vector1<1_I4P   => ' , ( vector1 < 1_I4P ) print \"(A,L1)\" , 'vector1<1_I2P   => ' , ( vector1 < 1_I2P ) print \"(A,L1)\" , 'vector1<1_I1P   => ' , ( vector1 < 1_I1P ) print \"(A,L1)\" , '1._R16P<vector1 => ' , ( 1._R16P < vector1 ) print \"(A,L1)\" , '1._R8P <vector1 => ' , ( 1._R8P < vector1 ) print \"(A,L1)\" , '1._R4P <vector1 => ' , ( 1._R4P < vector1 ) print \"(A,L1)\" , '1_I8P  <vector1 => ' , ( 1_I8P < vector1 ) print \"(A,L1)\" , '1_I4P  <vector1 => ' , ( 1_I4P < vector1 ) print \"(A,L1)\" , '1_I2P  <vector1 => ' , ( 1_I2P < vector1 ) print \"(A,L1)\" , '1_I1P  <vector1 => ' , ( 1_I1P < vector1 ) print \"(A,L1)\" , 'vector1<vector2 => ' , ( vector1 < vector2 ) print \"(A)\" , ' Verify <= operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1<=1._R16P => ' , ( vector1 <= 1._R16P ) print \"(A,L1)\" , 'vector1<=1._R8P  => ' , ( vector1 <= 1._R8P ) print \"(A,L1)\" , 'vector1<=1._R4P  => ' , ( vector1 <= 1._R4P ) print \"(A,L1)\" , 'vector1<=1_I8P   => ' , ( vector1 <= 1_I8P ) print \"(A,L1)\" , 'vector1<=1_I4P   => ' , ( vector1 <= 1_I4P ) print \"(A,L1)\" , 'vector1<=1_I2P   => ' , ( vector1 <= 1_I2P ) print \"(A,L1)\" , 'vector1<=1_I1P   => ' , ( vector1 <= 1_I1P ) print \"(A,L1)\" , '1._R16P<=vector1 => ' , ( 1._R16P <= vector1 ) print \"(A,L1)\" , '1._R8P <=vector1 => ' , ( 1._R8P <= vector1 ) print \"(A,L1)\" , '1._R4P <=vector1 => ' , ( 1._R4P <= vector1 ) print \"(A,L1)\" , '1_I8P  <=vector1 => ' , ( 1_I8P <= vector1 ) print \"(A,L1)\" , '1_I4P  <=vector1 => ' , ( 1_I4P <= vector1 ) print \"(A,L1)\" , '1_I2P  <=vector1 => ' , ( 1_I2P <= vector1 ) print \"(A,L1)\" , '1_I1P  <=vector1 => ' , ( 1_I1P <= vector1 ) print \"(A,L1)\" , 'vector1<=vector2 => ' , ( vector1 <= vector2 ) print \"(A)\" , ' Verify == operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1==1._R16P => ' , ( vector1 == 1._R16P ) print \"(A,L1)\" , 'vector1==1._R8P  => ' , ( vector1 == 1._R8P ) print \"(A,L1)\" , 'vector1==1._R4P  => ' , ( vector1 == 1._R4P ) print \"(A,L1)\" , 'vector1==1_I8P   => ' , ( vector1 == 1_I8P ) print \"(A,L1)\" , 'vector1==1_I4P   => ' , ( vector1 == 1_I4P ) print \"(A,L1)\" , 'vector1==1_I2P   => ' , ( vector1 == 1_I2P ) print \"(A,L1)\" , 'vector1==1_I1P   => ' , ( vector1 == 1_I1P ) print \"(A,L1)\" , '1._R16P==vector1 => ' , ( 1._R16P == vector1 ) print \"(A,L1)\" , '1._R8P ==vector1 => ' , ( 1._R8P == vector1 ) print \"(A,L1)\" , '1._R4P ==vector1 => ' , ( 1._R4P == vector1 ) print \"(A,L1)\" , '1_I8P  ==vector1 => ' , ( 1_I8P == vector1 ) print \"(A,L1)\" , '1_I4P  ==vector1 => ' , ( 1_I4P == vector1 ) print \"(A,L1)\" , '1_I2P  ==vector1 => ' , ( 1_I2P == vector1 ) print \"(A,L1)\" , '1_I1P  ==vector1 => ' , ( 1_I1P == vector1 ) print \"(A,L1)\" , 'vector1==vector2 => ' , ( vector1 == vector2 ) print \"(A)\" , ' Verify /= operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1/=1._R16P => ' , ( vector1 /= 1._R16P ) print \"(A,L1)\" , 'vector1/=1._R8P  => ' , ( vector1 /= 1._R8P ) print \"(A,L1)\" , 'vector1/=1._R4P  => ' , ( vector1 /= 1._R4P ) print \"(A,L1)\" , 'vector1/=1_I8P   => ' , ( vector1 /= 1_I8P ) print \"(A,L1)\" , 'vector1/=1_I4P   => ' , ( vector1 /= 1_I4P ) print \"(A,L1)\" , 'vector1/=1_I2P   => ' , ( vector1 /= 1_I2P ) print \"(A,L1)\" , 'vector1/=1_I1P   => ' , ( vector1 /= 1_I1P ) print \"(A,L1)\" , '1._R16P/=vector1 => ' , ( 1._R16P /= vector1 ) print \"(A,L1)\" , '1._R8P /=vector1 => ' , ( 1._R8P /= vector1 ) print \"(A,L1)\" , '1._R4P /=vector1 => ' , ( 1._R4P /= vector1 ) print \"(A,L1)\" , '1_I8P  /=vector1 => ' , ( 1_I8P /= vector1 ) print \"(A,L1)\" , '1_I4P  /=vector1 => ' , ( 1_I4P /= vector1 ) print \"(A,L1)\" , '1_I2P  /=vector1 => ' , ( 1_I2P /= vector1 ) print \"(A,L1)\" , '1_I1P  /=vector1 => ' , ( 1_I1P /= vector1 ) print \"(A,L1)\" , 'vector1/=vector2 => ' , ( vector1 /= vector2 ) print \"(A)\" , ' Verify >= operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1>=1._R16P => ' , ( vector1 >= 1._R16P ) print \"(A,L1)\" , 'vector1>=1._R8P  => ' , ( vector1 >= 1._R8P ) print \"(A,L1)\" , 'vector1>=1._R4P  => ' , ( vector1 >= 1._R4P ) print \"(A,L1)\" , 'vector1>=1_I8P   => ' , ( vector1 >= 1_I8P ) print \"(A,L1)\" , 'vector1>=1_I4P   => ' , ( vector1 >= 1_I4P ) print \"(A,L1)\" , 'vector1>=1_I2P   => ' , ( vector1 >= 1_I2P ) print \"(A,L1)\" , 'vector1>=1_I1P   => ' , ( vector1 >= 1_I1P ) print \"(A,L1)\" , '1._R16P>=vector1 => ' , ( 1._R16P >= vector1 ) print \"(A,L1)\" , '1._R8P >=vector1 => ' , ( 1._R8P >= vector1 ) print \"(A,L1)\" , '1._R4P >=vector1 => ' , ( 1._R4P >= vector1 ) print \"(A,L1)\" , '1_I8P  >=vector1 => ' , ( 1_I8P >= vector1 ) print \"(A,L1)\" , '1_I4P  >=vector1 => ' , ( 1_I4P >= vector1 ) print \"(A,L1)\" , '1_I2P  >=vector1 => ' , ( 1_I2P >= vector1 ) print \"(A,L1)\" , '1_I1P  >=vector1 => ' , ( 1_I1P >= vector1 ) print \"(A,L1)\" , 'vector1>=vector2 => ' , ( vector1 >= vector2 ) print \"(A)\" , ' Verify > operator, compare with 1 (and vector2) defined in any supported number formats' print \"(A,L1)\" , 'vector1>1._R16P => ' , ( vector1 > 1._R16P ) print \"(A,L1)\" , 'vector1>1._R8P  => ' , ( vector1 > 1._R8P ) print \"(A,L1)\" , 'vector1>1._R4P  => ' , ( vector1 > 1._R4P ) print \"(A,L1)\" , 'vector1>1_I8P   => ' , ( vector1 > 1_I8P ) print \"(A,L1)\" , 'vector1>1_I4P   => ' , ( vector1 > 1_I4P ) print \"(A,L1)\" , 'vector1>1_I2P   => ' , ( vector1 > 1_I2P ) print \"(A,L1)\" , 'vector1>1_I1P   => ' , ( vector1 > 1_I1P ) print \"(A,L1)\" , '1._R16P>vector1 => ' , ( 1._R16P > vector1 ) print \"(A,L1)\" , '1._R8P >vector1 => ' , ( 1._R8P > vector1 ) print \"(A,L1)\" , '1._R4P >vector1 => ' , ( 1._R4P > vector1 ) print \"(A,L1)\" , '1_I8P  >vector1 => ' , ( 1_I8P > vector1 ) print \"(A,L1)\" , '1_I4P  >vector1 => ' , ( 1_I4P > vector1 ) print \"(A,L1)\" , '1_I2P  >vector1 => ' , ( 1_I2P > vector1 ) print \"(A,L1)\" , '1_I1P  >vector1 => ' , ( 1_I1P > vector1 ) print \"(A,L1)\" , 'vector1>vector2 => ' , ( vector1 > vector2 ) stop endprogram kinds","tags":"","loc":"program/kinds.html","title":"kinds â€“ VecFor"},{"text":"Uses: VecFor iso_fortran_env program~~simple~~UsesGraph program~simple simple iso_fortran_env iso_fortran_env iso_fortran_env->program~simple module~vecfor VecFor module~vecfor->program~simple Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Simple regression test for VecFor library. Calls program~~simple~~CallsGraph program~simple simple proc~face_normal4 face_normal4 program~simple->proc~face_normal4 proc~face_normal3 face_normal3 program~simple->proc~face_normal3 proc~sq_norm sq_norm program~simple->proc~sq_norm proc~norml2 normL2 program~simple->proc~norml2 proc~normalize normalize proc~face_normal4->proc~normalize proc~face_normal3->proc~normalize proc~normalize->proc~norml2 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Type Type Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Module Graph Solid arrows point from a parent (sub)module to the submodule which is\ndescended from it. Dashed arrows point from a module being used to the\nmodule using it. Type Graph Solid arrows point from one derived type to another which extends\n(inherits from) it. Dashed arrows point from a derived type to another\ntype containing it as a components, with a label listing the name(s) of\nsaid component(s). Call Graph Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Attributes Name Initial type(vector) :: vector1 Vector dummy variable. type(vector) :: vector2 Vector dummy variable. type(vector) :: vector3 Vector dummy variable. type(vector) :: vector4 Vector dummy variable. type(vector) :: vector5 Vector dummy variable. Source Code program simple !< Simple regression test for VecFor library. use vecfor use , intrinsic :: ISO_FORTRAN_ENV , only : stdout => OUTPUT_UNIT implicit none type ( vector ) :: vector1 !< Vector dummy variable. type ( vector ) :: vector2 !< Vector dummy variable. type ( vector ) :: vector3 !< Vector dummy variable. type ( vector ) :: vector4 !< Vector dummy variable. type ( vector ) :: vector5 !< Vector dummy variable. print \"(A)\" , ' Assign vector1 = [1, 2, 3]' vector1 = 1 * ex + 2 * ey + 3 * ez print \"(A)\" , ' Assign vector2 = [-1, -2, -3]' vector2 = - 1 * ex - 2 * ey - 3 * ez print \"(A)\" , ' Verify auxiliary methods' print \"(A,F5.1)\" , ' vector1%sq_norm() = ' , vector1 % sq_norm () print \"(A,F5.1)\" , ' sq_norm(vector1) = ' , sq_norm ( vector1 ) print \"(A,F5.1)\" , ' vector1%normL2() = ' , vector1 % normL2 () print \"(A,F5.1)\" , ' normL2(vector1) = ' , normL2 ( vector1 ) print \"(A)\" , ' normalized(vector1):' vector3 = vector1 % normalized () call vector3 % print ( unit = stdout ) print \"(A)\" , 'call vector1%normalize():' vector3 = vector1 call vector3 % normalize () call vector3 % print ( unit = stdout ) print \"(A)\" , ' Verify dot product' print \"(A,F5.1)\" , ' vector1.dot.ex = ' , vector1 . dot . ex print \"(A,F5.1)\" , ' vector1.dot.ey = ' , vector1 . dot . ey print \"(A,F5.1)\" , ' vector1.dot.ez = ' , vector1 . dot . ez print \"(A,F5.1)\" , ' vector1.dot.vector2 = ' , vector1 . dot . vector2 print \"(A)\" , ' Verify cross product' print \"(A)\" , ' vector1.cross.vector2:' vector3 = vector1 . cross . vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' Verify special operators' print \"(A)\" , ' vector1.ortho.vector2:' vector3 = vector1 . ortho . vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' vector1.paral.vector2:' vector3 = vector1 . paral . vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' Verify * / + - operators' print \"(A)\" , ' vector1 * vector2:' vector3 = vector1 * vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' vector1 / vector2:' vector3 = vector1 / vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' vector1 + vector2:' vector3 = vector1 + vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' vector1 - vector2:' vector3 = vector1 - vector2 call vector3 % print ( unit = stdout ) print \"(A)\" , ' Assign vector1 = [-1, 1, 0]' vector1 = - ex + ey print \"(A)\" , ' Assign vector2 = [0, 1, 0]' vector2 = ey print \"(A)\" , ' Assign vector3 = [0, -1, 0]' vector3 = - ey print \"(A)\" , ' Assign vector4 = [-1, -1, 0]' vector4 = - ex - ey print \"(A)\" , ' Face 1-2-3 normal (stand alone procedure):' vector5 = face_normal3 ( pt1 = vector1 , pt2 = vector2 , pt3 = vector3 ) call vector5 % print ( unit = stdout ) print \"(A)\" , ' Face 1-2-3 normal (type bound method):' call vector5 % face_normal3 ( pt1 = vector1 , pt2 = vector2 , pt3 = vector3 ) call vector5 % print ( unit = stdout ) print \"(A)\" , ' Face 1-2-3-4 normal (stand alone procedure): ' vector5 = face_normal4 ( pt1 = vector1 , pt2 = vector2 , pt3 = vector3 , pt4 = vector4 ) call vector5 % print ( unit = stdout ) print \"(A)\" , ' Face 1-2-3-4 normal (type bound method):' call vector5 % face_normal4 ( pt1 = vector1 , pt2 = vector2 , pt3 = vector3 , pt4 = vector4 ) call vector5 % print ( unit = stdout ) print \"(A,I3)\" , ' IO length of vector1 = ' , vector1 % iolen () stop endprogram simple","tags":"","loc":"program/simple.html","title":"simple â€“ VecFor"}]}